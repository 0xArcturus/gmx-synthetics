{
  "address": "0x2552b5b73064bB4E139657a14039AaC4a82442da",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract RoleStore",
          "name": "_roleStore",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevGov",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextGov",
          "type": "address"
        }
      ],
      "name": "SetGov",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "marketToken",
          "type": "address"
        }
      ],
      "name": "contains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "marketToken",
          "type": "address"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "marketToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "indexToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "longToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "shortToken",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Market.Props",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getMarketKeys",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "marketToken",
          "type": "address"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleStore",
      "outputs": [
        {
          "internalType": "contract RoleStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "marketToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "marketToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "indexToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "longToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "shortToken",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Market.Props",
          "name": "market",
          "type": "tuple"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x164fe61a723289756e6f03b577d64767eb6a5d32022e2184ae4177a0845628fd",
  "receipt": {
    "to": null,
    "from": "0xFb11f15f206bdA02c224EDC744b0E50E46137046",
    "contractAddress": "0x2552b5b73064bB4E139657a14039AaC4a82442da",
    "transactionIndex": 5,
    "gasUsed": "845339",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000010000000000000000000000000000000000000000000000000000000800000000000",
    "blockHash": "0xf172e98beff1bc6910c77934cf14a592fbc8bdece4555d8cd07d7b98dc849db3",
    "transactionHash": "0x164fe61a723289756e6f03b577d64767eb6a5d32022e2184ae4177a0845628fd",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 16167234,
        "transactionHash": "0x164fe61a723289756e6f03b577d64767eb6a5d32022e2184ae4177a0845628fd",
        "address": "0x2552b5b73064bB4E139657a14039AaC4a82442da",
        "topics": [
          "0x53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb11f15f206bda02c224edc744b0e50e46137046",
        "logIndex": 19,
        "blockHash": "0xf172e98beff1bc6910c77934cf14a592fbc8bdece4555d8cd07d7b98dc849db3"
      }
    ],
    "blockNumber": 16167234,
    "cumulativeGasUsed": "1641141",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFc371E380262536c819D12B9569106bf032cC41c"
  ],
  "numDeployments": 1,
  "solcInputHash": "635dda53de9b7a48407bbc874989be1e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract RoleStore\",\"name\":\"_roleStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextGov\",\"type\":\"address\"}],\"name\":\"SetGov\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"longToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shortToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Market.Props\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getMarketKeys\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleStore\",\"outputs\":[{\"internalType\":\"contract RoleStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"longToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shortToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Market.Props\",\"name\":\"market\",\"type\":\"tuple\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/market/MarketStore.sol\":\"MarketStore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/gov/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    event SetGov(address prevGov, address nextGov);\\n\\n    error Unauthorized(address msgSender, string role);\\n\\n    constructor() {\\n        _setGov(msg.sender);\\n    }\\n\\n    modifier onlyGov() {\\n        if (msg.sender != gov) {\\n            revert Unauthorized(msg.sender, \\\"GOV\\\");\\n        }\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        _setGov(_gov);\\n    }\\n\\n    function _setGov(address _gov) internal {\\n        address prevGov = gov;\\n        gov = _gov;\\n\\n        emit SetGov(prevGov, _gov);\\n    }\\n}\\n\",\"keccak256\":\"0x2fc683a981692f88346e2e0c936bd52a0304a62ee73524c93baf19a68c99087a\",\"license\":\"BUSL-1.1\"},\"contracts/market/Market.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Market {\\n    struct Props {\\n        address marketToken;\\n        address indexToken;\\n        address longToken;\\n        address shortToken;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0xf4bc9709a5689f44263db43c0dc492d9ccef32c49fb4bf16d6f6021817bf9c49\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Market.sol\\\";\\nimport \\\"../role/RoleModule.sol\\\";\\n\\ncontract MarketStore is RoleModule {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using Market for Market.Props;\\n\\n    mapping(address => Market.Props) internal markets;\\n    EnumerableSet.AddressSet internal marketTokens;\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    function set(address marketToken, Market.Props memory market) external onlyController {\\n        markets[marketToken] = market;\\n        marketTokens.add(marketToken);\\n    }\\n\\n    function remove(address marketToken) external onlyController {\\n        delete markets[marketToken];\\n        marketTokens.remove(marketToken);\\n    }\\n\\n    function contains(address marketToken) external view returns (bool) {\\n        return marketTokens.contains(marketToken);\\n    }\\n\\n    function get(address marketToken) external view returns (Market.Props memory) {\\n        return markets[marketToken];\\n    }\\n\\n    function getMarketCount() external view returns (uint256) {\\n        return marketTokens.length();\\n    }\\n\\n    function getMarketKeys(uint256 start, uint256 end) external view returns (address[] memory) {\\n        return marketTokens.valuesAt(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0xda5132050b1c20185d5732a4c9e38f06633e880524eb635d8924dc66aa95c916\",\"license\":\"BUSL-1.1\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Role {\\n    bytes32 public constant CONTROLLER = keccak256(abi.encode(\\\"CONTROLLER\\\"));\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(abi.encode(\\\"ROUTER_PLUGIN\\\"));\\n    bytes32 public constant MARKET_KEEPER = keccak256(abi.encode(\\\"MARKET_KEEPER\\\"));\\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\\\"ORDER_KEEPER\\\"));\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(abi.encode(\\\"FROZEN_ORDER_KEEPER\\\"));\\n    bytes32 public constant PRICING_KEEPER = keccak256(abi.encode(\\\"PRICING_KEEPER\\\"));\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(abi.encode(\\\"LIQUIDATION_KEEPER\\\"));\\n    bytes32 public constant ADL_KEEPER = keccak256(abi.encode(\\\"ADL_KEEPER\\\"));\\n}\\n\",\"keccak256\":\"0xc82091b16cfe58a1ad8b8bf8d6bf6182fadde81be44bac55435127e1b4113c85\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleStore.sol\\\";\\nimport \\\"./Role.sol\\\";\\nimport \\\"../gov/Governable.sol\\\";\\n\\ncontract RoleModule is Governable {\\n    RoleStore public immutable roleStore;\\n\\n    constructor(RoleStore _roleStore) {\\n        roleStore = _roleStore;\\n    }\\n\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) {\\n            revert Unauthorized(msg.sender, \\\"SELF\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        _validateRole(Role.CONTROLLER, \\\"CONTROLLER\\\");\\n        _;\\n    }\\n\\n    modifier onlyRouterPlugin() {\\n        _validateRole(Role.ROUTER_PLUGIN, \\\"ROUTER_PLUGIN\\\");\\n        _;\\n    }\\n\\n    modifier onlyMarketKeeper() {\\n        _validateRole(Role.MARKET_KEEPER, \\\"MARKET_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyOrderKeeper() {\\n        _validateRole(Role.ORDER_KEEPER, \\\"ORDER_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyPricingKeeper() {\\n        _validateRole(Role.PRICING_KEEPER, \\\"PRICING_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyLiquidationKeeper() {\\n        _validateRole(Role.LIQUIDATION_KEEPER, \\\"LIQUIDATION_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdlKeeper() {\\n        _validateRole(Role.ADL_KEEPER, \\\"ADL_KEEPER\\\");\\n        _;\\n    }\\n\\n    function _validateRole(bytes32 role, string memory roleName) internal view {\\n        if (!roleStore.hasRole(msg.sender, role)) {\\n            revert Unauthorized(msg.sender, roleName);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x43c3d9a96d9b64fdadbee4c90fb91dbfaa87989c820d46de88918dca24492fce\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../utils/EnumerableValues.sol\\\";\\nimport \\\"../gov/Governable.sol\\\";\\n\\ncontract RoleStore is Governable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    EnumerableSet.Bytes32Set internal roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\n    // checking if an account has a role is a frequently used function\\n    // roleCache helps to save gas by offering a more efficient lookup\\n    // vs calling roleMembers[key].contains(account)\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\n\\n    function grantRole(address account, bytes32 key) external onlyGov {\\n        roles.add(key);\\n        roleMembers[key].add(account);\\n        roleCache[account][key] = true;\\n    }\\n\\n    function revokeRole(address account, bytes32 key) external onlyGov {\\n        roleMembers[key].remove(account);\\n        roleCache[account][key] = false;\\n    }\\n\\n    function hasRole(address account, bytes32 key) external view returns (bool) {\\n        return roleCache[account][key];\\n    }\\n\\n    function getRoleCount() external view returns (uint256) {\\n        return roles.length();\\n    }\\n\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return roles.valuesAt(start, end);\\n    }\\n\\n    function getRoleMemberCount(bytes32 key) external view returns (uint256) {\\n        return roleMembers[key].length();\\n    }\\n\\n    function getRoleMembers(bytes32 key, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return roleMembers[key].valuesAt(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0x526d555fb85cb999a71fe99e60e6f9a8e9351a62cff4a2cf6e3a5f763178886d\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary EnumerableValues {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        bytes32[] memory items = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        address[] memory items = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        uint256[] memory items = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0x671d7dc4a6f0e901c78c267ca003c232aed0ab5a18d4ee57e7d355e81f2347f9\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610ed6380380610ed683398101604081905261002f916100ac565b806100393361004b565b6001600160a01b0316608052506100dc565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785910160405180910390a15050565b6000602082840312156100be57600080fd5b81516001600160a01b03811681146100d557600080fd5b9392505050565b608051610dd96100fd6000396000818160f6015261059a0152610dd96000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c806301ab39881461008857806312d43a51146100b157806329092d0e146100dc5780634a4a7b04146100f15780635dbe47e814610118578063c2bc2efc1461013b578063cfad57a21461015b578063e0ad66321461016e578063fd69f3c214610181575b600080fd5b61009b6100963660046108b1565b610197565b6040516100a891906108d3565b60405180910390f35b6000546100c4906001600160a01b031681565b6040516001600160a01b0390911681526020016100a8565b6100ef6100ea36600461093c565b6101ae565b005b6100c47f000000000000000000000000000000000000000000000000000000000000000081565b61012b61012636600461093c565b610267565b60405190151581526020016100a8565b61014e61014936600461093c565b610274565b6040516100a8919061099d565b6100ef61016936600461093c565b610392565b6100ef61017c366004610a66565b6103ec565b6101896104a0565b6040519081526020016100a8565b60606101a5600284846104b1565b90505b92915050565b6101fe6040516020016101c090610b7d565b604051602081830303815290604052805190602001206040518060400160405280600a81526020016921a7a72a2927a62622a960b11b81525061057e565b6001600160a01b0381166000908152600160208190526040822080546001600160a01b0319908116825591810180548316905560028101805483169055600381018054909216909155906102556004830182610863565b50610263905060028261062e565b5050565b60006101a8600283610643565b6040805160a08101825260008082526020820181905291810182905260608082019290925260808101919091526001600160a01b03808316600090815260016020818152604092839020835160a0810185528154861681529281015485169183019190915260028101548416928201929092526003820154909216606083015260048101805460808401919061030990610ba1565b80601f016020809104026020016040519081016040528092919081815260200182805461033590610ba1565b80156103825780601f1061035757610100808354040283529160200191610382565b820191906000526020600020905b81548152906001019060200180831161036557829003601f168201915b5050505050815250509050919050565b6000546001600160a01b031633146103e0576040805163a35b150b60e01b81523360048201526024810191909152600360448201526223a7ab60e91b60648201526084015b60405180910390fd5b6103e981610658565b50565b6103fe6040516020016101c090610b7d565b6001600160a01b03828116600090815260016020818152604092839020855181546001600160a01b0319908116918716919091178255918601519281018054831693861693909317909255918401516002820180548416918516919091179055606084015160038201805490931693169290921790556080820151829190600482019061048b9082610c29565b5061049b915060029050836106b9565b505050565b60006104ac60026106ce565b905090565b606060006104be856106ce565b9050808311156104cc578092505b60006104d88585610cfe565b6001600160401b038111156104ef576104ef6109f8565b604051908082528060200260200182016040528015610518578160200160208202803683370190505b509050845b848110156105745761052f87826106d8565b8261053a8884610cfe565b8151811061054a5761054a610d11565b6001600160a01b03909216602092830291909101909101528061056c81610d27565b91505061051d565b5095945050505050565b60405163ac4ab3fb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ac4ab3fb90604401602060405180830381865afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190610d40565b61026357338160405163a35b150b60e01b81526004016103d7929190610d69565b60006101a5836001600160a01b0384166106e4565b60006101a5836001600160a01b0384166107d7565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785910160405180910390a15050565b60006101a5836001600160a01b0384166107ef565b60006101a8825490565b60006101a58383610839565b600081815260018301602052604081205480156107cd576000610708600183610cfe565b855490915060009061071c90600190610cfe565b905081811461078157600086600001828154811061073c5761073c610d11565b906000526020600020015490508087600001848154811061075f5761075f610d11565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061079257610792610d8d565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506101a8565b60009150506101a8565b60009081526001919091016020526040902054151590565b60006107fb83836107d7565b610831575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556101a8565b5060006101a8565b600082600001828154811061085057610850610d11565b9060005260206000200154905092915050565b50805461086f90610ba1565b6000825580601f1061087f575050565b601f0160209004906000526020600020908101906103e991905b808211156108ad5760008155600101610899565b5090565b600080604083850312156108c457600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156109145783516001600160a01b0316835292840192918401916001016108ef565b50909695505050505050565b80356001600160a01b038116811461093757600080fd5b919050565b60006020828403121561094e57600080fd5b6101a582610920565b6000815180845260005b8181101561097d57602081850181015186830182015201610961565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600060018060a01b0380845116602084015280602085015116604084015280604085015116606084015280606085015116608084015250608083015160a0808401526109f060c0840182610957565b949350505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715610a3057610a306109f8565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610a5e57610a5e6109f8565b604052919050565b60008060408385031215610a7957600080fd5b610a8283610920565b91506020838101356001600160401b0380821115610a9f57600080fd5b9085019060a08288031215610ab357600080fd5b610abb610a0e565b610ac483610920565b8152610ad1848401610920565b84820152610ae160408401610920565b6040820152610af260608401610920565b6060820152608083013582811115610b0957600080fd5b80840193505087601f840112610b1e57600080fd5b823582811115610b3057610b306109f8565b610b42601f8201601f19168601610a36565b92508083528885828601011115610b5857600080fd5b8085850186850137600085828501015250816080820152809450505050509250929050565b6020808252600a908201526921a7a72a2927a62622a960b11b604082015260600190565b600181811c90821680610bb557607f821691505b602082108103610bd557634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561049b57600081815260208120601f850160051c81016020861015610c025750805b601f850160051c820191505b81811015610c2157828155600101610c0e565b505050505050565b81516001600160401b03811115610c4257610c426109f8565b610c5681610c508454610ba1565b84610bdb565b602080601f831160018114610c8b5760008415610c735750858301515b600019600386901b1c1916600185901b178555610c21565b600085815260208120601f198616915b82811015610cba57888601518255948401946001909101908401610c9b565b5085821015610cd85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b818103818111156101a8576101a8610ce8565b634e487b7160e01b600052603260045260246000fd5b600060018201610d3957610d39610ce8565b5060010190565b600060208284031215610d5257600080fd5b81518015158114610d6257600080fd5b9392505050565b6001600160a01b03831681526040602082018190526000906109f090830184610957565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220591952644f6212494ac0fa5d312aaf8d9f5436f8a07fdb1abaee5aa14faff4d864736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100835760003560e01c806301ab39881461008857806312d43a51146100b157806329092d0e146100dc5780634a4a7b04146100f15780635dbe47e814610118578063c2bc2efc1461013b578063cfad57a21461015b578063e0ad66321461016e578063fd69f3c214610181575b600080fd5b61009b6100963660046108b1565b610197565b6040516100a891906108d3565b60405180910390f35b6000546100c4906001600160a01b031681565b6040516001600160a01b0390911681526020016100a8565b6100ef6100ea36600461093c565b6101ae565b005b6100c47f000000000000000000000000000000000000000000000000000000000000000081565b61012b61012636600461093c565b610267565b60405190151581526020016100a8565b61014e61014936600461093c565b610274565b6040516100a8919061099d565b6100ef61016936600461093c565b610392565b6100ef61017c366004610a66565b6103ec565b6101896104a0565b6040519081526020016100a8565b60606101a5600284846104b1565b90505b92915050565b6101fe6040516020016101c090610b7d565b604051602081830303815290604052805190602001206040518060400160405280600a81526020016921a7a72a2927a62622a960b11b81525061057e565b6001600160a01b0381166000908152600160208190526040822080546001600160a01b0319908116825591810180548316905560028101805483169055600381018054909216909155906102556004830182610863565b50610263905060028261062e565b5050565b60006101a8600283610643565b6040805160a08101825260008082526020820181905291810182905260608082019290925260808101919091526001600160a01b03808316600090815260016020818152604092839020835160a0810185528154861681529281015485169183019190915260028101548416928201929092526003820154909216606083015260048101805460808401919061030990610ba1565b80601f016020809104026020016040519081016040528092919081815260200182805461033590610ba1565b80156103825780601f1061035757610100808354040283529160200191610382565b820191906000526020600020905b81548152906001019060200180831161036557829003601f168201915b5050505050815250509050919050565b6000546001600160a01b031633146103e0576040805163a35b150b60e01b81523360048201526024810191909152600360448201526223a7ab60e91b60648201526084015b60405180910390fd5b6103e981610658565b50565b6103fe6040516020016101c090610b7d565b6001600160a01b03828116600090815260016020818152604092839020855181546001600160a01b0319908116918716919091178255918601519281018054831693861693909317909255918401516002820180548416918516919091179055606084015160038201805490931693169290921790556080820151829190600482019061048b9082610c29565b5061049b915060029050836106b9565b505050565b60006104ac60026106ce565b905090565b606060006104be856106ce565b9050808311156104cc578092505b60006104d88585610cfe565b6001600160401b038111156104ef576104ef6109f8565b604051908082528060200260200182016040528015610518578160200160208202803683370190505b509050845b848110156105745761052f87826106d8565b8261053a8884610cfe565b8151811061054a5761054a610d11565b6001600160a01b03909216602092830291909101909101528061056c81610d27565b91505061051d565b5095945050505050565b60405163ac4ab3fb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ac4ab3fb90604401602060405180830381865afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190610d40565b61026357338160405163a35b150b60e01b81526004016103d7929190610d69565b60006101a5836001600160a01b0384166106e4565b60006101a5836001600160a01b0384166107d7565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785910160405180910390a15050565b60006101a5836001600160a01b0384166107ef565b60006101a8825490565b60006101a58383610839565b600081815260018301602052604081205480156107cd576000610708600183610cfe565b855490915060009061071c90600190610cfe565b905081811461078157600086600001828154811061073c5761073c610d11565b906000526020600020015490508087600001848154811061075f5761075f610d11565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061079257610792610d8d565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506101a8565b60009150506101a8565b60009081526001919091016020526040902054151590565b60006107fb83836107d7565b610831575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556101a8565b5060006101a8565b600082600001828154811061085057610850610d11565b9060005260206000200154905092915050565b50805461086f90610ba1565b6000825580601f1061087f575050565b601f0160209004906000526020600020908101906103e991905b808211156108ad5760008155600101610899565b5090565b600080604083850312156108c457600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156109145783516001600160a01b0316835292840192918401916001016108ef565b50909695505050505050565b80356001600160a01b038116811461093757600080fd5b919050565b60006020828403121561094e57600080fd5b6101a582610920565b6000815180845260005b8181101561097d57602081850181015186830182015201610961565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600060018060a01b0380845116602084015280602085015116604084015280604085015116606084015280606085015116608084015250608083015160a0808401526109f060c0840182610957565b949350505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715610a3057610a306109f8565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610a5e57610a5e6109f8565b604052919050565b60008060408385031215610a7957600080fd5b610a8283610920565b91506020838101356001600160401b0380821115610a9f57600080fd5b9085019060a08288031215610ab357600080fd5b610abb610a0e565b610ac483610920565b8152610ad1848401610920565b84820152610ae160408401610920565b6040820152610af260608401610920565b6060820152608083013582811115610b0957600080fd5b80840193505087601f840112610b1e57600080fd5b823582811115610b3057610b306109f8565b610b42601f8201601f19168601610a36565b92508083528885828601011115610b5857600080fd5b8085850186850137600085828501015250816080820152809450505050509250929050565b6020808252600a908201526921a7a72a2927a62622a960b11b604082015260600190565b600181811c90821680610bb557607f821691505b602082108103610bd557634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561049b57600081815260208120601f850160051c81016020861015610c025750805b601f850160051c820191505b81811015610c2157828155600101610c0e565b505050505050565b81516001600160401b03811115610c4257610c426109f8565b610c5681610c508454610ba1565b84610bdb565b602080601f831160018114610c8b5760008415610c735750858301515b600019600386901b1c1916600185901b178555610c21565b600085815260208120601f198616915b82811015610cba57888601518255948401946001909101908401610c9b565b5085821015610cd85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b818103818111156101a8576101a8610ce8565b634e487b7160e01b600052603260045260246000fd5b600060018201610d3957610d39610ce8565b5060010190565b600060208284031215610d5257600080fd5b81518015158114610d6257600080fd5b9392505050565b6001600160a01b03831681526040602082018190526000906109f090830184610957565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220591952644f6212494ac0fa5d312aaf8d9f5436f8a07fdb1abaee5aa14faff4d864736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12130,
        "contract": "contracts/market/MarketStore.sol:MarketStore",
        "label": "gov",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12516,
        "contract": "contracts/market/MarketStore.sol:MarketStore",
        "label": "markets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Props)12363_storage)"
      },
      {
        "astId": 12519,
        "contract": "contracts/market/MarketStore.sol:MarketStore",
        "label": "marketTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)4299_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Props)12363_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Market.Props)",
        "numberOfBytes": "32",
        "value": "t_struct(Props)12363_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4299_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4298,
            "contract": "contracts/market/MarketStore.sol:MarketStore",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3998_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Props)12363_storage": {
        "encoding": "inplace",
        "label": "struct Market.Props",
        "members": [
          {
            "astId": 12354,
            "contract": "contracts/market/MarketStore.sol:MarketStore",
            "label": "marketToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12356,
            "contract": "contracts/market/MarketStore.sol:MarketStore",
            "label": "indexToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12358,
            "contract": "contracts/market/MarketStore.sol:MarketStore",
            "label": "longToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 12360,
            "contract": "contracts/market/MarketStore.sol:MarketStore",
            "label": "shortToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 12362,
            "contract": "contracts/market/MarketStore.sol:MarketStore",
            "label": "data",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Set)3998_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3993,
            "contract": "contracts/market/MarketStore.sol:MarketStore",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3997,
            "contract": "contracts/market/MarketStore.sol:MarketStore",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}