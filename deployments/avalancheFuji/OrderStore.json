{
  "address": "0x5b63F8b648272600C3F5DED6d7B90529422F33b4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract RoleStore",
          "name": "_roleStore",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevGov",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextGov",
          "type": "address"
        }
      ],
      "name": "SetGov",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialCollateralToken",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "swapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct Order.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "sizeDeltaUsd",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialCollateralDeltaAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "triggerPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "acceptablePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minOutputAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtBlock",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Order.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Order.OrderType",
                  "name": "orderType",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isLong",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isFrozen",
                  "type": "bool"
                }
              ],
              "internalType": "struct Order.Flags",
              "name": "flags",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Order.Props",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountOrderCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getAccountOrderKeys",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOrderCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getOrderKeys",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callbackContract",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "initialCollateralToken",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "swapPath",
              "type": "address[]"
            }
          ],
          "internalType": "struct Order.Addresses",
          "name": "addresses",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sizeDeltaUsd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialCollateralDeltaAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "triggerPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "acceptablePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "executionFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "callbackGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minOutputAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "updatedAtBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct Order.Numbers",
          "name": "numbers",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum Order.OrderType",
              "name": "orderType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "shouldUnwrapNativeToken",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isFrozen",
              "type": "bool"
            }
          ],
          "internalType": "struct Order.Flags",
          "name": "flags",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "recordTransferIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverWnt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleStore",
      "outputs": [
        {
          "internalType": "contract RoleStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialCollateralToken",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "swapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct Order.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "sizeDeltaUsd",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialCollateralDeltaAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "triggerPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "acceptablePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minOutputAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtBlock",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Order.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Order.OrderType",
                  "name": "orderType",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isLong",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isFrozen",
                  "type": "bool"
                }
              ],
              "internalType": "struct Order.Flags",
              "name": "flags",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Order.Props",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "transferOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wnt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "shouldUnwrapNativeToken",
          "type": "bool"
        }
      ],
      "name": "transferOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x12158a05f53be8d642a8454862f0a0aad64b082f20042df10e1dce57cae37bf4",
  "receipt": {
    "to": null,
    "from": "0xFb11f15f206bdA02c224EDC744b0E50E46137046",
    "contractAddress": "0x5b63F8b648272600C3F5DED6d7B90529422F33b4",
    "transactionIndex": 2,
    "gasUsed": "1902247",
    "logsBloom": "0x
    "blockHash": "0xbbca3c1385a0bcc11087bef0b718caf10db9b84d5eb302bc73e96fc832642992",
    "transactionHash": "0x12158a05f53be8d642a8454862f0a0aad64b082f20042df10e1dce57cae37bf4",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 16188783,
        "transactionHash": "0x12158a05f53be8d642a8454862f0a0aad64b082f20042df10e1dce57cae37bf4",
        "address": "0x5b63F8b648272600C3F5DED6d7B90529422F33b4",
        "topics": [
          "0x53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb11f15f206bda02c224edc744b0e50e46137046",
        "logIndex": 3,
        "blockHash": "0xbbca3c1385a0bcc11087bef0b718caf10db9b84d5eb302bc73e96fc832642992"
      }
    ],
    "blockNumber": 16188783,
    "cumulativeGasUsed": "2061194",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFc371E380262536c819D12B9569106bf032cC41c"
  ],
  "numDeployments": 1,
  "solcInputHash": "635dda53de9b7a48407bbc874989be1e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract RoleStore\",\"name\":\"_roleStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextGov\",\"type\":\"address\"}],\"name\":\"SetGov\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialCollateralToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct Order.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sizeDeltaUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralDeltaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct Order.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Order.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"}],\"internalType\":\"struct Order.Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Order.Props\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountOrderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getAccountOrderKeys\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getOrderKeys\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialCollateralToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct Order.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sizeDeltaUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralDeltaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct Order.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Order.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"}],\"internalType\":\"struct Order.Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recordTransferIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverWnt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleStore\",\"outputs\":[{\"internalType\":\"contract RoleStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialCollateralToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct Order.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sizeDeltaUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralDeltaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct Order.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Order.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"}],\"internalType\":\"struct Order.Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Order.Props\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"transferOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wnt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"}],\"name\":\"transferOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/order/OrderStore.sol\":\"OrderStore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/bank/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../wrap/IWNT.sol\\\";\\nimport \\\"./FundReceiver.sol\\\";\\n\\ncontract Bank is FundReceiver {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(RoleStore _roleStore) FundReceiver(_roleStore) {}\\n\\n    receive() external payable {}\\n\\n    function transferOut(address token, uint256 amount, address receiver) external onlyController {\\n        _transferOut(token, amount, receiver);\\n    }\\n\\n    function transferOut(\\n        address wnt,\\n        address token,\\n        uint256 amount,\\n        address receiver,\\n        bool shouldUnwrapNativeToken\\n    ) external onlyController {\\n        if (token == wnt && shouldUnwrapNativeToken) {\\n            _transferOutNativeToken(token, amount, receiver);\\n        } else {\\n            _transferOut(token, amount, receiver);\\n        }\\n    }\\n\\n    function _transferOut(address token, uint256 amount, address receiver) internal {\\n        require(receiver != address(this), \\\"Bank: invalid receiver\\\");\\n\\n        IERC20(token).safeTransfer(receiver, amount);\\n\\n        _afterTransferOut(token);\\n    }\\n\\n    function _transferOutNativeToken(address token, uint256 amount, address receiver) internal {\\n        require(receiver != address(this), \\\"Bank: invalid receiver\\\");\\n\\n        IWNT(token).withdraw(amount);\\n        payable(receiver).transfer(amount);\\n\\n        _afterTransferOut(token);\\n    }\\n\\n    function _afterTransferOut(address /* token */) internal virtual {}\\n}\\n\",\"keccak256\":\"0xab253c00c4bd713a80b33f0373586080e6bfdacdc06770e867e09a420df74521\",\"license\":\"BUSL-1.1\"},\"contracts/bank/FundReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\n\\ncontract FundReceiver is RoleModule {\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    // users may incorrectly send the native token into the contract, allow it to be recovered\\n    function recoverWnt(address payable receiver, uint256 amount) external onlyController {\\n        receiver.transfer(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2cfbcc4a2b0883944c7c870ce74e089f963caffea8c899dddc38ca30f584d552\",\"license\":\"BUSL-1.1\"},\"contracts/bank/StrictBank.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../wrap/IWNT.sol\\\";\\nimport \\\"./Bank.sol\\\";\\n\\ncontract StrictBank is Bank {\\n    using SafeERC20 for IERC20;\\n\\n    // used to record token balances to evaluate amounts transferred in\\n    mapping (address => uint256) public tokenBalances;\\n\\n    constructor(RoleStore _roleStore) Bank(_roleStore) {}\\n\\n    function recordTransferIn(address token) external onlyController returns (uint256) {\\n        return _recordTransferIn(token);\\n    }\\n\\n    function _recordTransferIn(address token) internal returns (uint256) {\\n        uint256 prevBalance = tokenBalances[token];\\n        uint256 nextBalance = IERC20(token).balanceOf(address(this));\\n        tokenBalances[token] = nextBalance;\\n\\n        return nextBalance - prevBalance;\\n    }\\n\\n    function _afterTransferOut(address token) internal override {\\n        tokenBalances[token] = IERC20(token).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x47cce1ec8b7309603987ad77787e695abb9133015025e2684ced3cd640e5dc86\",\"license\":\"BUSL-1.1\"},\"contracts/chain/ArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ninterface ArbSys {\\n    function arbBlockNumber() external view returns (uint256);\\n    function arbBlockHash(uint256 blockNumber) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7bee829cb502196c8786cbd51773bdb48420c0740e1b85f915840c6619b0e955\",\"license\":\"BUSL-1.1\"},\"contracts/chain/Chain.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ArbSys.sol\\\";\\n\\nlibrary Chain {\\n    uint256 constant public ARBITRUM_CHAIN_ID = 42161;\\n    uint256 constant public ARBITRUM_RINKEBY_CHAIN_ID = 421611;\\n\\n    ArbSys constant public arbSys = ArbSys(address(100));\\n\\n    function currentBlockNumber() internal view returns (uint256) {\\n        if (block.chainid == ARBITRUM_CHAIN_ID || block.chainid == ARBITRUM_RINKEBY_CHAIN_ID) {\\n            return arbSys.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getBlockHash(uint256 blockNumber) internal view returns (bytes32) {\\n        if (block.chainid == ARBITRUM_CHAIN_ID || block.chainid == ARBITRUM_RINKEBY_CHAIN_ID) {\\n            return arbSys.arbBlockHash(blockNumber);\\n        }\\n\\n        return blockhash(blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xa9c4257532f24bb1a8fb81f2156c8b187981e88616fd23310e896fae89178762\",\"license\":\"BUSL-1.1\"},\"contracts/gov/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    event SetGov(address prevGov, address nextGov);\\n\\n    error Unauthorized(address msgSender, string role);\\n\\n    constructor() {\\n        _setGov(msg.sender);\\n    }\\n\\n    modifier onlyGov() {\\n        if (msg.sender != gov) {\\n            revert Unauthorized(msg.sender, \\\"GOV\\\");\\n        }\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        _setGov(_gov);\\n    }\\n\\n    function _setGov(address _gov) internal {\\n        address prevGov = gov;\\n        gov = _gov;\\n\\n        emit SetGov(prevGov, _gov);\\n    }\\n}\\n\",\"keccak256\":\"0x2fc683a981692f88346e2e0c936bd52a0304a62ee73524c93baf19a68c99087a\",\"license\":\"BUSL-1.1\"},\"contracts/order/Order.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../chain/Chain.sol\\\";\\n\\nlibrary Order {\\n    using Order for Props;\\n\\n    enum OrderType {\\n        // for LimitIncrease, LimitDecrease, StopLossDecrease orders, two prices for the\\n        // index token need to be recorded in the oracle\\n        // the price with the smaller block number is stored as the primary price while the price with the\\n        // larger block number is stored as the secondary price\\n        // the triggerPrice must be validated to be between the primary price and secondary price\\n        // LimitDecrease and StopLossDecrease are reduce-only orders\\n\\n        // MarketSwap: swap token A to token B at the current market price\\n        // the order will be cancelled if the minOutputAmount cannot be fulfilled\\n        MarketSwap,\\n        // LimitSwap: swap token A to token B if the minOutputAmount can be fulfilled\\n        LimitSwap,\\n        // MarketIncrease: increase position at the current market price\\n        // the order will be cancelled if the position cannot be increased at the acceptablePrice\\n        MarketIncrease,\\n        // LimitIncrease: increase position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        LimitIncrease,\\n        // MarketDecrease: decrease position at the curent market price\\n        // the order will be cancelled if the position cannot be decreased at the acceptablePrice\\n        MarketDecrease,\\n        // LimitDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        LimitDecrease,\\n        // StopLossDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        StopLossDecrease,\\n        // Liquidation: allows liquidation of positions if the criteria for liquidation are met\\n        Liquidation\\n    }\\n\\n    struct Addresses {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address market;\\n         // for increase positions initialCollateralToken is the token sent in by the user\\n         // the token will be swapped through the specified swapPath, before position increase\\n         // for decrease position initialCollateralToken is the collateral token of the position\\n         // any withdrawn collateral will be swapped through the specified swapPath, after position decrease\\n        address initialCollateralToken;\\n        address[] swapPath; // list of markets to swap collateral through\\n    }\\n\\n    struct Numbers {\\n        uint256 sizeDeltaUsd;\\n        uint256 initialCollateralDeltaAmount;\\n        uint256 triggerPrice;\\n        uint256 acceptablePrice;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 minOutputAmount;\\n        uint256 updatedAtBlock;\\n    }\\n\\n    struct Flags {\\n        OrderType orderType;\\n        bool isLong;\\n        bool shouldUnwrapNativeToken;\\n        bool isFrozen;\\n    }\\n\\n    // there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // we use sub-structs here to avoid the issue\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n        bytes data;\\n    }\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    function initialCollateralToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialCollateralToken;\\n    }\\n\\n    function swapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.swapPath;\\n    }\\n\\n    function sizeDeltaUsd(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.sizeDeltaUsd;\\n    }\\n\\n    function initialCollateralDeltaAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialCollateralDeltaAmount;\\n    }\\n\\n    function triggerPrice(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.triggerPrice;\\n    }\\n\\n    function acceptablePrice(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.acceptablePrice;\\n    }\\n\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    function minOutputAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minOutputAmount;\\n    }\\n\\n    function updatedAtBlock(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtBlock;\\n    }\\n\\n    function orderType(Props memory props) internal pure returns (OrderType) {\\n        return props.flags.orderType;\\n    }\\n\\n    function isLong(Props memory props) internal pure returns (bool) {\\n        return props.flags.isLong;\\n    }\\n\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    function isFrozen(Props memory props) internal pure returns (bool) {\\n        return props.flags.isFrozen;\\n    }\\n\\n    function setAccount(Props memory props, address _value) internal pure {\\n        props.addresses.account = _value;\\n    }\\n\\n    function setReceiver(Props memory props, address _value) internal pure {\\n        props.addresses.receiver = _value;\\n    }\\n\\n    function setCallbackContract(Props memory props, address _value) internal pure {\\n        props.addresses.callbackContract = _value;\\n    }\\n\\n    function setMarket(Props memory props, address _value) internal pure {\\n        props.addresses.market = _value;\\n    }\\n\\n    function setInitialCollateralToken(Props memory props, address _value) internal pure {\\n        props.addresses.initialCollateralToken = _value;\\n    }\\n\\n    function setSwapPath(Props memory props, address[] memory _value) internal pure {\\n        props.addresses.swapPath = _value;\\n    }\\n\\n    function setSizeDeltaUsd(Props memory props, uint256 _value) internal pure {\\n        props.numbers.sizeDeltaUsd = _value;\\n    }\\n\\n    function setInitialCollateralDeltaAmount(Props memory props, uint256 _value) internal pure {\\n        props.numbers.initialCollateralDeltaAmount = _value;\\n    }\\n\\n    function setTriggerPrice(Props memory props, uint256 _value) internal pure {\\n        props.numbers.triggerPrice = _value;\\n    }\\n\\n    function setAcceptablePrice(Props memory props, uint256 _value) internal pure {\\n        props.numbers.acceptablePrice = _value;\\n    }\\n\\n    function setExecutionFee(Props memory props, uint256 _value) internal pure {\\n        props.numbers.executionFee = _value;\\n    }\\n\\n    function setCallbackGasLimit(Props memory props, uint256 _value) internal pure {\\n        props.numbers.callbackGasLimit = _value;\\n    }\\n\\n    function setMinOutputAmount(Props memory props, uint256 _value) internal pure {\\n        props.numbers.minOutputAmount = _value;\\n    }\\n\\n    function setUpdatedAtBlock(Props memory props, uint256 _value) internal pure {\\n        props.numbers.updatedAtBlock = _value;\\n    }\\n\\n    function setOrderType(Props memory props, OrderType _value) internal pure {\\n        props.flags.orderType = _value;\\n    }\\n\\n    function setIsLong(Props memory props, bool _value) internal pure {\\n        props.flags.isLong = _value;\\n    }\\n\\n    function setShouldUnwrapNativeToken(Props memory props, bool _value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = _value;\\n    }\\n\\n    function setIsFrozen(Props memory props, bool _value) internal pure {\\n        props.flags.isFrozen = _value;\\n    }\\n\\n    function touch(Props memory props) internal view {\\n        props.setUpdatedAtBlock(Chain.currentBlockNumber());\\n    }\\n}\\n\",\"keccak256\":\"0x3072aff281a5f4a66d7315ba7335b4f412725dddb6aebf3391175a03fd55e9ec\",\"license\":\"BUSL-1.1\"},\"contracts/order/OrderStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Order.sol\\\";\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"../bank/StrictBank.sol\\\";\\n\\ncontract OrderStore is StrictBank {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n    using Order for Order.Props;\\n\\n    mapping(bytes32 => Order.Props) public orders;\\n    EnumerableSet.Bytes32Set internal orderKeys;\\n    mapping(address => EnumerableSet.Bytes32Set) internal accountOrderKeys;\\n\\n    constructor(RoleStore _roleStore) StrictBank(_roleStore) {}\\n\\n    function set(bytes32 key, Order.Props memory order) external onlyController {\\n        orders[key] = order;\\n        accountOrderKeys[order.account()].add(key);\\n        orderKeys.add(key);\\n    }\\n\\n    function remove(bytes32 key, address account) external onlyController {\\n        delete orders[key];\\n        accountOrderKeys[account].remove(key);\\n        orderKeys.remove(key);\\n    }\\n\\n    function get(bytes32 key) external view returns (Order.Props memory) {\\n        return orders[key];\\n    }\\n\\n    function getOrderCount() external view returns (uint256) {\\n        return orderKeys.length();\\n    }\\n\\n    function getOrderKeys(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return orderKeys.valuesAt(start, end);\\n    }\\n\\n    function getAccountOrderCount(address account) external view returns (uint256) {\\n        return accountOrderKeys[account].length();\\n    }\\n\\n    function getAccountOrderKeys(address account, uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return accountOrderKeys[account].valuesAt(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0x13ec6c6f84227b0c268ff00f3f057e75445cb22d2c02c762644cf05d8ddd54e2\",\"license\":\"BUSL-1.1\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Role {\\n    bytes32 public constant CONTROLLER = keccak256(abi.encode(\\\"CONTROLLER\\\"));\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(abi.encode(\\\"ROUTER_PLUGIN\\\"));\\n    bytes32 public constant MARKET_KEEPER = keccak256(abi.encode(\\\"MARKET_KEEPER\\\"));\\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\\\"ORDER_KEEPER\\\"));\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(abi.encode(\\\"FROZEN_ORDER_KEEPER\\\"));\\n    bytes32 public constant PRICING_KEEPER = keccak256(abi.encode(\\\"PRICING_KEEPER\\\"));\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(abi.encode(\\\"LIQUIDATION_KEEPER\\\"));\\n    bytes32 public constant ADL_KEEPER = keccak256(abi.encode(\\\"ADL_KEEPER\\\"));\\n}\\n\",\"keccak256\":\"0xc82091b16cfe58a1ad8b8bf8d6bf6182fadde81be44bac55435127e1b4113c85\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleStore.sol\\\";\\nimport \\\"./Role.sol\\\";\\nimport \\\"../gov/Governable.sol\\\";\\n\\ncontract RoleModule is Governable {\\n    RoleStore public immutable roleStore;\\n\\n    constructor(RoleStore _roleStore) {\\n        roleStore = _roleStore;\\n    }\\n\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) {\\n            revert Unauthorized(msg.sender, \\\"SELF\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        _validateRole(Role.CONTROLLER, \\\"CONTROLLER\\\");\\n        _;\\n    }\\n\\n    modifier onlyRouterPlugin() {\\n        _validateRole(Role.ROUTER_PLUGIN, \\\"ROUTER_PLUGIN\\\");\\n        _;\\n    }\\n\\n    modifier onlyMarketKeeper() {\\n        _validateRole(Role.MARKET_KEEPER, \\\"MARKET_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyOrderKeeper() {\\n        _validateRole(Role.ORDER_KEEPER, \\\"ORDER_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyPricingKeeper() {\\n        _validateRole(Role.PRICING_KEEPER, \\\"PRICING_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyLiquidationKeeper() {\\n        _validateRole(Role.LIQUIDATION_KEEPER, \\\"LIQUIDATION_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdlKeeper() {\\n        _validateRole(Role.ADL_KEEPER, \\\"ADL_KEEPER\\\");\\n        _;\\n    }\\n\\n    function _validateRole(bytes32 role, string memory roleName) internal view {\\n        if (!roleStore.hasRole(msg.sender, role)) {\\n            revert Unauthorized(msg.sender, roleName);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x43c3d9a96d9b64fdadbee4c90fb91dbfaa87989c820d46de88918dca24492fce\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../utils/EnumerableValues.sol\\\";\\nimport \\\"../gov/Governable.sol\\\";\\n\\ncontract RoleStore is Governable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    EnumerableSet.Bytes32Set internal roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\n    // checking if an account has a role is a frequently used function\\n    // roleCache helps to save gas by offering a more efficient lookup\\n    // vs calling roleMembers[key].contains(account)\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\n\\n    function grantRole(address account, bytes32 key) external onlyGov {\\n        roles.add(key);\\n        roleMembers[key].add(account);\\n        roleCache[account][key] = true;\\n    }\\n\\n    function revokeRole(address account, bytes32 key) external onlyGov {\\n        roleMembers[key].remove(account);\\n        roleCache[account][key] = false;\\n    }\\n\\n    function hasRole(address account, bytes32 key) external view returns (bool) {\\n        return roleCache[account][key];\\n    }\\n\\n    function getRoleCount() external view returns (uint256) {\\n        return roles.length();\\n    }\\n\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return roles.valuesAt(start, end);\\n    }\\n\\n    function getRoleMemberCount(bytes32 key) external view returns (uint256) {\\n        return roleMembers[key].length();\\n    }\\n\\n    function getRoleMembers(bytes32 key, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return roleMembers[key].valuesAt(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0x526d555fb85cb999a71fe99e60e6f9a8e9351a62cff4a2cf6e3a5f763178886d\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary EnumerableValues {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        bytes32[] memory items = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        address[] memory items = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        uint256[] memory items = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0x671d7dc4a6f0e901c78c267ca003c232aed0ab5a18d4ee57e7d355e81f2347f9\",\"license\":\"BUSL-1.1\"},\"contracts/wrap/IWNT.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWNT {\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x79ddfbf1c740b35d5d33c3330dc0c7c134dd70068f0b4fbfc558430816c790f8\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002208380380620022088339810160408190526200003491620000bb565b8080808062000043336200005a565b6001600160a01b031660805250620000ed92505050565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785910160405180910390a15050565b600060208284031215620000ce57600080fd5b81516001600160a01b0381168114620000e657600080fd5b9392505050565b6080516120f8620001106000396000818161018b0152610c9a01526120f86000f3fe6080604052600436106100c75760003560e01c806312d43a51146100d35780632874528e146101095780632d891fba1461012b578063352f9aed1461014b5780634a4a7b0414610179578063523fba7f146101ad5780636e343b2f146101da5780638d0a5fbb146102075780638eaa6ac01461021c5780639227bac4146102495780639c3f1e9014610269578063c5d9eb4814610299578063cfad57a2146102b9578063e04b68ad146102d9578063f5f3ac5d146102f9578063f94989381461031957600080fd5b366100ce57005b600080fd5b3480156100df57600080fd5b506000546100f3906001600160a01b031681565b60405161010091906115ff565b60405180910390f35b34801561011557600080fd5b50610129610124366004611633565b610339565b005b34801561013757600080fd5b50610129610146366004611663565b610470565b34801561015757600080fd5b5061016b6101663660046116a5565b61048d565b604051908152602001610100565b34801561018557600080fd5b506100f37f000000000000000000000000000000000000000000000000000000000000000081565b3480156101b957600080fd5b5061016b6101c83660046116a5565b60016020526000908152604090205481565b3480156101e657600080fd5b506101fa6101f53660046116c2565b6104b2565b60405161010091906116f7565b34801561021357600080fd5b5061016b6104e2565b34801561022857600080fd5b5061023c61023736600461173b565b6104f3565b60405161010091906118e2565b34801561025557600080fd5b506101fa61026436600461194e565b61074b565b34801561027557600080fd5b5061028961028436600461173b565b610762565b6040516101009493929190611970565b3480156102a557600080fd5b5061016b6102b43660046116a5565b610980565b3480156102c557600080fd5b506101296102d43660046116a5565b6109a1565b3480156102e557600080fd5b506101296102f4366004611c39565b6109fb565b34801561030557600080fd5b50610129610314366004611d83565b610be4565b34801561032557600080fd5b50610129610334366004611daf565b610c2c565b61038960405160200161034b90611e17565b604051602081830303815290604052805190602001206040518060400160405280600a81526020016921a7a72a2927a62622a960b11b815250610c83565b6000828152600260208190526040822080546001600160a01b0319908116825560018201805482169055918101805483169055600381018054831690556004810180549092169091559081816103e2600583018261146f565b5050600060068301819055600783018190556008830181905560098301819055600a8301819055600b8301819055600c8301819055600d8301819055600e8301805463ffffffff1916905561043b90600f84019061148d565b50506001600160a01b038116600090815260056020526040902061045f9083610d37565b5061046b600383610d37565b505050565b61048260405160200161034b90611e17565b61046b838383610d43565b60006104a160405160200161034b90611e17565b6104aa82610d88565b90505b919050565b6001600160a01b03831660009081526005602052604090206060906104d8908484610e39565b90505b9392505050565b60006104ee6003610ef9565b905090565b6104fb6114c7565b60008281526002602081815260409283902083516101408101855281546001600160a01b03908116608083019081526001840154821660a084015294830154811660c08301526003830154811660e08301526004830154166101008201526005820180548651818602810186019097528087529195929486949093869361012087019391928301828280156105b957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161059b575b50505050508152505081526020016006820160405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250508152602001600e82016040518060800160405290816000820160009054906101000a900460ff16600781111561065f5761065f611835565b600781111561067057610670611835565b8152905460ff6101008204811615156020808501919091526201000083048216151560408501526301000000909204161515606090920191909152908252600f8301805492909101916106c290611e3b565b80601f01602080910402602001604051908101604052809291908181526020018280546106ee90611e3b565b801561073b5780601f106107105761010080835404028352916020019161073b565b820191906000526020600020905b81548152906001019060200180831161071e57829003601f168201915b5050505050815250509050919050565b606061075960038484610e39565b90505b92915050565b600260208181526000928352604092839020835160c08101855281546001600160a01b039081168252600183015481168285015293820154841681860152600382015484166060820152600482015490931660808401526005810180548551818502810185019096528086529194859360a08601939192919083018282801561081457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116107f6575b505050919092525050604080516101008101825260068501548152600780860154602083015260088601548284015260098601546060830152600a860154608080840191909152600b87015460a0840152600c87015460c0840152600d87015460e08401528351908101909352600e860180549596929592945091839160ff909116908111156108a6576108a6611835565b60078111156108b7576108b7611835565b8152905460ff61010082048116151560208401526201000082048116151560408401526301000000909104161515606090910152600f820180549192916108fd90611e3b565b80601f016020809104026020016040519081016040528092919081815260200182805461092990611e3b565b80156109765780601f1061094b57610100808354040283529160200191610976565b820191906000526020600020905b81548152906001019060200180831161095957829003601f168201915b5050505050905084565b6001600160a01b03811660009081526005602052604081206104aa90610ef9565b6000546001600160a01b031633146109ef576040805163a35b150b60e01b81523360048201526024810191909152600360448201526223a7ab60e91b60648201526084015b60405180910390fd5b6109f881610f03565b50565b610a0d60405160200161034b90611e17565b6000828152600260208181526040928390208451805182546001600160a01b03199081166001600160a01b0392831617845582850151600185018054831691841691909117905595820151948301805487169582169590951790945560608101516003830180548716918616919091179055608081015160048301805490961694169390931790935560a08201518051859493928492610ab69260058501929190910190611585565b50505060208281015180516006840155908101516007808401919091556040808301516008850155606083015160098501556080830151600a85015560a0830151600b85015560c0830151600c85015560e090920151600d840155908301518051600e8401805492939092839160ff19909116906001908490811115610b3e57610b3e611835565b0217905550602082015181546040840151606094850151151563010000000263ff00000019911515620100000262ff000019941515610100029490941662ffff0019909316929092179290921791909116179055820151600f820190610ba49082611ec3565b50905050610bd88260056000610bb985515190565b6001600160a01b03168152602081019190915260400160002090610f64565b5061046b600383610f64565b610bf660405160200161034b90611e17565b6040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561046b573d6000803e3d6000fd5b610c3e60405160200161034b90611e17565b846001600160a01b0316846001600160a01b0316148015610c5c5750805b15610c7157610c6c848484610f70565b610c7c565b610c7c848484610d43565b5050505050565b60405163ac4ab3fb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ac4ab3fb90610cd19033908690600401611f82565b602060405180830381865afa158015610cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d129190611f9b565b610d3357338160405163a35b150b60e01b81526004016109e6929190611fb8565b5050565b60006107598383611032565b306001600160a01b03821603610d6b5760405162461bcd60e51b81526004016109e690611fdc565b610d7f6001600160a01b0384168284611125565b61046b8361117b565b6001600160a01b0381166000818152600160205260408082205490516370a0823160e01b8152919290918391906370a0823190610dc99030906004016115ff565b602060405180830381865afa158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a919061200c565b6001600160a01b03851660009081526001602052604090208190559050610e31828261203b565b949350505050565b60606000610e4685610ef9565b905080831115610e54578092505b6000610e60858561203b565b6001600160401b03811115610e7757610e776119b4565b604051908082528060200260200182016040528015610ea0578160200160208202803683370190505b509050845b84811015610eef57610eb78782611204565b82610ec2888461203b565b81518110610ed257610ed261204e565b602090810291909101015280610ee781612064565b915050610ea5565b5095945050505050565b60006104aa825490565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785910160405180910390a15050565b60006107598383611210565b306001600160a01b03821603610f985760405162461bcd60e51b81526004016109e690611fdc565b604051632e1a7d4d60e01b8152600481018390526001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b158015610fda57600080fd5b505af1158015610fee573d6000803e3d6000fd5b50506040516001600160a01b038416925084156108fc02915084906000818181858888f19350505050158015611028573d6000803e3d6000fd5b5061046b8361117b565b6000818152600183016020526040812054801561111b57600061105660018361203b565b855490915060009061106a9060019061203b565b90508181146110cf57600086600001828154811061108a5761108a61204e565b90600052602060002001549050808760000184815481106110ad576110ad61204e565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806110e0576110e061207d565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061075c565b600091505061075c565b61046b8363a9059cbb60e01b8484604051602401611144929190611f82565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261125f565b6040516370a0823160e01b81526001600160a01b038216906370a08231906111a79030906004016115ff565b602060405180830381865afa1580156111c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e8919061200c565b6001600160a01b03909116600090815260016020526040902055565b60006107598383611331565b60008181526001830160205260408120546112575750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561075c565b50600061075c565b60006112b4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661135b9092919063ffffffff16565b80519091501561046b57808060200190518101906112d29190611f9b565b61046b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016109e6565b60008260000182815481106113485761134861204e565b9060005260206000200154905092915050565b60606104d88484600085856001600160a01b0385163b6113bd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109e6565b600080866001600160a01b031685876040516113d99190612093565b60006040518083038185875af1925050503d8060008114611416576040519150601f19603f3d011682016040523d82523d6000602084013e61141b565b606091505b509150915061142b828286611436565b979650505050505050565b606083156114455750816104db565b8251156114555782518084602001fd5b8160405162461bcd60e51b81526004016109e691906120af565b50805460008255906000526020600020908101906109f891906115ea565b50805461149990611e3b565b6000825580601f106114a9575050565b601f0160209004906000526020600020908101906109f891906115ea565b60408051610140810190915260006080820181815260a0830182905260c0830182905260e0830182905261010083019190915260606101208301528190815260200161155160405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152604080516080810182526000808252602082810182905292820181905260608201529101908152602001606081525090565b8280548282559060005260206000209081019282156115da579160200282015b828111156115da57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906115a5565b506115e69291506115ea565b5090565b5b808211156115e657600081556001016115eb565b6001600160a01b0391909116815260200190565b6001600160a01b03811681146109f857600080fd5b80356104ad81611613565b6000806040838503121561164657600080fd5b82359150602083013561165881611613565b809150509250929050565b60008060006060848603121561167857600080fd5b833561168381611613565b925060208401359150604084013561169a81611613565b809150509250925092565b6000602082840312156116b757600080fd5b81356104db81611613565b6000806000606084860312156116d757600080fd5b83356116e281611613565b95602085013595506040909401359392505050565b6020808252825182820181905260009190848201906040850190845b8181101561172f57835183529284019291840191600101611713565b50909695505050505050565b60006020828403121561174d57600080fd5b5035919050565b600060c0830160018060a01b0380845116855260208181860151168187015281604086015116604087015281606086015116606087015281608086015116608087015260a085015160c060a088015283815180865260e0890191508383019550600092505b808310156117db578551851682529483019460019290920191908301906117b9565b50979650505050505050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b634e487b7160e01b600052602160045260246000fd5b80516008811061186b57634e487b7160e01b600052602160045260246000fd5b82526020818101511515908301526040808201511515908301526060908101511515910152565b60005b838110156118ad578181015183820152602001611895565b50506000910152565b600081518084526118ce816020860160208601611892565b601f01601f19169290920160200192915050565b60208152600082516101c08060208501526119016101e0850183611754565b9150602085015161191560408601826117e7565b50604085015161192961014086018261184b565b506060850151848303601f19018286015261194483826118b6565b9695505050505050565b6000806040838503121561196157600080fd5b50508035926020909101359150565b60006101c080835261198481840188611754565b905061199360208401876117e7565b6119a161012084018661184b565b8281036101a084015261142b81856118b6565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156119ec576119ec6119b4565b60405290565b60405160c081016001600160401b03811182821017156119ec576119ec6119b4565b604051601f8201601f191681016001600160401b0381118282101715611a3c57611a3c6119b4565b604052919050565b600082601f830112611a5557600080fd5b813560206001600160401b03821115611a7057611a706119b4565b8160051b611a7f828201611a14565b9283528481018201928281019087851115611a9957600080fd5b83870192505b8483101561142b578235611ab281611613565b82529183019190830190611a9f565b6000610100808385031215611ad557600080fd5b604051908101906001600160401b0382118183101715611af757611af76119b4565b81604052809250833581526020840135602082015260408401356040820152606084013560608201526080840135608082015260a084013560a082015260c084013560c082015260e084013560e0820152505092915050565b80151581146109f857600080fd5b600060808284031215611b7057600080fd5b611b786119ca565b9050813560088110611b8957600080fd5b81526020820135611b9981611b50565b60208201526040820135611bac81611b50565b60408201526060820135611bbf81611b50565b606082015292915050565b600082601f830112611bdb57600080fd5b81356001600160401b03811115611bf457611bf46119b4565b611c07601f8201601f1916602001611a14565b818152846020838601011115611c1c57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215611c4c57600080fd5b8235915060208301356001600160401b0380821115611c6a57600080fd5b908401906101c08287031215611c7f57600080fd5b611c876119ca565b823582811115611c9657600080fd5b830160c08189031215611ca857600080fd5b611cb06119f2565b8135611cbb81611613565b81526020820135611ccb81611613565b60208201526040820135611cde81611613565b6040820152611cef60608301611628565b6060820152611d0060808301611628565b608082015260a082013584811115611d1757600080fd5b611d238a828501611a44565b60a083015250825250611d398760208501611ac1565b6020820152611d4c876101208501611b5e565b60408201526101a083013582811115611d6457600080fd5b611d7088828601611bca565b6060830152508093505050509250929050565b60008060408385031215611d9657600080fd5b8235611da181611613565b946020939093013593505050565b600080600080600060a08688031215611dc757600080fd5b8535611dd281611613565b94506020860135611de281611613565b9350604086013592506060860135611df981611613565b91506080860135611e0981611b50565b809150509295509295909350565b6020808252600a908201526921a7a72a2927a62622a960b11b604082015260600190565b600181811c90821680611e4f57607f821691505b602082108103611e6f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561046b57600081815260208120601f850160051c81016020861015611e9c5750805b601f850160051c820191505b81811015611ebb57828155600101611ea8565b505050505050565b81516001600160401b03811115611edc57611edc6119b4565b611ef081611eea8454611e3b565b84611e75565b602080601f831160018114611f255760008415611f0d5750858301515b600019600386901b1c1916600185901b178555611ebb565b600085815260208120601f198616915b82811015611f5457888601518255948401946001909101908401611f35565b5085821015611f725787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03929092168252602082015260400190565b600060208284031215611fad57600080fd5b81516104db81611b50565b6001600160a01b03831681526040602082018190526000906104d8908301846118b6565b6020808252601690820152752130b7359d1034b73b30b634b2103932b1b2b4bb32b960511b604082015260600190565b60006020828403121561201e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561075c5761075c612025565b634e487b7160e01b600052603260045260246000fd5b60006001820161207657612076612025565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600082516120a5818460208701611892565b9190910192915050565b60208152600061075960208301846118b656fea2646970667358221220d48cc03ff318954a087b61bf930d69897c69de7c71a174dbef9736cd9248f81164736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106100c75760003560e01c806312d43a51146100d35780632874528e146101095780632d891fba1461012b578063352f9aed1461014b5780634a4a7b0414610179578063523fba7f146101ad5780636e343b2f146101da5780638d0a5fbb146102075780638eaa6ac01461021c5780639227bac4146102495780639c3f1e9014610269578063c5d9eb4814610299578063cfad57a2146102b9578063e04b68ad146102d9578063f5f3ac5d146102f9578063f94989381461031957600080fd5b366100ce57005b600080fd5b3480156100df57600080fd5b506000546100f3906001600160a01b031681565b60405161010091906115ff565b60405180910390f35b34801561011557600080fd5b50610129610124366004611633565b610339565b005b34801561013757600080fd5b50610129610146366004611663565b610470565b34801561015757600080fd5b5061016b6101663660046116a5565b61048d565b604051908152602001610100565b34801561018557600080fd5b506100f37f000000000000000000000000000000000000000000000000000000000000000081565b3480156101b957600080fd5b5061016b6101c83660046116a5565b60016020526000908152604090205481565b3480156101e657600080fd5b506101fa6101f53660046116c2565b6104b2565b60405161010091906116f7565b34801561021357600080fd5b5061016b6104e2565b34801561022857600080fd5b5061023c61023736600461173b565b6104f3565b60405161010091906118e2565b34801561025557600080fd5b506101fa61026436600461194e565b61074b565b34801561027557600080fd5b5061028961028436600461173b565b610762565b6040516101009493929190611970565b3480156102a557600080fd5b5061016b6102b43660046116a5565b610980565b3480156102c557600080fd5b506101296102d43660046116a5565b6109a1565b3480156102e557600080fd5b506101296102f4366004611c39565b6109fb565b34801561030557600080fd5b50610129610314366004611d83565b610be4565b34801561032557600080fd5b50610129610334366004611daf565b610c2c565b61038960405160200161034b90611e17565b604051602081830303815290604052805190602001206040518060400160405280600a81526020016921a7a72a2927a62622a960b11b815250610c83565b6000828152600260208190526040822080546001600160a01b0319908116825560018201805482169055918101805483169055600381018054831690556004810180549092169091559081816103e2600583018261146f565b5050600060068301819055600783018190556008830181905560098301819055600a8301819055600b8301819055600c8301819055600d8301819055600e8301805463ffffffff1916905561043b90600f84019061148d565b50506001600160a01b038116600090815260056020526040902061045f9083610d37565b5061046b600383610d37565b505050565b61048260405160200161034b90611e17565b61046b838383610d43565b60006104a160405160200161034b90611e17565b6104aa82610d88565b90505b919050565b6001600160a01b03831660009081526005602052604090206060906104d8908484610e39565b90505b9392505050565b60006104ee6003610ef9565b905090565b6104fb6114c7565b60008281526002602081815260409283902083516101408101855281546001600160a01b03908116608083019081526001840154821660a084015294830154811660c08301526003830154811660e08301526004830154166101008201526005820180548651818602810186019097528087529195929486949093869361012087019391928301828280156105b957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161059b575b50505050508152505081526020016006820160405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250508152602001600e82016040518060800160405290816000820160009054906101000a900460ff16600781111561065f5761065f611835565b600781111561067057610670611835565b8152905460ff6101008204811615156020808501919091526201000083048216151560408501526301000000909204161515606090920191909152908252600f8301805492909101916106c290611e3b565b80601f01602080910402602001604051908101604052809291908181526020018280546106ee90611e3b565b801561073b5780601f106107105761010080835404028352916020019161073b565b820191906000526020600020905b81548152906001019060200180831161071e57829003601f168201915b5050505050815250509050919050565b606061075960038484610e39565b90505b92915050565b600260208181526000928352604092839020835160c08101855281546001600160a01b039081168252600183015481168285015293820154841681860152600382015484166060820152600482015490931660808401526005810180548551818502810185019096528086529194859360a08601939192919083018282801561081457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116107f6575b505050919092525050604080516101008101825260068501548152600780860154602083015260088601548284015260098601546060830152600a860154608080840191909152600b87015460a0840152600c87015460c0840152600d87015460e08401528351908101909352600e860180549596929592945091839160ff909116908111156108a6576108a6611835565b60078111156108b7576108b7611835565b8152905460ff61010082048116151560208401526201000082048116151560408401526301000000909104161515606090910152600f820180549192916108fd90611e3b565b80601f016020809104026020016040519081016040528092919081815260200182805461092990611e3b565b80156109765780601f1061094b57610100808354040283529160200191610976565b820191906000526020600020905b81548152906001019060200180831161095957829003601f168201915b5050505050905084565b6001600160a01b03811660009081526005602052604081206104aa90610ef9565b6000546001600160a01b031633146109ef576040805163a35b150b60e01b81523360048201526024810191909152600360448201526223a7ab60e91b60648201526084015b60405180910390fd5b6109f881610f03565b50565b610a0d60405160200161034b90611e17565b6000828152600260208181526040928390208451805182546001600160a01b03199081166001600160a01b0392831617845582850151600185018054831691841691909117905595820151948301805487169582169590951790945560608101516003830180548716918616919091179055608081015160048301805490961694169390931790935560a08201518051859493928492610ab69260058501929190910190611585565b50505060208281015180516006840155908101516007808401919091556040808301516008850155606083015160098501556080830151600a85015560a0830151600b85015560c0830151600c85015560e090920151600d840155908301518051600e8401805492939092839160ff19909116906001908490811115610b3e57610b3e611835565b0217905550602082015181546040840151606094850151151563010000000263ff00000019911515620100000262ff000019941515610100029490941662ffff0019909316929092179290921791909116179055820151600f820190610ba49082611ec3565b50905050610bd88260056000610bb985515190565b6001600160a01b03168152602081019190915260400160002090610f64565b5061046b600383610f64565b610bf660405160200161034b90611e17565b6040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561046b573d6000803e3d6000fd5b610c3e60405160200161034b90611e17565b846001600160a01b0316846001600160a01b0316148015610c5c5750805b15610c7157610c6c848484610f70565b610c7c565b610c7c848484610d43565b5050505050565b60405163ac4ab3fb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ac4ab3fb90610cd19033908690600401611f82565b602060405180830381865afa158015610cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d129190611f9b565b610d3357338160405163a35b150b60e01b81526004016109e6929190611fb8565b5050565b60006107598383611032565b306001600160a01b03821603610d6b5760405162461bcd60e51b81526004016109e690611fdc565b610d7f6001600160a01b0384168284611125565b61046b8361117b565b6001600160a01b0381166000818152600160205260408082205490516370a0823160e01b8152919290918391906370a0823190610dc99030906004016115ff565b602060405180830381865afa158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a919061200c565b6001600160a01b03851660009081526001602052604090208190559050610e31828261203b565b949350505050565b60606000610e4685610ef9565b905080831115610e54578092505b6000610e60858561203b565b6001600160401b03811115610e7757610e776119b4565b604051908082528060200260200182016040528015610ea0578160200160208202803683370190505b509050845b84811015610eef57610eb78782611204565b82610ec2888461203b565b81518110610ed257610ed261204e565b602090810291909101015280610ee781612064565b915050610ea5565b5095945050505050565b60006104aa825490565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785910160405180910390a15050565b60006107598383611210565b306001600160a01b03821603610f985760405162461bcd60e51b81526004016109e690611fdc565b604051632e1a7d4d60e01b8152600481018390526001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b158015610fda57600080fd5b505af1158015610fee573d6000803e3d6000fd5b50506040516001600160a01b038416925084156108fc02915084906000818181858888f19350505050158015611028573d6000803e3d6000fd5b5061046b8361117b565b6000818152600183016020526040812054801561111b57600061105660018361203b565b855490915060009061106a9060019061203b565b90508181146110cf57600086600001828154811061108a5761108a61204e565b90600052602060002001549050808760000184815481106110ad576110ad61204e565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806110e0576110e061207d565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061075c565b600091505061075c565b61046b8363a9059cbb60e01b8484604051602401611144929190611f82565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261125f565b6040516370a0823160e01b81526001600160a01b038216906370a08231906111a79030906004016115ff565b602060405180830381865afa1580156111c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e8919061200c565b6001600160a01b03909116600090815260016020526040902055565b60006107598383611331565b60008181526001830160205260408120546112575750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561075c565b50600061075c565b60006112b4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661135b9092919063ffffffff16565b80519091501561046b57808060200190518101906112d29190611f9b565b61046b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016109e6565b60008260000182815481106113485761134861204e565b9060005260206000200154905092915050565b60606104d88484600085856001600160a01b0385163b6113bd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109e6565b600080866001600160a01b031685876040516113d99190612093565b60006040518083038185875af1925050503d8060008114611416576040519150601f19603f3d011682016040523d82523d6000602084013e61141b565b606091505b509150915061142b828286611436565b979650505050505050565b606083156114455750816104db565b8251156114555782518084602001fd5b8160405162461bcd60e51b81526004016109e691906120af565b50805460008255906000526020600020908101906109f891906115ea565b50805461149990611e3b565b6000825580601f106114a9575050565b601f0160209004906000526020600020908101906109f891906115ea565b60408051610140810190915260006080820181815260a0830182905260c0830182905260e0830182905261010083019190915260606101208301528190815260200161155160405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152604080516080810182526000808252602082810182905292820181905260608201529101908152602001606081525090565b8280548282559060005260206000209081019282156115da579160200282015b828111156115da57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906115a5565b506115e69291506115ea565b5090565b5b808211156115e657600081556001016115eb565b6001600160a01b0391909116815260200190565b6001600160a01b03811681146109f857600080fd5b80356104ad81611613565b6000806040838503121561164657600080fd5b82359150602083013561165881611613565b809150509250929050565b60008060006060848603121561167857600080fd5b833561168381611613565b925060208401359150604084013561169a81611613565b809150509250925092565b6000602082840312156116b757600080fd5b81356104db81611613565b6000806000606084860312156116d757600080fd5b83356116e281611613565b95602085013595506040909401359392505050565b6020808252825182820181905260009190848201906040850190845b8181101561172f57835183529284019291840191600101611713565b50909695505050505050565b60006020828403121561174d57600080fd5b5035919050565b600060c0830160018060a01b0380845116855260208181860151168187015281604086015116604087015281606086015116606087015281608086015116608087015260a085015160c060a088015283815180865260e0890191508383019550600092505b808310156117db578551851682529483019460019290920191908301906117b9565b50979650505050505050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b634e487b7160e01b600052602160045260246000fd5b80516008811061186b57634e487b7160e01b600052602160045260246000fd5b82526020818101511515908301526040808201511515908301526060908101511515910152565b60005b838110156118ad578181015183820152602001611895565b50506000910152565b600081518084526118ce816020860160208601611892565b601f01601f19169290920160200192915050565b60208152600082516101c08060208501526119016101e0850183611754565b9150602085015161191560408601826117e7565b50604085015161192961014086018261184b565b506060850151848303601f19018286015261194483826118b6565b9695505050505050565b6000806040838503121561196157600080fd5b50508035926020909101359150565b60006101c080835261198481840188611754565b905061199360208401876117e7565b6119a161012084018661184b565b8281036101a084015261142b81856118b6565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156119ec576119ec6119b4565b60405290565b60405160c081016001600160401b03811182821017156119ec576119ec6119b4565b604051601f8201601f191681016001600160401b0381118282101715611a3c57611a3c6119b4565b604052919050565b600082601f830112611a5557600080fd5b813560206001600160401b03821115611a7057611a706119b4565b8160051b611a7f828201611a14565b9283528481018201928281019087851115611a9957600080fd5b83870192505b8483101561142b578235611ab281611613565b82529183019190830190611a9f565b6000610100808385031215611ad557600080fd5b604051908101906001600160401b0382118183101715611af757611af76119b4565b81604052809250833581526020840135602082015260408401356040820152606084013560608201526080840135608082015260a084013560a082015260c084013560c082015260e084013560e0820152505092915050565b80151581146109f857600080fd5b600060808284031215611b7057600080fd5b611b786119ca565b9050813560088110611b8957600080fd5b81526020820135611b9981611b50565b60208201526040820135611bac81611b50565b60408201526060820135611bbf81611b50565b606082015292915050565b600082601f830112611bdb57600080fd5b81356001600160401b03811115611bf457611bf46119b4565b611c07601f8201601f1916602001611a14565b818152846020838601011115611c1c57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215611c4c57600080fd5b8235915060208301356001600160401b0380821115611c6a57600080fd5b908401906101c08287031215611c7f57600080fd5b611c876119ca565b823582811115611c9657600080fd5b830160c08189031215611ca857600080fd5b611cb06119f2565b8135611cbb81611613565b81526020820135611ccb81611613565b60208201526040820135611cde81611613565b6040820152611cef60608301611628565b6060820152611d0060808301611628565b608082015260a082013584811115611d1757600080fd5b611d238a828501611a44565b60a083015250825250611d398760208501611ac1565b6020820152611d4c876101208501611b5e565b60408201526101a083013582811115611d6457600080fd5b611d7088828601611bca565b6060830152508093505050509250929050565b60008060408385031215611d9657600080fd5b8235611da181611613565b946020939093013593505050565b600080600080600060a08688031215611dc757600080fd5b8535611dd281611613565b94506020860135611de281611613565b9350604086013592506060860135611df981611613565b91506080860135611e0981611b50565b809150509295509295909350565b6020808252600a908201526921a7a72a2927a62622a960b11b604082015260600190565b600181811c90821680611e4f57607f821691505b602082108103611e6f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561046b57600081815260208120601f850160051c81016020861015611e9c5750805b601f850160051c820191505b81811015611ebb57828155600101611ea8565b505050505050565b81516001600160401b03811115611edc57611edc6119b4565b611ef081611eea8454611e3b565b84611e75565b602080601f831160018114611f255760008415611f0d5750858301515b600019600386901b1c1916600185901b178555611ebb565b600085815260208120601f198616915b82811015611f5457888601518255948401946001909101908401611f35565b5085821015611f725787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03929092168252602082015260400190565b600060208284031215611fad57600080fd5b81516104db81611b50565b6001600160a01b03831681526040602082018190526000906104d8908301846118b6565b6020808252601690820152752130b7359d1034b73b30b634b2103932b1b2b4bb32b960511b604082015260600190565b60006020828403121561201e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561075c5761075c612025565b634e487b7160e01b600052603260045260246000fd5b60006001820161207657612076612025565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600082516120a5818460208701611892565b9190910192915050565b60208152600061075960208301846118b656fea2646970667358221220d48cc03ff318954a087b61bf930d69897c69de7c71a174dbef9736cd9248f81164736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12130,
        "contract": "contracts/order/OrderStore.sol:OrderStore",
        "label": "gov",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5254,
        "contract": "contracts/order/OrderStore.sol:OrderStore",
        "label": "tokenBalances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20060,
        "contract": "contracts/order/OrderStore.sol:OrderStore",
        "label": "orders",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Props)18851_storage)"
      },
      {
        "astId": 20063,
        "contract": "contracts/order/OrderStore.sol:OrderStore",
        "label": "orderKeys",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Bytes32Set)4192_storage"
      },
      {
        "astId": 20068,
        "contract": "contracts/order/OrderStore.sol:OrderStore",
        "label": "accountOrderKeys",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)4192_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(OrderType)18798": {
        "encoding": "inplace",
        "label": "enum Order.OrderType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)4192_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)4192_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Props)18851_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Order.Props)",
        "numberOfBytes": "32",
        "value": "t_struct(Props)18851_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Addresses)18812_storage": {
        "encoding": "inplace",
        "label": "struct Order.Addresses",
        "members": [
          {
            "astId": 18800,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 18802,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 18804,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "callbackContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 18806,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "market",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 18808,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "initialCollateralToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 18811,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "swapPath",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Bytes32Set)4192_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 4191,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3998_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Flags)18839_storage": {
        "encoding": "inplace",
        "label": "struct Order.Flags",
        "members": [
          {
            "astId": 18832,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "orderType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(OrderType)18798"
          },
          {
            "astId": 18834,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "isLong",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 18836,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "shouldUnwrapNativeToken",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 18838,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "isFrozen",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Numbers)18829_storage": {
        "encoding": "inplace",
        "label": "struct Order.Numbers",
        "members": [
          {
            "astId": 18814,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "sizeDeltaUsd",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18816,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "initialCollateralDeltaAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18818,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "triggerPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18820,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "acceptablePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18822,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "executionFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 18824,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "callbackGasLimit",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 18826,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "minOutputAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 18828,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "updatedAtBlock",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Props)18851_storage": {
        "encoding": "inplace",
        "label": "struct Order.Props",
        "members": [
          {
            "astId": 18842,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "addresses",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Addresses)18812_storage"
          },
          {
            "astId": 18845,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "numbers",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(Numbers)18829_storage"
          },
          {
            "astId": 18848,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "flags",
            "offset": 0,
            "slot": "14",
            "type": "t_struct(Flags)18839_storage"
          },
          {
            "astId": 18850,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "data",
            "offset": 0,
            "slot": "15",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(Set)3998_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3993,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3997,
            "contract": "contracts/order/OrderStore.sol:OrderStore",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}