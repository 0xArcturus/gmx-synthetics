{
  "address": "0x3eF9e4C9b5E6ebEB797CDec32f437938b5D6abF7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract RoleStore",
          "name": "_roleStore",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevGov",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextGov",
          "type": "address"
        }
      ],
      "name": "SetGov",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "contains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "sizeInUsd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sizeInTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowingFactor",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "longTokenFundingAmountPerSize",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "shortTokenFundingAmountPerSize",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "increasedAtBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decreasedAtBlock",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Position.Props",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountPositionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getAccountPositionKeys",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPositionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getPositionKeys",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleStore",
      "outputs": [
        {
          "internalType": "contract RoleStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "sizeInUsd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sizeInTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowingFactor",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "longTokenFundingAmountPerSize",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "shortTokenFundingAmountPerSize",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "increasedAtBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decreasedAtBlock",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Position.Props",
          "name": "position",
          "type": "tuple"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9510b220aa6a4f25b3dc00f45ec8908cdf98485e495a892308b99afdb05a7413",
  "receipt": {
    "to": null,
    "from": "0xFb11f15f206bdA02c224EDC744b0E50E46137046",
    "contractAddress": "0x3eF9e4C9b5E6ebEB797CDec32f437938b5D6abF7",
    "transactionIndex": 1,
    "gasUsed": "1026910",
    "logsBloom": "0x
    "blockHash": "0xef63b903bbf6759ac222339fb90eefbe7bb98b7cd9778a3376a00a92ba0ef71b",
    "transactionHash": "0x9510b220aa6a4f25b3dc00f45ec8908cdf98485e495a892308b99afdb05a7413",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 16188787,
        "transactionHash": "0x9510b220aa6a4f25b3dc00f45ec8908cdf98485e495a892308b99afdb05a7413",
        "address": "0x3eF9e4C9b5E6ebEB797CDec32f437938b5D6abF7",
        "topics": [
          "0x53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb11f15f206bda02c224edc744b0e50e46137046",
        "logIndex": 0,
        "blockHash": "0xef63b903bbf6759ac222339fb90eefbe7bb98b7cd9778a3376a00a92ba0ef71b"
      }
    ],
    "blockNumber": 16188787,
    "cumulativeGasUsed": "1047910",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFc371E380262536c819D12B9569106bf032cC41c"
  ],
  "numDeployments": 1,
  "solcInputHash": "635dda53de9b7a48407bbc874989be1e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract RoleStore\",\"name\":\"_roleStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextGov\",\"type\":\"address\"}],\"name\":\"SetGov\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sizeInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeInTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowingFactor\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"longTokenFundingAmountPerSize\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"shortTokenFundingAmountPerSize\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"increasedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreasedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Position.Props\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountPositionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getAccountPositionKeys\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPositionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getPositionKeys\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleStore\",\"outputs\":[{\"internalType\":\"contract RoleStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sizeInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeInTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowingFactor\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"longTokenFundingAmountPerSize\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"shortTokenFundingAmountPerSize\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"increasedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreasedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Position.Props\",\"name\":\"position\",\"type\":\"tuple\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/position/PositionStore.sol\":\"PositionStore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/gov/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    event SetGov(address prevGov, address nextGov);\\n\\n    error Unauthorized(address msgSender, string role);\\n\\n    constructor() {\\n        _setGov(msg.sender);\\n    }\\n\\n    modifier onlyGov() {\\n        if (msg.sender != gov) {\\n            revert Unauthorized(msg.sender, \\\"GOV\\\");\\n        }\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        _setGov(_gov);\\n    }\\n\\n    function _setGov(address _gov) internal {\\n        address prevGov = gov;\\n        gov = _gov;\\n\\n        emit SetGov(prevGov, _gov);\\n    }\\n}\\n\",\"keccak256\":\"0x2fc683a981692f88346e2e0c936bd52a0304a62ee73524c93baf19a68c99087a\",\"license\":\"BUSL-1.1\"},\"contracts/position/Position.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// borrowing fees for position require only a borrowingFactor to track\\n// an example on how this works is if the global cumulativeBorrowingFactor is 10020%\\n// a position would be opened with borrowingFactor as 10020%\\n// after some time, if the cumulativeBorrowingFactor is updated to 10025% the position would\\n// owe 5% of the position size as borrowing fees\\n// the total pending borrowing fees of all positions is factored into the calculation of the pool value for LPs\\n// when a position is increased or decreased, the pending borrowing fees for the position is deducted from the position's\\n// collateral and transferred into the LP pool\\n//\\n// the same borrowing fee factor tracking cannot be applied for funding fees as those calculations consider pending funding fees\\n// based on the fiat value of the position sizes\\n//\\n// for example, if the price of the longToken is $2000 and a long position owes $200 in funding fees, the opposing short position\\n// claims the funding fees of 0.1 longToken ($200), if the price of the longToken changes to $4000 later, the long position would\\n// only owe 0.05 longToken ($200)\\n// this would result in differences between the amounts deducted and amounts paid out, for this reason, the actual token amounts\\n// to be deducted and to be paid out need to be tracked instead\\n//\\n// for funding fees, there are four values to consider:\\n// 1. long positions with market.longToken as collateral\\n// 2. long positions with market.shortToken as collateral\\n// 3. short positions with market.longToken as collateral\\n// 4. short positions with market.shortToken as collateral\\nlibrary Position {\\n    struct Props {\\n        address account;\\n        address market;\\n        address collateralToken;\\n        bool isLong;\\n        uint256 sizeInUsd;\\n        uint256 sizeInTokens;\\n        uint256 collateralAmount;\\n        uint256 borrowingFactor;\\n        int256 longTokenFundingAmountPerSize;\\n        int256 shortTokenFundingAmountPerSize;\\n        uint256 increasedAtBlock;\\n        uint256 decreasedAtBlock;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x1cfe3aa9083c31882131bb0f4f407cc39425706492d063216f95dec069a57117\",\"license\":\"BUSL-1.1\"},\"contracts/position/PositionStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Position.sol\\\";\\nimport \\\"../role/RoleModule.sol\\\";\\n\\ncontract PositionStore is RoleModule {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    mapping(bytes32 => Position.Props) internal positions;\\n    EnumerableSet.Bytes32Set internal positionKeys;\\n    mapping(address => EnumerableSet.Bytes32Set) internal accountPositionKeys;\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    function set(bytes32 key, address account, Position.Props memory position) external onlyController {\\n        positions[key] = position;\\n        accountPositionKeys[account].add(key);\\n        positionKeys.add(key);\\n    }\\n\\n    function remove(bytes32 key, address account) external onlyController {\\n        delete positions[key];\\n        accountPositionKeys[account].remove(key);\\n        positionKeys.remove(key);\\n    }\\n\\n    function get(bytes32 key) external view returns (Position.Props memory) {\\n        return positions[key];\\n    }\\n\\n    function getPositionCount() external view returns (uint256) {\\n        return positionKeys.length();\\n    }\\n\\n    function getPositionKeys(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return positionKeys.valuesAt(start, end);\\n    }\\n\\n    function getAccountPositionCount(address account) external view returns (uint256) {\\n        return accountPositionKeys[account].length();\\n    }\\n\\n    function getAccountPositionKeys(address account, uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return accountPositionKeys[account].valuesAt(start, end);\\n    }\\n\\n    function contains(bytes32 key) public view returns (bool) {\\n        return positionKeys.contains(key);\\n    }\\n}\\n\",\"keccak256\":\"0xcce696aa2ef4d929f267a5dad4482807ee9532f7e1c09853b1f3e2c204a2ba6f\",\"license\":\"BUSL-1.1\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Role {\\n    bytes32 public constant CONTROLLER = keccak256(abi.encode(\\\"CONTROLLER\\\"));\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(abi.encode(\\\"ROUTER_PLUGIN\\\"));\\n    bytes32 public constant MARKET_KEEPER = keccak256(abi.encode(\\\"MARKET_KEEPER\\\"));\\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\\\"ORDER_KEEPER\\\"));\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(abi.encode(\\\"FROZEN_ORDER_KEEPER\\\"));\\n    bytes32 public constant PRICING_KEEPER = keccak256(abi.encode(\\\"PRICING_KEEPER\\\"));\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(abi.encode(\\\"LIQUIDATION_KEEPER\\\"));\\n    bytes32 public constant ADL_KEEPER = keccak256(abi.encode(\\\"ADL_KEEPER\\\"));\\n}\\n\",\"keccak256\":\"0xc82091b16cfe58a1ad8b8bf8d6bf6182fadde81be44bac55435127e1b4113c85\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleStore.sol\\\";\\nimport \\\"./Role.sol\\\";\\nimport \\\"../gov/Governable.sol\\\";\\n\\ncontract RoleModule is Governable {\\n    RoleStore public immutable roleStore;\\n\\n    constructor(RoleStore _roleStore) {\\n        roleStore = _roleStore;\\n    }\\n\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) {\\n            revert Unauthorized(msg.sender, \\\"SELF\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        _validateRole(Role.CONTROLLER, \\\"CONTROLLER\\\");\\n        _;\\n    }\\n\\n    modifier onlyRouterPlugin() {\\n        _validateRole(Role.ROUTER_PLUGIN, \\\"ROUTER_PLUGIN\\\");\\n        _;\\n    }\\n\\n    modifier onlyMarketKeeper() {\\n        _validateRole(Role.MARKET_KEEPER, \\\"MARKET_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyOrderKeeper() {\\n        _validateRole(Role.ORDER_KEEPER, \\\"ORDER_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyPricingKeeper() {\\n        _validateRole(Role.PRICING_KEEPER, \\\"PRICING_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyLiquidationKeeper() {\\n        _validateRole(Role.LIQUIDATION_KEEPER, \\\"LIQUIDATION_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdlKeeper() {\\n        _validateRole(Role.ADL_KEEPER, \\\"ADL_KEEPER\\\");\\n        _;\\n    }\\n\\n    function _validateRole(bytes32 role, string memory roleName) internal view {\\n        if (!roleStore.hasRole(msg.sender, role)) {\\n            revert Unauthorized(msg.sender, roleName);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x43c3d9a96d9b64fdadbee4c90fb91dbfaa87989c820d46de88918dca24492fce\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../utils/EnumerableValues.sol\\\";\\nimport \\\"../gov/Governable.sol\\\";\\n\\ncontract RoleStore is Governable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    EnumerableSet.Bytes32Set internal roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\n    // checking if an account has a role is a frequently used function\\n    // roleCache helps to save gas by offering a more efficient lookup\\n    // vs calling roleMembers[key].contains(account)\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\n\\n    function grantRole(address account, bytes32 key) external onlyGov {\\n        roles.add(key);\\n        roleMembers[key].add(account);\\n        roleCache[account][key] = true;\\n    }\\n\\n    function revokeRole(address account, bytes32 key) external onlyGov {\\n        roleMembers[key].remove(account);\\n        roleCache[account][key] = false;\\n    }\\n\\n    function hasRole(address account, bytes32 key) external view returns (bool) {\\n        return roleCache[account][key];\\n    }\\n\\n    function getRoleCount() external view returns (uint256) {\\n        return roles.length();\\n    }\\n\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return roles.valuesAt(start, end);\\n    }\\n\\n    function getRoleMemberCount(bytes32 key) external view returns (uint256) {\\n        return roleMembers[key].length();\\n    }\\n\\n    function getRoleMembers(bytes32 key, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return roleMembers[key].valuesAt(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0x526d555fb85cb999a71fe99e60e6f9a8e9351a62cff4a2cf6e3a5f763178886d\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary EnumerableValues {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        bytes32[] memory items = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        address[] memory items = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        uint256[] memory items = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0x671d7dc4a6f0e901c78c267ca003c232aed0ab5a18d4ee57e7d355e81f2347f9\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161122038038061122083398101604081905261002f916100ac565b806100393361004b565b6001600160a01b0316608052506100dc565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785910160405180910390a15050565b6000602082840312156100be57600080fd5b81516001600160a01b03811681146100d557600080fd5b9392505050565b6080516111226100fe6000396000818161010b01526106e401526111226000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c806312d43a511461009e5780631d1a696d146100ce5780632874528e146100f15780634a4a7b04146101065780637f497d971461012d578063816834761461014d5780638c5ea9b8146101635780638eaa6ac014610176578063c63582cc14610196578063cfad57a2146101a9578063e5276445146101bc575b600080fd5b6000546100b1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e16100dc366004610aa5565b6101cf565b60405190151581526020016100c5565b6101046100ff366004610ada565b6101e2565b005b6100b17f000000000000000000000000000000000000000000000000000000000000000081565b61014061013b366004610b06565b6102ea565b6040516100c59190610b28565b6101556102ff565b6040519081526020016100c5565b610140610171366004610b6c565b610310565b610189610184366004610aa5565b61033e565b6040516100c59190610be5565b6101046101a4366004610d90565b610514565b6101046101b7366004610eb7565b610641565b6101556101ca366004610eb7565b61069b565b60006101dc6002836106bc565b92915050565b6102326040516020016101f490610ed2565b604051602081830303815290604052805190602001206040518060400160405280600a81526020016921a7a72a2927a62622a960b11b8152506106c8565b6000828152600160208190526040822080546001600160a01b0319908116825591810180549092169091556002810180546001600160a81b031916905560038101829055600481018290556005810182905560068101829055600781018290556008810182905560098101829055600a8101829055906102b5600b830182610a4a565b50506001600160a01b03811660009081526004602052604090206102d9908361077c565b506102e560028361077c565b505050565b60606102f860028484610788565b9392505050565b600061030b6002610848565b905090565b6001600160a01b0383166000908152600460205260409020606090610336908484610788565b949350505050565b6103c6604051806101a0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b60008281526001602081815260409283902083516101a08101855281546001600160a01b03908116825293820154841692810192909252600281015492831693820193909352600160a01b90910460ff161515606082015260038201546080820152600482015460a0820152600582015460c0820152600682015460e0820152600782015461010082015260088201546101208201526009820154610140820152600a820154610160820152600b820180549192916101808401919061048b90610ef6565b80601f01602080910402602001604051908101604052809291908181526020018280546104b790610ef6565b80156105045780601f106104d957610100808354040283529160200191610504565b820191906000526020600020905b8154815290600101906020018083116104e757829003601f168201915b5050505050815250509050919050565b6105266040516020016101f490610ed2565b600083815260016020818152604092839020845181546001600160a01b039182166001600160a01b031991821617835592860151938201805494821694909316939093179091559183015160028301805460608601511515600160a01b026001600160a81b031990911692909316919091179190911790556080820151600382015560a0820151600482015560c0820151600582015560e08201516006820155610100820151600782015561012082015160088201556101408201516009820155610160820151600a820155610180820151829190600b82019061060a9082610f7e565b5050506001600160a01b038216600090815260046020526040902061062f9084610852565b5061063b600284610852565b50505050565b6000546001600160a01b0316331461068f576040805163a35b150b60e01b81523360048201526024810191909152600360448201526223a7ab60e91b60648201526084015b60405180910390fd5b6106988161085e565b50565b6001600160a01b03811660009081526004602052604081206101dc90610848565b60006102f883836108bf565b60405163ac4ab3fb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ac4ab3fb90604401602060405180830381865afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610757919061103d565b61077857338160405163a35b150b60e01b815260040161068692919061105a565b5050565b60006102f883836108d7565b6060600061079585610848565b9050808311156107a3578092505b60006107af8585611094565b6001600160401b038111156107c6576107c6610cac565b6040519080825280602002602001820160405280156107ef578160200160208202803683370190505b509050845b8481101561083e5761080687826109ca565b826108118884611094565b81518110610821576108216110a7565b602090810291909101015280610836816110bd565b9150506107f4565b5095945050505050565b60006101dc825490565b60006102f883836109d6565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785910160405180910390a15050565b60009081526001919091016020526040902054151590565b600081815260018301602052604081205480156109c05760006108fb600183611094565b855490915060009061090f90600190611094565b905081811461097457600086600001828154811061092f5761092f6110a7565b9060005260206000200154905080876000018481548110610952576109526110a7565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610985576109856110d6565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506101dc565b60009150506101dc565b60006102f88383610a20565b60006109e283836108bf565b610a18575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556101dc565b5060006101dc565b6000826000018281548110610a3757610a376110a7565b9060005260206000200154905092915050565b508054610a5690610ef6565b6000825580601f10610a66575050565b601f01602090049060005260206000209081019061069891905b80821115610a945760008155600101610a80565b5090565b6001600160a01b03169052565b600060208284031215610ab757600080fd5b5035919050565b80356001600160a01b0381168114610ad557600080fd5b919050565b60008060408385031215610aed57600080fd5b82359150610afd60208401610abe565b90509250929050565b60008060408385031215610b1957600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015610b6057835183529284019291840191600101610b44565b50909695505050505050565b600080600060608486031215610b8157600080fd5b610b8a84610abe565b95602085013595506040909401359392505050565b6000815180845260005b81811015610bc557602081850181015186830182015201610ba9565b506000602082860101526020601f19601f83011685010191505092915050565b60208152610bf7602082018351610a98565b60006020830151610c0b6040840182610a98565b506040830151610c1e6060840182610a98565b506060830151801515608084015250608083015160a08381019190915283015160c08084019190915283015160e08084019190915283015161010080840191909152830151610120808401919091528301516101408084019190915283015161016080840191909152830151610180808401919091528301516101a0808401526103366101c0840182610b9f565b634e487b7160e01b600052604160045260246000fd5b6040516101a081016001600160401b0381118282101715610ce557610ce5610cac565b60405290565b801515811461069857600080fd5b8035610ad581610ceb565b600082601f830112610d1557600080fd5b81356001600160401b0380821115610d2f57610d2f610cac565b604051601f8301601f19908116603f01168101908282118183101715610d5757610d57610cac565b81604052838152866020858801011115610d7057600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610da557600080fd5b83359250610db560208501610abe565b915060408401356001600160401b0380821115610dd157600080fd5b908501906101a08288031215610de657600080fd5b610dee610cc2565b610df783610abe565b8152610e0560208401610abe565b6020820152610e1660408401610abe565b6040820152610e2760608401610cf9565b60608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101208084013581830152506101408084013581830152506101608084013581830152506101808084013583811115610e9857600080fd5b610ea48a828701610d04565b8284015250508093505050509250925092565b600060208284031215610ec957600080fd5b6102f882610abe565b6020808252600a908201526921a7a72a2927a62622a960b11b604082015260600190565b600181811c90821680610f0a57607f821691505b602082108103610f2a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102e557600081815260208120601f850160051c81016020861015610f575750805b601f850160051c820191505b81811015610f7657828155600101610f63565b505050505050565b81516001600160401b03811115610f9757610f97610cac565b610fab81610fa58454610ef6565b84610f30565b602080601f831160018114610fe05760008415610fc85750858301515b600019600386901b1c1916600185901b178555610f76565b600085815260208120601f198616915b8281101561100f57888601518255948401946001909101908401610ff0565b508582101561102d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561104f57600080fd5b81516102f881610ceb565b6001600160a01b038316815260406020820181905260009061033690830184610b9f565b634e487b7160e01b600052601160045260246000fd5b818103818111156101dc576101dc61107e565b634e487b7160e01b600052603260045260246000fd5b6000600182016110cf576110cf61107e565b5060010190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212201cdf8de083f893ca478f0c6cc4867eb844efe6662b5c52bab0ab67ab7dd9eefc64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100995760003560e01c806312d43a511461009e5780631d1a696d146100ce5780632874528e146100f15780634a4a7b04146101065780637f497d971461012d578063816834761461014d5780638c5ea9b8146101635780638eaa6ac014610176578063c63582cc14610196578063cfad57a2146101a9578063e5276445146101bc575b600080fd5b6000546100b1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e16100dc366004610aa5565b6101cf565b60405190151581526020016100c5565b6101046100ff366004610ada565b6101e2565b005b6100b17f000000000000000000000000000000000000000000000000000000000000000081565b61014061013b366004610b06565b6102ea565b6040516100c59190610b28565b6101556102ff565b6040519081526020016100c5565b610140610171366004610b6c565b610310565b610189610184366004610aa5565b61033e565b6040516100c59190610be5565b6101046101a4366004610d90565b610514565b6101046101b7366004610eb7565b610641565b6101556101ca366004610eb7565b61069b565b60006101dc6002836106bc565b92915050565b6102326040516020016101f490610ed2565b604051602081830303815290604052805190602001206040518060400160405280600a81526020016921a7a72a2927a62622a960b11b8152506106c8565b6000828152600160208190526040822080546001600160a01b0319908116825591810180549092169091556002810180546001600160a81b031916905560038101829055600481018290556005810182905560068101829055600781018290556008810182905560098101829055600a8101829055906102b5600b830182610a4a565b50506001600160a01b03811660009081526004602052604090206102d9908361077c565b506102e560028361077c565b505050565b60606102f860028484610788565b9392505050565b600061030b6002610848565b905090565b6001600160a01b0383166000908152600460205260409020606090610336908484610788565b949350505050565b6103c6604051806101a0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b60008281526001602081815260409283902083516101a08101855281546001600160a01b03908116825293820154841692810192909252600281015492831693820193909352600160a01b90910460ff161515606082015260038201546080820152600482015460a0820152600582015460c0820152600682015460e0820152600782015461010082015260088201546101208201526009820154610140820152600a820154610160820152600b820180549192916101808401919061048b90610ef6565b80601f01602080910402602001604051908101604052809291908181526020018280546104b790610ef6565b80156105045780601f106104d957610100808354040283529160200191610504565b820191906000526020600020905b8154815290600101906020018083116104e757829003601f168201915b5050505050815250509050919050565b6105266040516020016101f490610ed2565b600083815260016020818152604092839020845181546001600160a01b039182166001600160a01b031991821617835592860151938201805494821694909316939093179091559183015160028301805460608601511515600160a01b026001600160a81b031990911692909316919091179190911790556080820151600382015560a0820151600482015560c0820151600582015560e08201516006820155610100820151600782015561012082015160088201556101408201516009820155610160820151600a820155610180820151829190600b82019061060a9082610f7e565b5050506001600160a01b038216600090815260046020526040902061062f9084610852565b5061063b600284610852565b50505050565b6000546001600160a01b0316331461068f576040805163a35b150b60e01b81523360048201526024810191909152600360448201526223a7ab60e91b60648201526084015b60405180910390fd5b6106988161085e565b50565b6001600160a01b03811660009081526004602052604081206101dc90610848565b60006102f883836108bf565b60405163ac4ab3fb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ac4ab3fb90604401602060405180830381865afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610757919061103d565b61077857338160405163a35b150b60e01b815260040161068692919061105a565b5050565b60006102f883836108d7565b6060600061079585610848565b9050808311156107a3578092505b60006107af8585611094565b6001600160401b038111156107c6576107c6610cac565b6040519080825280602002602001820160405280156107ef578160200160208202803683370190505b509050845b8481101561083e5761080687826109ca565b826108118884611094565b81518110610821576108216110a7565b602090810291909101015280610836816110bd565b9150506107f4565b5095945050505050565b60006101dc825490565b60006102f883836109d6565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785910160405180910390a15050565b60009081526001919091016020526040902054151590565b600081815260018301602052604081205480156109c05760006108fb600183611094565b855490915060009061090f90600190611094565b905081811461097457600086600001828154811061092f5761092f6110a7565b9060005260206000200154905080876000018481548110610952576109526110a7565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610985576109856110d6565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506101dc565b60009150506101dc565b60006102f88383610a20565b60006109e283836108bf565b610a18575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556101dc565b5060006101dc565b6000826000018281548110610a3757610a376110a7565b9060005260206000200154905092915050565b508054610a5690610ef6565b6000825580601f10610a66575050565b601f01602090049060005260206000209081019061069891905b80821115610a945760008155600101610a80565b5090565b6001600160a01b03169052565b600060208284031215610ab757600080fd5b5035919050565b80356001600160a01b0381168114610ad557600080fd5b919050565b60008060408385031215610aed57600080fd5b82359150610afd60208401610abe565b90509250929050565b60008060408385031215610b1957600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015610b6057835183529284019291840191600101610b44565b50909695505050505050565b600080600060608486031215610b8157600080fd5b610b8a84610abe565b95602085013595506040909401359392505050565b6000815180845260005b81811015610bc557602081850181015186830182015201610ba9565b506000602082860101526020601f19601f83011685010191505092915050565b60208152610bf7602082018351610a98565b60006020830151610c0b6040840182610a98565b506040830151610c1e6060840182610a98565b506060830151801515608084015250608083015160a08381019190915283015160c08084019190915283015160e08084019190915283015161010080840191909152830151610120808401919091528301516101408084019190915283015161016080840191909152830151610180808401919091528301516101a0808401526103366101c0840182610b9f565b634e487b7160e01b600052604160045260246000fd5b6040516101a081016001600160401b0381118282101715610ce557610ce5610cac565b60405290565b801515811461069857600080fd5b8035610ad581610ceb565b600082601f830112610d1557600080fd5b81356001600160401b0380821115610d2f57610d2f610cac565b604051601f8301601f19908116603f01168101908282118183101715610d5757610d57610cac565b81604052838152866020858801011115610d7057600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610da557600080fd5b83359250610db560208501610abe565b915060408401356001600160401b0380821115610dd157600080fd5b908501906101a08288031215610de657600080fd5b610dee610cc2565b610df783610abe565b8152610e0560208401610abe565b6020820152610e1660408401610abe565b6040820152610e2760608401610cf9565b60608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101208084013581830152506101408084013581830152506101608084013581830152506101808084013583811115610e9857600080fd5b610ea48a828701610d04565b8284015250508093505050509250925092565b600060208284031215610ec957600080fd5b6102f882610abe565b6020808252600a908201526921a7a72a2927a62622a960b11b604082015260600190565b600181811c90821680610f0a57607f821691505b602082108103610f2a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102e557600081815260208120601f850160051c81016020861015610f575750805b601f850160051c820191505b81811015610f7657828155600101610f63565b505050505050565b81516001600160401b03811115610f9757610f97610cac565b610fab81610fa58454610ef6565b84610f30565b602080601f831160018114610fe05760008415610fc85750858301515b600019600386901b1c1916600185901b178555610f76565b600085815260208120601f198616915b8281101561100f57888601518255948401946001909101908401610ff0565b508582101561102d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561104f57600080fd5b81516102f881610ceb565b6001600160a01b038316815260406020820181905260009061033690830184610b9f565b634e487b7160e01b600052601160045260246000fd5b818103818111156101dc576101dc61107e565b634e487b7160e01b600052603260045260246000fd5b6000600182016110cf576110cf61107e565b5060010190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212201cdf8de083f893ca478f0c6cc4867eb844efe6662b5c52bab0ab67ab7dd9eefc64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12130,
        "contract": "contracts/position/PositionStore.sol:PositionStore",
        "label": "gov",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23050,
        "contract": "contracts/position/PositionStore.sol:PositionStore",
        "label": "positions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Props)23030_storage)"
      },
      {
        "astId": 23053,
        "contract": "contracts/position/PositionStore.sol:PositionStore",
        "label": "positionKeys",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Bytes32Set)4192_storage"
      },
      {
        "astId": 23058,
        "contract": "contracts/position/PositionStore.sol:PositionStore",
        "label": "accountPositionKeys",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)4192_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)4192_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)4192_storage"
      },
      "t_mapping(t_bytes32,t_struct(Props)23030_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Position.Props)",
        "numberOfBytes": "32",
        "value": "t_struct(Props)23030_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bytes32Set)4192_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 4191,
            "contract": "contracts/position/PositionStore.sol:PositionStore",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3998_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Props)23030_storage": {
        "encoding": "inplace",
        "label": "struct Position.Props",
        "members": [
          {
            "astId": 23005,
            "contract": "contracts/position/PositionStore.sol:PositionStore",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 23007,
            "contract": "contracts/position/PositionStore.sol:PositionStore",
            "label": "market",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 23009,
            "contract": "contracts/position/PositionStore.sol:PositionStore",
            "label": "collateralToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 23011,
            "contract": "contracts/position/PositionStore.sol:PositionStore",
            "label": "isLong",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 23013,
            "contract": "contracts/position/PositionStore.sol:PositionStore",
            "label": "sizeInUsd",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 23015,
            "contract": "contracts/position/PositionStore.sol:PositionStore",
            "label": "sizeInTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 23017,
            "contract": "contracts/position/PositionStore.sol:PositionStore",
            "label": "collateralAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 23019,
            "contract": "contracts/position/PositionStore.sol:PositionStore",
            "label": "borrowingFactor",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 23021,
            "contract": "contracts/position/PositionStore.sol:PositionStore",
            "label": "longTokenFundingAmountPerSize",
            "offset": 0,
            "slot": "7",
            "type": "t_int256"
          },
          {
            "astId": 23023,
            "contract": "contracts/position/PositionStore.sol:PositionStore",
            "label": "shortTokenFundingAmountPerSize",
            "offset": 0,
            "slot": "8",
            "type": "t_int256"
          },
          {
            "astId": 23025,
            "contract": "contracts/position/PositionStore.sol:PositionStore",
            "label": "increasedAtBlock",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 23027,
            "contract": "contracts/position/PositionStore.sol:PositionStore",
            "label": "decreasedAtBlock",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 23029,
            "contract": "contracts/position/PositionStore.sol:PositionStore",
            "label": "data",
            "offset": 0,
            "slot": "11",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Set)3998_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3993,
            "contract": "contracts/position/PositionStore.sol:PositionStore",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3997,
            "contract": "contracts/position/PositionStore.sol:PositionStore",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}