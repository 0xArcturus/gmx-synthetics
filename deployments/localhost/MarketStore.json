{
  "address": "0x4ed7c70F96B99c776995fB64377f0d4aB3B0e1C1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract RoleStore",
          "name": "_roleStore",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevGov",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextGov",
          "type": "address"
        }
      ],
      "name": "SetGov",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "marketToken",
          "type": "address"
        }
      ],
      "name": "contains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "marketToken",
          "type": "address"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "marketToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "indexToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "longToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "shortToken",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Market.Props",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getMarketKeys",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "longToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "shortToken",
          "type": "address"
        }
      ],
      "name": "getMarketToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "marketAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "marketToken",
          "type": "address"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "marketToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "marketToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "indexToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "longToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "shortToken",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Market.Props",
          "name": "market",
          "type": "tuple"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1549ebcf6322d43e573e0262d8fd8fa5e67913e275baa26225ec36a1f9ae6abc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x4ed7c70F96B99c776995fB64377f0d4aB3B0e1C1",
    "transactionIndex": 0,
    "gasUsed": "994602",
    "logsBloom": "0x
    "blockHash": "0x5f1375b703a39f0514085eca8aea5eeddacb9399568a002025f59b26d5346b93",
    "transactionHash": "0x1549ebcf6322d43e573e0262d8fd8fa5e67913e275baa26225ec36a1f9ae6abc",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 23,
        "transactionHash": "0x1549ebcf6322d43e573e0262d8fd8fa5e67913e275baa26225ec36a1f9ae6abc",
        "address": "0x4ed7c70F96B99c776995fB64377f0d4aB3B0e1C1",
        "topics": [
          "0x53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
        "logIndex": 0,
        "blockHash": "0x5f1375b703a39f0514085eca8aea5eeddacb9399568a002025f59b26d5346b93"
      }
    ],
    "blockNumber": 23,
    "cumulativeGasUsed": "994602",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "5a19200e07267844d5f5ac65da21599c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract RoleStore\",\"name\":\"_roleStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextGov\",\"type\":\"address\"}],\"name\":\"SetGov\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"longToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shortToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Market.Props\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getMarketKeys\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"longToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shortToken\",\"type\":\"address\"}],\"name\":\"getMarketToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"marketAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"longToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shortToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Market.Props\",\"name\":\"market\",\"type\":\"tuple\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/market/MarketStore.sol\":\"MarketStore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/gov/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    event SetGov(address prevGov, address nextGov);\\n\\n    error Unauthorized(address msgSender, string role);\\n\\n    constructor() {\\n        _setGov(msg.sender);\\n    }\\n\\n    modifier onlyGov() {\\n        if (msg.sender != gov) {\\n            revert Unauthorized(msg.sender, \\\"GOV\\\");\\n        }\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        _setGov(_gov);\\n    }\\n\\n    function _setGov(address _gov) internal {\\n        address prevGov = gov;\\n        gov = _gov;\\n\\n        emit SetGov(prevGov, _gov);\\n    }\\n}\\n\",\"keccak256\":\"0x2fc683a981692f88346e2e0c936bd52a0304a62ee73524c93baf19a68c99087a\",\"license\":\"BUSL-1.1\"},\"contracts/market/Market.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Market {\\n    struct Props {\\n        address marketToken;\\n        address indexToken;\\n        address longToken;\\n        address shortToken;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0xf4bc9709a5689f44263db43c0dc492d9ccef32c49fb4bf16d6f6021817bf9c49\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Market.sol\\\";\\nimport \\\"../role/RoleModule.sol\\\";\\n\\ncontract MarketStore is RoleModule {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using Market for Market.Props;\\n\\n    mapping(address => Market.Props) internal markets;\\n    mapping(bytes32 => address) public marketAddresses;\\n    EnumerableSet.AddressSet internal marketTokens;\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    function set(address marketToken, Market.Props memory market) external onlyController {\\n        markets[marketToken] = market;\\n        marketTokens.add(marketToken);\\n\\n        bytes32 marketKey = keccak256(abi.encodePacked(market.indexToken, market.longToken, market.shortToken));\\n        marketAddresses[marketKey] = marketToken;\\n    }\\n\\n    function remove(address marketToken) external onlyController {\\n        Market.Props memory market = markets[marketToken];\\n\\n        delete markets[marketToken];\\n        marketTokens.remove(marketToken);\\n\\n        bytes32 marketKey = keccak256(abi.encodePacked(market.indexToken, market.longToken, market.shortToken));\\n        delete marketAddresses[marketKey];\\n    }\\n\\n    function contains(address marketToken) external view returns (bool) {\\n        return marketTokens.contains(marketToken);\\n    }\\n\\n    function get(address marketToken) external view returns (Market.Props memory) {\\n        return markets[marketToken];\\n    }\\n\\n    function getMarketToken(address indexToken, address longToken, address shortToken) external view returns (address) {\\n        bytes32 marketKey = keccak256(abi.encodePacked(indexToken, longToken, shortToken));\\n        return marketAddresses[marketKey];\\n    }\\n\\n    function getMarketCount() external view returns (uint256) {\\n        return marketTokens.length();\\n    }\\n\\n    function getMarketKeys(uint256 start, uint256 end) external view returns (address[] memory) {\\n        return marketTokens.valuesAt(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0xdd44d2d085f781966f9b743677d7dc149a9de14240444cacda6a7b0db516d534\",\"license\":\"BUSL-1.1\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Role {\\n    bytes32 public constant CONTROLLER = keccak256(\\\"CONTROLLER\\\");\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(\\\"ROUTER_PLUGIN\\\");\\n    bytes32 public constant MARKET_KEEPER = keccak256(\\\"MARKET_KEEPER\\\");\\n    bytes32 public constant ORDER_KEEPER = keccak256(\\\"ORDER_KEEPER\\\");\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(\\\"FROZEN_ORDER_KEEPER\\\");\\n    bytes32 public constant PRICING_KEEPER = keccak256(\\\"PRICING_KEEPER\\\");\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(\\\"LIQUIDATION_KEEPER\\\");\\n}\\n\",\"keccak256\":\"0x6c720332d3fa93828949b3594ffe43a1c69f54a195b113c1a10721a0a464f645\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleStore.sol\\\";\\nimport \\\"./Role.sol\\\";\\nimport \\\"../gov/Governable.sol\\\";\\n\\ncontract RoleModule is Governable {\\n    RoleStore immutable roleStore;\\n\\n    constructor(RoleStore _roleStore) {\\n        roleStore = _roleStore;\\n    }\\n\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) {\\n            revert Unauthorized(msg.sender, \\\"SELF\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        _validateRole(Role.CONTROLLER, \\\"CONTROLLER\\\");\\n        _;\\n    }\\n\\n    modifier onlyRouterPlugin() {\\n        _validateRole(Role.ROUTER_PLUGIN, \\\"ROUTER_PLUGIN\\\");\\n        _;\\n    }\\n\\n    modifier onlyMarketKeeper() {\\n        _validateRole(Role.MARKET_KEEPER, \\\"MARKET_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyOrderKeeper() {\\n        _validateRole(Role.ORDER_KEEPER, \\\"ORDER_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyPricingKeeper() {\\n        _validateRole(Role.PRICING_KEEPER, \\\"PRICING_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyLiquidationKeeper() {\\n        _validateRole(Role.LIQUIDATION_KEEPER, \\\"LIQUIDATION_KEEPER\\\");\\n        _;\\n    }\\n\\n    function _validateRole(bytes32 role, string memory roleName) internal view {\\n        if (!roleStore.hasRole(msg.sender, role)) {\\n            revert Unauthorized(msg.sender, roleName);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc316c9c31f8742fc6cfffcccc9e3f75979d042ac8efb7135bc1940513259c291\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../utils/EnumerableValues.sol\\\";\\nimport \\\"../gov/Governable.sol\\\";\\n\\ncontract RoleStore is Governable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    EnumerableSet.Bytes32Set internal roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\n    // checking if an account has a role is a frequently used function\\n    // roleCache helps to save gas by offering a more efficient lookup\\n    // vs calling roleMembers[key].contains(account)\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\n\\n    function grantRole(address account, bytes32 key) external onlyGov {\\n        roles.add(key);\\n        roleMembers[key].add(account);\\n        roleCache[account][key] = true;\\n    }\\n\\n    function revokeRole(address account, bytes32 key) external onlyGov {\\n        roleMembers[key].remove(account);\\n        roleCache[account][key] = false;\\n    }\\n\\n    function hasRole(address account, bytes32 key) external view returns (bool) {\\n        return roleCache[account][key];\\n    }\\n\\n    function getRoleCount() external view returns (uint256) {\\n        return roles.length();\\n    }\\n\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return roles.valuesAt(start, end);\\n    }\\n\\n    function getRoleMemberCount(bytes32 key) external view returns (uint256) {\\n        return roleMembers[key].length();\\n    }\\n\\n    function getRoleMembers(bytes32 key, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return roleMembers[key].valuesAt(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0x526d555fb85cb999a71fe99e60e6f9a8e9351a62cff4a2cf6e3a5f763178886d\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary EnumerableValues {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        bytes32[] memory items = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        address[] memory items = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        uint256[] memory items = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0x671d7dc4a6f0e901c78c267ca003c232aed0ab5a18d4ee57e7d355e81f2347f9\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161118238038061118283398101604081905261002f916100ac565b806100393361004b565b6001600160a01b0316608052506100dc565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785910160405180910390a15050565b6000602082840312156100be57600080fd5b81516001600160a01b03811681146100d557600080fd5b9392505050565b60805161108b6100f760003960006107c5015261108b6000f3fe608060405234801561001057600080fd5b506004361061008e5760003560e01c806301ab39881461009357806312d43a51146100bc57806321f15374146100e757806329092d0e146100fa5780635dbe47e81461010f578063ada37fe814610132578063c2bc2efc1461015b578063cfad57a21461017b578063e0ad66321461018e578063fd69f3c2146101a1575b600080fd5b6100a66100a1366004610ae0565b6101b7565b6040516100b39190610b02565b60405180910390f35b6000546100cf906001600160a01b031681565b6040516001600160a01b0390911681526020016100b3565b6100cf6100f5366004610b6b565b6101ce565b61010d610108366004610bae565b61021d565b005b61012261011d366004610bae565b610404565b60405190151581526020016100b3565b6100cf610140366004610bc9565b6002602052600090815260409020546001600160a01b031681565b61016e610169366004610bae565b610411565b6040516100b39190610c28565b61010d610189366004610bae565b61052f565b61010d61019c366004610cf1565b610589565b6101a96106cb565b6040519081526020016100b3565b60606101c5600384846106dc565b90505b92915050565b6000808484846040516020016101e693929190610e08565b60408051808303601f190181529181528151602092830120600090815260029092529020546001600160a01b031695945050505050565b6102576000805160206110368339815191526040518060400160405280600a81526020016921a7a72a2927a62622a960b11b8152506107a9565b6001600160a01b038082166000908152600160208181526040808420815160a08101835281548716815293810154861692840192909252600282015485169083015260038101549093166060820152600483018054929391926080840191906102bf90610e32565b80601f01602080910402602001604051908101604052809291908181526020018280546102eb90610e32565b80156103385780601f1061030d57610100808354040283529160200191610338565b820191906000526020600020905b81548152906001019060200180831161031b57829003601f168201915b505050919092525050506001600160a01b0383166000908152600160208190526040822080546001600160a01b031990811682559181018054831690556002810180548316905560038101805490921690915591925061039b6004830182610a92565b506103a9905060038361085d565b5060008160200151826040015183606001516040516020016103cd93929190610e08565b60408051601f19818403018152918152815160209283012060009081526002909252902080546001600160a01b0319169055505050565b60006101c8600383610872565b6040805160a08101825260008082526020820181905291810182905260608082019290925260808101919091526001600160a01b03808316600090815260016020818152604092839020835160a081018552815486168152928101548516918301919091526002810154841692820192909252600382015490921660608301526004810180546080840191906104a690610e32565b80601f01602080910402602001604051908101604052809291908181526020018280546104d290610e32565b801561051f5780601f106104f45761010080835404028352916020019161051f565b820191906000526020600020905b81548152906001019060200180831161050257829003601f168201915b5050505050815250509050919050565b6000546001600160a01b0316331461057d576040805163a35b150b60e01b81523360048201526024810191909152600360448201526223a7ab60e91b60648201526084015b60405180910390fd5b61058681610887565b50565b6105c36000805160206110368339815191526040518060400160405280600a81526020016921a7a72a2927a62622a960b11b8152506107a9565b6001600160a01b03828116600090815260016020818152604092839020855181546001600160a01b031990811691871691909117825591860151928101805483169386169390931790925591840151600282018054841691851691909117905560608401516003820180549093169316929092179055608082015182919060048201906106509082610ebb565b50610660915060039050836108e8565b50600081602001518260400151836060015160405160200161068493929190610e08565b60408051808303601f19018152918152815160209283012060009081526002909252902080546001600160a01b0319166001600160a01b0394909416939093179092555050565b60006106d760036108fd565b905090565b606060006106e9856108fd565b9050808311156106f7578092505b60006107038585610f90565b6001600160401b0381111561071a5761071a610c83565b604051908082528060200260200182016040528015610743578160200160208202803683370190505b509050845b8481101561079f5761075a8782610907565b826107658884610f90565b8151811061077557610775610fa3565b6001600160a01b03909216602092830291909101909101528061079781610fb9565b915050610748565b5095945050505050565b60405163ac4ab3fb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ac4ab3fb90604401602060405180830381865afa158015610814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108389190610fd2565b61085957338160405163a35b150b60e01b8152600401610574929190610ffb565b5050565b60006101c5836001600160a01b038416610913565b60006101c5836001600160a01b038416610a06565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785910160405180910390a15050565b60006101c5836001600160a01b038416610a1e565b60006101c8825490565b60006101c58383610a68565b600081815260018301602052604081205480156109fc576000610937600183610f90565b855490915060009061094b90600190610f90565b90508181146109b057600086600001828154811061096b5761096b610fa3565b906000526020600020015490508087600001848154811061098e5761098e610fa3565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806109c1576109c161101f565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506101c8565b60009150506101c8565b60009081526001919091016020526040902054151590565b6000610a2a8383610a06565b610a60575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556101c8565b5060006101c8565b6000826000018281548110610a7f57610a7f610fa3565b9060005260206000200154905092915050565b508054610a9e90610e32565b6000825580601f10610aae575050565b601f01602090049060005260206000209081019061058691905b80821115610adc5760008155600101610ac8565b5090565b60008060408385031215610af357600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015610b435783516001600160a01b031683529284019291840191600101610b1e565b50909695505050505050565b80356001600160a01b0381168114610b6657600080fd5b919050565b600080600060608486031215610b8057600080fd5b610b8984610b4f565b9250610b9760208501610b4f565b9150610ba560408501610b4f565b90509250925092565b600060208284031215610bc057600080fd5b6101c582610b4f565b600060208284031215610bdb57600080fd5b5035919050565b6000815180845260005b81811015610c0857602081850181015186830182015201610bec565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600060018060a01b0380845116602084015280602085015116604084015280604085015116606084015280606085015116608084015250608083015160a080840152610c7b60c0840182610be2565b949350505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715610cbb57610cbb610c83565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610ce957610ce9610c83565b604052919050565b60008060408385031215610d0457600080fd5b610d0d83610b4f565b91506020838101356001600160401b0380821115610d2a57600080fd5b9085019060a08288031215610d3e57600080fd5b610d46610c99565b610d4f83610b4f565b8152610d5c848401610b4f565b84820152610d6c60408401610b4f565b6040820152610d7d60608401610b4f565b6060820152608083013582811115610d9457600080fd5b80840193505087601f840112610da957600080fd5b823582811115610dbb57610dbb610c83565b610dcd601f8201601f19168601610cc1565b92508083528885828601011115610de357600080fd5b8085850186850137600085828501015250816080820152809450505050509250929050565b6001600160601b0319606094851b8116825292841b83166014820152921b166028820152603c0190565b600181811c90821680610e4657607f821691505b602082108103610e6657634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610eb657600081815260208120601f850160051c81016020861015610e935750805b601f850160051c820191505b81811015610eb257828155600101610e9f565b5050505b505050565b81516001600160401b03811115610ed457610ed4610c83565b610ee881610ee28454610e32565b84610e6c565b602080601f831160018114610f1d5760008415610f055750858301515b600019600386901b1c1916600185901b178555610eb2565b600085815260208120601f198616915b82811015610f4c57888601518255948401946001909101908401610f2d565b5085821015610f6a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b818103818111156101c8576101c8610f7a565b634e487b7160e01b600052603260045260246000fd5b600060018201610fcb57610fcb610f7a565b5060010190565b600060208284031215610fe457600080fd5b81518015158114610ff457600080fd5b9392505050565b6001600160a01b0383168152604060208201819052600090610c7b90830184610be2565b634e487b7160e01b600052603160045260246000fdfe70546d1c92f8c2132ae23a23f5177aa8526356051c7510df99f50e012d221529a26469706673582212203747bf42b21979dd850f07364edfdadd680ea465fa8924d9aba928320dcf6daf64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061008e5760003560e01c806301ab39881461009357806312d43a51146100bc57806321f15374146100e757806329092d0e146100fa5780635dbe47e81461010f578063ada37fe814610132578063c2bc2efc1461015b578063cfad57a21461017b578063e0ad66321461018e578063fd69f3c2146101a1575b600080fd5b6100a66100a1366004610ae0565b6101b7565b6040516100b39190610b02565b60405180910390f35b6000546100cf906001600160a01b031681565b6040516001600160a01b0390911681526020016100b3565b6100cf6100f5366004610b6b565b6101ce565b61010d610108366004610bae565b61021d565b005b61012261011d366004610bae565b610404565b60405190151581526020016100b3565b6100cf610140366004610bc9565b6002602052600090815260409020546001600160a01b031681565b61016e610169366004610bae565b610411565b6040516100b39190610c28565b61010d610189366004610bae565b61052f565b61010d61019c366004610cf1565b610589565b6101a96106cb565b6040519081526020016100b3565b60606101c5600384846106dc565b90505b92915050565b6000808484846040516020016101e693929190610e08565b60408051808303601f190181529181528151602092830120600090815260029092529020546001600160a01b031695945050505050565b6102576000805160206110368339815191526040518060400160405280600a81526020016921a7a72a2927a62622a960b11b8152506107a9565b6001600160a01b038082166000908152600160208181526040808420815160a08101835281548716815293810154861692840192909252600282015485169083015260038101549093166060820152600483018054929391926080840191906102bf90610e32565b80601f01602080910402602001604051908101604052809291908181526020018280546102eb90610e32565b80156103385780601f1061030d57610100808354040283529160200191610338565b820191906000526020600020905b81548152906001019060200180831161031b57829003601f168201915b505050919092525050506001600160a01b0383166000908152600160208190526040822080546001600160a01b031990811682559181018054831690556002810180548316905560038101805490921690915591925061039b6004830182610a92565b506103a9905060038361085d565b5060008160200151826040015183606001516040516020016103cd93929190610e08565b60408051601f19818403018152918152815160209283012060009081526002909252902080546001600160a01b0319169055505050565b60006101c8600383610872565b6040805160a08101825260008082526020820181905291810182905260608082019290925260808101919091526001600160a01b03808316600090815260016020818152604092839020835160a081018552815486168152928101548516918301919091526002810154841692820192909252600382015490921660608301526004810180546080840191906104a690610e32565b80601f01602080910402602001604051908101604052809291908181526020018280546104d290610e32565b801561051f5780601f106104f45761010080835404028352916020019161051f565b820191906000526020600020905b81548152906001019060200180831161050257829003601f168201915b5050505050815250509050919050565b6000546001600160a01b0316331461057d576040805163a35b150b60e01b81523360048201526024810191909152600360448201526223a7ab60e91b60648201526084015b60405180910390fd5b61058681610887565b50565b6105c36000805160206110368339815191526040518060400160405280600a81526020016921a7a72a2927a62622a960b11b8152506107a9565b6001600160a01b03828116600090815260016020818152604092839020855181546001600160a01b031990811691871691909117825591860151928101805483169386169390931790925591840151600282018054841691851691909117905560608401516003820180549093169316929092179055608082015182919060048201906106509082610ebb565b50610660915060039050836108e8565b50600081602001518260400151836060015160405160200161068493929190610e08565b60408051808303601f19018152918152815160209283012060009081526002909252902080546001600160a01b0319166001600160a01b0394909416939093179092555050565b60006106d760036108fd565b905090565b606060006106e9856108fd565b9050808311156106f7578092505b60006107038585610f90565b6001600160401b0381111561071a5761071a610c83565b604051908082528060200260200182016040528015610743578160200160208202803683370190505b509050845b8481101561079f5761075a8782610907565b826107658884610f90565b8151811061077557610775610fa3565b6001600160a01b03909216602092830291909101909101528061079781610fb9565b915050610748565b5095945050505050565b60405163ac4ab3fb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ac4ab3fb90604401602060405180830381865afa158015610814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108389190610fd2565b61085957338160405163a35b150b60e01b8152600401610574929190610ffb565b5050565b60006101c5836001600160a01b038416610913565b60006101c5836001600160a01b038416610a06565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785910160405180910390a15050565b60006101c5836001600160a01b038416610a1e565b60006101c8825490565b60006101c58383610a68565b600081815260018301602052604081205480156109fc576000610937600183610f90565b855490915060009061094b90600190610f90565b90508181146109b057600086600001828154811061096b5761096b610fa3565b906000526020600020015490508087600001848154811061098e5761098e610fa3565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806109c1576109c161101f565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506101c8565b60009150506101c8565b60009081526001919091016020526040902054151590565b6000610a2a8383610a06565b610a60575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556101c8565b5060006101c8565b6000826000018281548110610a7f57610a7f610fa3565b9060005260206000200154905092915050565b508054610a9e90610e32565b6000825580601f10610aae575050565b601f01602090049060005260206000209081019061058691905b80821115610adc5760008155600101610ac8565b5090565b60008060408385031215610af357600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015610b435783516001600160a01b031683529284019291840191600101610b1e565b50909695505050505050565b80356001600160a01b0381168114610b6657600080fd5b919050565b600080600060608486031215610b8057600080fd5b610b8984610b4f565b9250610b9760208501610b4f565b9150610ba560408501610b4f565b90509250925092565b600060208284031215610bc057600080fd5b6101c582610b4f565b600060208284031215610bdb57600080fd5b5035919050565b6000815180845260005b81811015610c0857602081850181015186830182015201610bec565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600060018060a01b0380845116602084015280602085015116604084015280604085015116606084015280606085015116608084015250608083015160a080840152610c7b60c0840182610be2565b949350505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715610cbb57610cbb610c83565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610ce957610ce9610c83565b604052919050565b60008060408385031215610d0457600080fd5b610d0d83610b4f565b91506020838101356001600160401b0380821115610d2a57600080fd5b9085019060a08288031215610d3e57600080fd5b610d46610c99565b610d4f83610b4f565b8152610d5c848401610b4f565b84820152610d6c60408401610b4f565b6040820152610d7d60608401610b4f565b6060820152608083013582811115610d9457600080fd5b80840193505087601f840112610da957600080fd5b823582811115610dbb57610dbb610c83565b610dcd601f8201601f19168601610cc1565b92508083528885828601011115610de357600080fd5b8085850186850137600085828501015250816080820152809450505050509250929050565b6001600160601b0319606094851b8116825292841b83166014820152921b166028820152603c0190565b600181811c90821680610e4657607f821691505b602082108103610e6657634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610eb657600081815260208120601f850160051c81016020861015610e935750805b601f850160051c820191505b81811015610eb257828155600101610e9f565b5050505b505050565b81516001600160401b03811115610ed457610ed4610c83565b610ee881610ee28454610e32565b84610e6c565b602080601f831160018114610f1d5760008415610f055750858301515b600019600386901b1c1916600185901b178555610eb2565b600085815260208120601f198616915b82811015610f4c57888601518255948401946001909101908401610f2d565b5085821015610f6a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b818103818111156101c8576101c8610f7a565b634e487b7160e01b600052603260045260246000fd5b600060018201610fcb57610fcb610f7a565b5060010190565b600060208284031215610fe457600080fd5b81518015158114610ff457600080fd5b9392505050565b6001600160a01b0383168152604060208201819052600090610c7b90830184610be2565b634e487b7160e01b600052603160045260246000fdfe70546d1c92f8c2132ae23a23f5177aa8526356051c7510df99f50e012d221529a26469706673582212203747bf42b21979dd850f07364edfdadd680ea465fa8924d9aba928320dcf6daf64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10641,
        "contract": "contracts/market/MarketStore.sol:MarketStore",
        "label": "gov",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10876,
        "contract": "contracts/market/MarketStore.sol:MarketStore",
        "label": "markets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Props)10723_storage)"
      },
      {
        "astId": 10880,
        "contract": "contracts/market/MarketStore.sol:MarketStore",
        "label": "marketAddresses",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 10883,
        "contract": "contracts/market/MarketStore.sol:MarketStore",
        "label": "marketTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)4299_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Props)10723_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Market.Props)",
        "numberOfBytes": "32",
        "value": "t_struct(Props)10723_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4299_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4298,
            "contract": "contracts/market/MarketStore.sol:MarketStore",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3998_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Props)10723_storage": {
        "encoding": "inplace",
        "label": "struct Market.Props",
        "members": [
          {
            "astId": 10714,
            "contract": "contracts/market/MarketStore.sol:MarketStore",
            "label": "marketToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10716,
            "contract": "contracts/market/MarketStore.sol:MarketStore",
            "label": "indexToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10718,
            "contract": "contracts/market/MarketStore.sol:MarketStore",
            "label": "longToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 10720,
            "contract": "contracts/market/MarketStore.sol:MarketStore",
            "label": "shortToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 10722,
            "contract": "contracts/market/MarketStore.sol:MarketStore",
            "label": "data",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Set)3998_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3993,
            "contract": "contracts/market/MarketStore.sol:MarketStore",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3997,
            "contract": "contracts/market/MarketStore.sol:MarketStore",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}