{
  "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract RoleStore",
          "name": "_roleStore",
          "type": "address"
        },
        {
          "internalType": "contract OracleStore",
          "name": "_oracleStore",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oracleBlockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevOracleBlockNumber",
          "type": "uint256"
        }
      ],
      "name": "BlockNumbersNotSorted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "signerIndex",
          "type": "uint256"
        }
      ],
      "name": "DuplicateSigner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyBlockNumber",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "EmptyCustomPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "EmptyFeedPrecision",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "EmptyFeedPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "EmptyLatestPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "EmptyPrecision",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "EmptyPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "EmptyPrimaryPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "EmptySecondaryPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyTokens",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "InvalidBlockNumber",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recoveredSigner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expectedSigner",
          "type": "address"
        }
      ],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "MaxBlockAgeExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oracleSigners",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxOracleSigners",
          "type": "uint256"
        }
      ],
      "name": "MaxOracleSigners",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevPrice",
          "type": "uint256"
        }
      ],
      "name": "MaxPricesNotSorted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "signerIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSignerIndex",
          "type": "uint256"
        }
      ],
      "name": "MaxSignerIndex",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oracleSigners",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minOracleSigners",
          "type": "uint256"
        }
      ],
      "name": "MinOracleSigners",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevPrice",
          "type": "uint256"
        }
      ],
      "name": "MinPricesNotSorted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevGov",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextGov",
          "type": "address"
        }
      ],
      "name": "SetGov",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SIGNERS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SIGNER_INDEX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SALT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNER_INDEX_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearTempPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "customPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getCustomPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            }
          ],
          "internalType": "struct Price.Props",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getLatestPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            }
          ],
          "internalType": "struct Price.Props",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract DataStore",
          "name": "dataStore",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPrecision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPrimaryPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            }
          ],
          "internalType": "struct Price.Props",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getSecondaryPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            }
          ],
          "internalType": "struct Price.Props",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getTempTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTempTokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleStore",
      "outputs": [
        {
          "internalType": "contract OracleStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "primaryPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "secondaryPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            }
          ],
          "internalType": "struct Price.Props",
          "name": "price",
          "type": "tuple"
        }
      ],
      "name": "setCustomPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract DataStore",
          "name": "dataStore",
          "type": "address"
        },
        {
          "internalType": "contract EventEmitter",
          "name": "eventEmitter",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "signerInfo",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedOracleBlockNumbers",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedMinPrices",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedMinPricesIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedMaxPrices",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedMaxPricesIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "signatures",
              "type": "bytes[]"
            },
            {
              "internalType": "address[]",
              "name": "priceFeedTokens",
              "type": "address[]"
            }
          ],
          "internalType": "struct OracleUtils.SetPricesParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            }
          ],
          "internalType": "struct Price.Props",
          "name": "price",
          "type": "tuple"
        }
      ],
      "name": "setSecondaryPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb9d77233a34b679edc9d6b568eb98c8a9e1848ef65b6a9952749eddc8ed3b35",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "transactionIndex": 0,
    "gasUsed": "2566536",
    "logsBloom": "0x
    "blockHash": "0x5caf9ebec5927f31a17361cc754b177decd2c93fe593d945669c42a329a27299",
    "transactionHash": "0xfb9d77233a34b679edc9d6b568eb98c8a9e1848ef65b6a9952749eddc8ed3b35",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0xfb9d77233a34b679edc9d6b568eb98c8a9e1848ef65b6a9952749eddc8ed3b35",
        "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
        "topics": [
          "0x53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
        "logIndex": 0,
        "blockHash": "0x5caf9ebec5927f31a17361cc754b177decd2c93fe593d945669c42a329a27299"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "2566536",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
  ],
  "numDeployments": 1,
  "solcInputHash": "5a19200e07267844d5f5ac65da21599c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract RoleStore\",\"name\":\"_roleStore\",\"type\":\"address\"},{\"internalType\":\"contract OracleStore\",\"name\":\"_oracleStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oracleBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevOracleBlockNumber\",\"type\":\"uint256\"}],\"name\":\"BlockNumbersNotSorted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signerIndex\",\"type\":\"uint256\"}],\"name\":\"DuplicateSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyBlockNumber\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EmptyCustomPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EmptyFeedPrecision\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EmptyFeedPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EmptyLatestPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EmptyPrecision\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EmptyPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EmptyPrimaryPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EmptySecondaryPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"InvalidBlockNumber\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recoveredSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedSigner\",\"type\":\"address\"}],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"MaxBlockAgeExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oracleSigners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOracleSigners\",\"type\":\"uint256\"}],\"name\":\"MaxOracleSigners\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevPrice\",\"type\":\"uint256\"}],\"name\":\"MaxPricesNotSorted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSignerIndex\",\"type\":\"uint256\"}],\"name\":\"MaxSignerIndex\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oracleSigners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOracleSigners\",\"type\":\"uint256\"}],\"name\":\"MinOracleSigners\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevPrice\",\"type\":\"uint256\"}],\"name\":\"MinPricesNotSorted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextGov\",\"type\":\"address\"}],\"name\":\"SetGov\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SIGNERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SIGNER_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_INDEX_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearTempPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getCustomPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct Price.Props\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct Price.Props\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DataStore\",\"name\":\"dataStore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPrimaryPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct Price.Props\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getSecondaryPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct Price.Props\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getTempTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTempTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleStore\",\"outputs\":[{\"internalType\":\"contract OracleStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"primaryPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"secondaryPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct Price.Props\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"setCustomPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DataStore\",\"name\":\"dataStore\",\"type\":\"address\"},{\"internalType\":\"contract EventEmitter\",\"name\":\"eventEmitter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"signerInfo\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedOracleBlockNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedMinPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedMinPricesIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedMaxPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedMaxPricesIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"priceFeedTokens\",\"type\":\"address[]\"}],\"internalType\":\"struct OracleUtils.SetPricesParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct Price.Props\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"setSecondaryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/Oracle.sol\":\"Oracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/bank/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../eth/IWETH.sol\\\";\\nimport \\\"./FundReceiver.sol\\\";\\n\\ncontract Bank is FundReceiver {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(RoleStore _roleStore) FundReceiver(_roleStore) {}\\n\\n    receive() external payable {}\\n\\n    function transferOut(address token, uint256 amount, address receiver) external onlyController {\\n        _transferOut(token, amount, receiver);\\n    }\\n\\n    function transferOut(\\n        address weth,\\n        address token,\\n        uint256 amount,\\n        address receiver,\\n        bool shouldConvertETH\\n    ) external onlyController {\\n        if (token == weth && shouldConvertETH) {\\n            _transferOutEth(token, amount, receiver);\\n        } else {\\n            _transferOut(token, amount, receiver);\\n        }\\n    }\\n\\n    function _transferOut(address token, uint256 amount, address receiver) internal {\\n        require(receiver != address(this), \\\"Bank: invalid receiver\\\");\\n\\n        IERC20(token).safeTransfer(receiver, amount);\\n\\n        _afterTransferOut(token);\\n    }\\n\\n    function _transferOutEth(address token, uint256 amount, address receiver) internal {\\n        require(receiver != address(this), \\\"Bank: invalid receiver\\\");\\n\\n        IWETH(token).withdraw(amount);\\n        payable(receiver).transfer(amount);\\n\\n        _afterTransferOut(token);\\n    }\\n\\n    function _afterTransferOut(address /* token */) internal virtual {}\\n}\\n\",\"keccak256\":\"0x1f3166624bde5743f4ac96d9bb1b208ea7d0615ddf8b584c7d75b74c4895d06e\",\"license\":\"BUSL-1.1\"},\"contracts/bank/FundReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\n\\ncontract FundReceiver is RoleModule {\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    // users may incorrectly send ETH into the contract, allow it to be recovered\\n    function recoverETH(address payable receiver, uint256 amount) external onlyController {\\n        receiver.transfer(amount);\\n    }\\n}\\n\",\"keccak256\":\"0xbc88c6dacdf74feffe950106dfe015174609c1622daa87c9f99338163c07fb44\",\"license\":\"BUSL-1.1\"},\"contracts/bank/StrictBank.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../eth/IWETH.sol\\\";\\nimport \\\"./Bank.sol\\\";\\n\\ncontract StrictBank is Bank {\\n    using SafeERC20 for IERC20;\\n\\n    // used to record token balances to evaluate amounts transferred in\\n    mapping (address => uint256) public tokenBalances;\\n\\n    constructor(RoleStore _roleStore) Bank(_roleStore) {}\\n\\n    function recordTransferIn(address token) external onlyController returns (uint256) {\\n        return _recordTransferIn(token);\\n    }\\n\\n    function _recordTransferIn(address token) internal returns (uint256) {\\n        uint256 prevBalance = tokenBalances[token];\\n        uint256 nextBalance = IERC20(token).balanceOf(address(this));\\n        tokenBalances[token] = nextBalance;\\n\\n        return nextBalance - prevBalance;\\n    }\\n\\n    function _afterTransferOut(address token) internal override {\\n        tokenBalances[token] = IERC20(token).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x82243d04997182b7b09b910e8028d59ebeb4c1db23024b3389d45aefa96a58c6\",\"license\":\"BUSL-1.1\"},\"contracts/chain/ArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ninterface ArbSys {\\n    function arbBlockNumber() external view returns (uint256);\\n    function arbBlockHash(uint256 blockNumber) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7bee829cb502196c8786cbd51773bdb48420c0740e1b85f915840c6619b0e955\",\"license\":\"BUSL-1.1\"},\"contracts/chain/Chain.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ArbSys.sol\\\";\\n\\nlibrary Chain {\\n    uint256 constant public ARBITRUM_CHAIN_ID = 42161;\\n    uint256 constant public ARBITRUM_RINKEBY_CHAIN_ID = 421611;\\n\\n    ArbSys constant public arbSys = ArbSys(address(100));\\n\\n    function currentBlockNumber() internal view returns (uint256) {\\n        if (block.chainid == ARBITRUM_CHAIN_ID || block.chainid == ARBITRUM_RINKEBY_CHAIN_ID) {\\n            return arbSys.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getBlockHash(uint256 blockNumber) internal view returns (bytes32) {\\n        if (block.chainid == ARBITRUM_CHAIN_ID || block.chainid == ARBITRUM_RINKEBY_CHAIN_ID) {\\n            return arbSys.arbBlockHash(blockNumber);\\n        }\\n\\n        return blockhash(blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xa9c4257532f24bb1a8fb81f2156c8b187981e88616fd23310e896fae89178762\",\"license\":\"BUSL-1.1\"},\"contracts/data/DataStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"../utils/Calc.sol\\\";\\n\\ncontract DataStore is RoleModule {\\n    mapping(bytes32 => uint256) public uintValues;\\n    mapping(bytes32 => int256) public intValues;\\n    mapping(bytes32 => address) public addressValues;\\n    mapping(bytes32 => bool) public boolValues;\\n    mapping(bytes32 => string) public stringValues;\\n    mapping(bytes32 => bytes32) public dataValues;\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    function getUint(bytes32 key) external view returns (uint256) {\\n        return uintValues[key];\\n    }\\n\\n    function setUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uintValues[key] = value;\\n        return value;\\n    }\\n\\n    function applyDeltaToUint(bytes32 key, int256 value) external onlyController returns (uint256) {\\n        uint256 nextUint = Calc.sum(uintValues[key], value);\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    function incrementUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uint256 nextUint = uintValues[key] + value;\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    function decrementUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uint256 nextUint = uintValues[key] - value;\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    function getInt(bytes32 key) external view returns (int256) {\\n        return intValues[key];\\n    }\\n\\n    function setInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        intValues[key] = value;\\n        return value;\\n    }\\n\\n    function applyDeltaToInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        int256 nextInt = intValues[key] + value;\\n        intValues[key] = nextInt;\\n        return nextInt;\\n    }\\n\\n    function incrementInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        int256 nextInt = intValues[key] + value;\\n        intValues[key] = nextInt;\\n        return nextInt;\\n    }\\n\\n    function decrementInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        int256 nextInt = intValues[key] - value;\\n        intValues[key] = nextInt;\\n        return nextInt;\\n    }\\n\\n    function getAddress(bytes32 key) external view returns (address) {\\n        return addressValues[key];\\n    }\\n\\n    function setAddress(bytes32 key, address value) external onlyController returns (address) {\\n        addressValues[key] = value;\\n        return value;\\n    }\\n\\n    function getBool(bytes32 key) external view returns (bool) {\\n        return boolValues[key];\\n    }\\n\\n    function setBool(bytes32 key, bool value) external onlyController returns (bool) {\\n        boolValues[key] = value;\\n        return value;\\n    }\\n\\n    function getString(bytes32 key) external view returns (string memory) {\\n        return stringValues[key];\\n    }\\n\\n    function setString(bytes32 key, string memory value) external onlyController returns (string memory) {\\n        stringValues[key] = value;\\n        return value;\\n    }\\n\\n    function getData(bytes32 key) external view returns (bytes32) {\\n        return dataValues[key];\\n    }\\n\\n    function setData(bytes32 key, bytes32 value) external onlyController returns (bytes32) {\\n        dataValues[key] = value;\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0xb031f8e3e450779bc267ac140944f97a7444cc1a9bbe4cbd7299470f857502ac\",\"license\":\"BUSL-1.1\"},\"contracts/data/Keys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Keys {\\n    bytes32 public constant WETH = keccak256(\\\"WETH\\\");\\n    bytes32 public constant NONCE = keccak256(\\\"NONCE\\\");\\n\\n    bytes32 public constant CREATE_DEPOSIT_FEATURE = keccak256(\\\"CREATE_DEPOSIT_FEATURE\\\");\\n    bytes32 public constant EXECUTE_DEPOSIT_FEATURE = keccak256(\\\"EXECUTE_DEPOSIT_FEATURE\\\");\\n\\n    bytes32 public constant CREATE_WITHDRAWAL_FEATURE = keccak256(\\\"CREATE_WITHDRAWAL_FEATURE\\\");\\n    bytes32 public constant EXECUTE_WITHDRAWAL_FEATURE = keccak256(\\\"EXECUTE_WITHDRAWAL_FEATURE\\\");\\n\\n    bytes32 public constant CREATE_ORDER_FEATURE = keccak256(\\\"CREATE_ORDER_FEATURE\\\");\\n    bytes32 public constant EXECUTE_ORDER_FEATURE = keccak256(\\\"EXECUTE_ORDER_FEATURE\\\");\\n    bytes32 public constant UPDATE_ORDER_FEATURE = keccak256(\\\"UPDATE_ORDER_FEATURE\\\");\\n    bytes32 public constant CANCEL_ORDER_FEATURE = keccak256(\\\"CANCEL_ORDER_FEATURE\\\");\\n\\n    // the minimum required oracle signers for an observation\\n    bytes32 public constant MIN_ORACLE_SIGNERS = keccak256(\\\"MIN_ORACLE_SIGNERS\\\");\\n    // the minimum block confirmations before blockhash can be excluded for oracle signature validation\\n    bytes32 public constant MIN_ORACLE_BLOCK_CONFIRMATIONS = keccak256(\\\"MIN_ORACLE_BLOCK_CONFIRMATIONS\\\");\\n    // the maximum block age usable for oracle prices\\n    bytes32 public constant MAX_ORACLE_BLOCK_AGE = keccak256(\\\"MAX_ORACLE_BLOCK_AGE\\\");\\n    // the percentage amount of fees to be received for deposits\\n    bytes32 public constant FEE_RECEIVER_DEPOSIT_FACTOR = keccak256(\\\"FEE_RECEIVER_DEPOSIT_FACTOR\\\");\\n    // the percentage amount of fees to be received for withdrawals\\n    bytes32 public constant FEE_RECEIVER_WITHDRAWAL_FACTOR = keccak256(\\\"FEE_RECEIVER_WITHDRAWAL_FACTOR\\\");\\n    // the percentage amount of fees to be received for swaps\\n    bytes32 public constant FEE_RECEIVER_SWAP_FACTOR = keccak256(\\\"FEE_RECEIVER_SWAP_FACTOR\\\");\\n    // the percentage amount of fees to be received for positions\\n    bytes32 public constant FEE_RECEIVER_POSITION_FACTOR = keccak256(\\\"FEE_RECEIVER_POSITION_FACTOR\\\");\\n\\n    bytes32 public constant ESTIMATED_FEE_BASE_GAS_LIMIT = keccak256(\\\"ESTIMATED_FEE_BASE_GAS_LIMIT\\\");\\n    bytes32 public constant ESTIMATED_FEE_MULTIPLIER_FACTOR = keccak256(\\\"ESTIMATED_FEE_MULTIPLIER_FACTOR\\\");\\n\\n    bytes32 public constant EXECUTION_FEE_BASE_GAS_LIMIT = keccak256(\\\"EXECUTION_FEE_BASE_GAS_LIMIT\\\");\\n    bytes32 public constant EXECUTION_FEE_MULTIPLIER_FACTOR = keccak256(\\\"EXECUTION_FEE_MULTIPLIER_FACTOR\\\");\\n\\n    bytes32 public constant DEPOSIT_GAS_LIMIT = keccak256(\\\"DEPOSIT_GAS_LIMIT\\\");\\n    bytes32 public constant WITHDRAWAL_GAS_LIMIT = keccak256(\\\"WITHDRAWAL_GAS_LIMIT\\\");\\n    bytes32 public constant SINGLE_SWAP_GAS_LIMIT = keccak256(\\\"SINGLE_SWAP_GAS_LIMIT\\\");\\n    bytes32 public constant INCREASE_ORDER_GAS_LIMIT = keccak256(\\\"INCREASE_ORDER_GAS_LIMIT\\\");\\n    bytes32 public constant DECREASE_ORDER_GAS_LIMIT = keccak256(\\\"DECREASE_ORDER_GAS_LIMIT\\\");\\n    bytes32 public constant SWAP_ORDER_GAS_LIMIT = keccak256(\\\"SWAP_ORDER_GAS_LIMIT\\\");\\n    bytes32 public constant CANCELLATION_GAS_LIMIT = keccak256(\\\"CANCELLATION_GAS_LIMIT\\\");\\n\\n    bytes32 public constant MAX_LEVERAGE = keccak256(\\\"MAX_LEVERAGE\\\");\\n    bytes32 public constant MIN_COLLATERAL_USD = keccak256(\\\"MIN_COLLATERAL_USD\\\");\\n\\n    string public constant POSITION_IMPACT_FACTOR = \\\"POSITION_IMPACT_FACTOR\\\";\\n    string public constant POSITION_IMPACT_EXPONENT_FACTOR = \\\"POSITION_IMPACT_EXPONENT_FACTOR\\\";\\n    string public constant POSITION_FEE_FACTOR = \\\"POSITION_FEE_FACTOR\\\";\\n    string public constant SWAP_IMPACT_FACTOR = \\\"SWAP_IMPACT_FACTOR\\\";\\n    string public constant SWAP_IMPACT_EXPONENT_FACTOR = \\\"SWAP_IMPACT_EXPONENT_FACTOR\\\";\\n    string public constant SWAP_FEE_FACTOR = \\\"SWAP_FEE_FACTOR\\\";\\n    string public constant ORACLE_PRECISION = \\\"ORACLE_PRECISION\\\";\\n    string public constant ORACLE_TYPE = \\\"ORACLE_TYPE\\\";\\n    string public constant OPEN_INTEREST = \\\"OPEN_INTEREST\\\";\\n    string public constant OPEN_INTEREST_IN_TOKENS = \\\"OPEN_INTEREST_IN_TOKENS\\\";\\n    string public constant COLLATERAL_SUM = \\\"COLLATERAL_SUM\\\";\\n    string public constant POOL_AMOUNT = \\\"POOL_AMOUNT\\\";\\n    string public constant POSITION_IMPACT_POOL_AMOUNT = \\\"POSITION_IMPACT_POOL_AMOUNT\\\";\\n    string public constant SWAP_IMPACT_POOL_AMOUNT = \\\"SWAP_IMPACT_POOL_AMOUNT\\\";\\n    string public constant PRICE_FEED = \\\"PRICE_FEED\\\";\\n    string public constant PRICE_FEED_PRECISION = \\\"PRICE_FEED_PRECISION\\\";\\n    string public constant STABLE_PRICE = \\\"STABLE_PRICE\\\";\\n    string public constant RESERVE_FACTOR = \\\"RESERVE_FACTOR\\\";\\n    string public constant FUNDING_FACTOR = \\\"FUNDING_FACTOR\\\";\\n    string public constant CUMULATIVE_FUNDING_FACTOR = \\\"CUMULATIVE_FUNDING_FACTOR\\\";\\n    string public constant CUMULATIVE_FUNDING_FACTOR_UPDATED_AT = \\\"CUMULATIVE_FUNDING_FACTOR_UPDATED_AT\\\";\\n    string public constant BORROWING_FACTOR = \\\"BORROWING_FACTOR\\\";\\n    string public constant CUMULATIVE_BORROWING_FACTOR = \\\"CUMULATIVE_BORROWING_FACTOR\\\";\\n    string public constant CUMULATIVE_BORROWING_FACTOR_UPDATED_AT = \\\"CUMULATIVE_BORROWING_FACTOR_UPDATED_AT\\\";\\n    string public constant TOTAL_BORROWING = \\\"TOTAL_BORROWING\\\";\\n\\n    string public constant ORACLE_ERROR = \\\"ORACLE_ERROR\\\";\\n    bytes32 public constant ORACLE_ERROR_KEY = keccak256(abi.encode(ORACLE_ERROR));\\n\\n    string public constant EMPTY_POSITION_ERROR = \\\"EMPTY_POSITION_ERROR\\\";\\n    bytes32 public constant EMPTY_POSITION_ERROR_KEY = keccak256(abi.encode(EMPTY_POSITION_ERROR));\\n\\n    string public constant FROZEN_ORDER_ERROR = \\\"FROZEN_ORDER_ERROR\\\";\\n    bytes32 public constant FROZEN_ORDER_ERROR_KEY = keccak256(abi.encode(FROZEN_ORDER_ERROR));\\n\\n    function depositGasLimitKey(bool singleToken) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            DEPOSIT_GAS_LIMIT,\\n            singleToken\\n        ));\\n    }\\n\\n    function withdrawalGasLimitKey(bool singleToken) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            WITHDRAWAL_GAS_LIMIT,\\n            singleToken\\n        ));\\n    }\\n\\n    function singleSwapGasLimitKey() internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SINGLE_SWAP_GAS_LIMIT\\n        ));\\n    }\\n\\n    function increaseOrderGasLimitKey() internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            INCREASE_ORDER_GAS_LIMIT\\n        ));\\n    }\\n\\n    function decreaseOrderGasLimitKey() internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            DECREASE_ORDER_GAS_LIMIT\\n        ));\\n    }\\n\\n    function swapOrderGasLimitKey() internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_ORDER_GAS_LIMIT\\n        ));\\n    }\\n\\n    function createDepositFeatureKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_DEPOSIT_FEATURE,\\n            module\\n        ));\\n    }\\n\\n    function executeDepositFeatureKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_DEPOSIT_FEATURE,\\n            module\\n        ));\\n    }\\n\\n    function createWithdrawalFeatureKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_WITHDRAWAL_FEATURE,\\n            module\\n        ));\\n    }\\n\\n    function executeWithdrawalFeatureKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_WITHDRAWAL_FEATURE,\\n            module\\n        ));\\n    }\\n\\n    function createOrderFeatureKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_ORDER_FEATURE,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    function executeOrderFeatureKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_ORDER_FEATURE,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    function updateOrderFeatureKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            UPDATE_ORDER_FEATURE,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    function cancelOrderFeatureKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_ORDER_FEATURE,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    function positionImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_FACTOR,\\n            market,\\n            isPositive\\n        ));\\n   }\\n\\n    function positionImpactExponentFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_EXPONENT_FACTOR,\\n            market\\n        ));\\n}\\n\\n    function positionFeeFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_FEE_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    function swapImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_IMPACT_FACTOR,\\n            market,\\n            isPositive\\n        ));\\n    }\\n\\n    function swapImpactExponentFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_IMPACT_EXPONENT_FACTOR,\\n            market\\n        ));\\n    }\\n\\n\\n    function swapFeeFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_FEE_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    function oraclePrecisionKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ORACLE_PRECISION,\\n            token\\n        ));\\n    }\\n\\n    function oracleTypeKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ORACLE_TYPE,\\n            token\\n        ));\\n    }\\n\\n    // market open interest\\n    function openInterestKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OPEN_INTEREST,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // market open interest in tokens\\n    function openInterestInTokensKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OPEN_INTEREST_IN_TOKENS,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // total collateral of positions\\n    function collateralSumKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            COLLATERAL_SUM,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // amount of tokens in market pool\\n    function poolAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POOL_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // amount of tokens in position impact pool\\n    function positionImpactPoolAmountKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_POOL_AMOUNT,\\n            market\\n        ));\\n    }\\n\\n    // amount of tokens in swap impact pool\\n    function swapImpactPoolAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_IMPACT_POOL_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    function reserveFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            RESERVE_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    function fundingFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    function cumulativeFundingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CUMULATIVE_FUNDING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    function cumulativeFundingFactorUpdatedAtKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CUMULATIVE_FUNDING_FACTOR_UPDATED_AT,\\n            market\\n        ));\\n    }\\n\\n    function borrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BORROWING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    function cumulativeBorrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CUMULATIVE_BORROWING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    function cumulativeBorrowingFactorUpdatedAtKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CUMULATIVE_BORROWING_FACTOR_UPDATED_AT,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    function totalBorrowingKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            TOTAL_BORROWING,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    function priceFeedKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRICE_FEED,\\n            token\\n        ));\\n    }\\n\\n    function priceFeedPrecisionKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRICE_FEED_PRECISION,\\n            token\\n        ));\\n    }\\n\\n    function stablePriceKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            STABLE_PRICE,\\n            token\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x5f945e17802f7c2569a2a22e3b2855bdcb1195d7bb2d6c58f9af1048e17c2291\",\"license\":\"BUSL-1.1\"},\"contracts/deposit/Deposit.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Deposit {\\n    struct Props {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address market;\\n        uint256 longTokenAmount;\\n        uint256 shortTokenAmount;\\n        uint256 minMarketTokens;\\n        uint256 updatedAtBlock;\\n        bool shouldConvertETH;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x37aaaf8bfd1aab3551997e83cf847d9bd0c256b87803555c79d1ba0316646612\",\"license\":\"BUSL-1.1\"},\"contracts/deposit/DepositStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../bank/StrictBank.sol\\\";\\nimport \\\"./Deposit.sol\\\";\\n\\ncontract DepositStore is StrictBank {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    mapping(bytes32 => Deposit.Props) internal deposits;\\n    EnumerableSet.Bytes32Set internal depositKeys;\\n\\n    constructor(RoleStore _roleStore) StrictBank(_roleStore) {}\\n\\n    function set(bytes32 key, Deposit.Props memory deposit) external onlyController {\\n        deposits[key] = deposit;\\n        depositKeys.add(key);\\n    }\\n\\n    function remove(bytes32 key) external onlyController {\\n        delete deposits[key];\\n        depositKeys.remove(key);\\n    }\\n\\n    function get(bytes32 key) external view returns (Deposit.Props memory) {\\n        return deposits[key];\\n    }\\n\\n    function getDepositCount() external view returns (uint256) {\\n        return depositKeys.length();\\n    }\\n\\n    function getDepositKeys(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return depositKeys.valuesAt(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0x57d658b028b801f512fd906f76d1c3de546f10fd463f95078cee0a783cd7d92d\",\"license\":\"BUSL-1.1\"},\"contracts/eth/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xdfa5c0f6a50050cdd4f7d13898e640271e6bd11c4e361ddefbff45a3b80f6bb2\",\"license\":\"BUSL-1.1\"},\"contracts/events/EventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"../order/Order.sol\\\";\\nimport \\\"../deposit/Deposit.sol\\\";\\nimport \\\"../pricing/SwapPricingUtils.sol\\\";\\nimport \\\"../pricing/PositionPricingUtils.sol\\\";\\n\\ncontract EventEmitter is RoleModule {\\n    event PositionIncrease(\\n        bytes32 key,\\n        address indexed account,\\n        address indexed market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 executionPrice,\\n        uint256 sizeDeltaInUsd,\\n        int256 collateralDeltaAmount\\n    );\\n    event PositionDecrease(\\n        bytes32 key,\\n        address indexed account,\\n        address indexed market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 executionPrice,\\n        uint256 sizeDeltaInUsd,\\n        int256 collateralDeltaAmount,\\n        int256 remainingCollateralAmount,\\n        int256 outputAmount,\\n        int256 realizedPnlAmount\\n    );\\n    // PositionLiquidated?\\n\\n    event DepositCreated(bytes32 key, Deposit.Props deposit);\\n    event DepositExecuted(bytes32 key);\\n    event DepositCancelled(bytes32 key);\\n\\n    event WithdrawalCreated(bytes32 key, Withdrawal.Props withdrawal);\\n    event WithdrawalExecuted(bytes32 key);\\n    event WithdrawalCancelled(bytes32 key);\\n\\n    event OrderCreated(bytes32 key, Order.Props order);\\n    event OrderUpdated(\\n        bytes32 key,\\n        uint256 sizeDeltaUsd,\\n        uint256 acceptablePrice,\\n        int256 acceptableUsdAdjustment\\n    );\\n    event OrderCancelled(bytes32 key, bytes32 reason);\\n    event OrderExecuted(bytes32 key);\\n    event OrderFrozen(bytes32 key, bytes32 reason);\\n    // event OrderCallback();\\n\\n    // event SetPricePrecision\\n\\n    event SwapFeesCollected(bytes32 action, SwapPricingUtils.SwapFees fees);\\n    event PositionFeesCollected(bool isIncrease, PositionPricingUtils.PositionFees fees);\\n\\n    event PoolAmountUpdated(address market, address token, int256 delta, uint256 nextValue);\\n    event SwapImpactPoolAmountUpdated(address market, address token, int256 delta, uint256 nextValue);\\n    event OpenInterestUpdated(address market, bool isLong, int256 delta, uint256 nextValue);\\n\\n    event CollateralSumDelta(\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 collateralDeltaAmount\\n    );\\n\\n    event OraclePriceUpdated(address token, uint256 minPrice, uint256 maxPrice, bool isPrimary, bool isPriceFeed);\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    function emitPoolAmountUpdated(address market, address token, int256 delta, uint256 nextValue) external onlyController {\\n        emit PoolAmountUpdated(market, token, delta, nextValue);\\n    }\\n\\n    function emitSwapImpactPoolAmountUpdated(address market, address token, int256 delta, uint256 nextValue) external onlyController {\\n        emit SwapImpactPoolAmountUpdated(market, token, delta, nextValue);\\n    }\\n\\n    function emitOpenInterestUpdated(address market, bool isLong, int256 delta, uint256 nextValue) external onlyController {\\n        emit OpenInterestUpdated(market, isLong, delta, nextValue);\\n    }\\n\\n    function emitCollateralSumDelta(\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 collateralDeltaAmount\\n    ) external onlyController {\\n        emit CollateralSumDelta(market, collateralToken, isLong, collateralDeltaAmount);\\n    }\\n\\n    function emitOrderCreated(bytes32 key, Order.Props memory order) external onlyController {\\n        emit OrderCreated(key, order);\\n    }\\n\\n    function emitOrderExecuted(bytes32 key) external onlyController {\\n        emit OrderExecuted(key);\\n    }\\n\\n    function emitOrderUpdated(\\n        bytes32 key,\\n        uint256 sizeDeltaUsd,\\n        uint256 acceptablePrice,\\n        int256 acceptableUsdAdjustment\\n    ) external onlyController {\\n        emit OrderUpdated(key, sizeDeltaUsd, acceptablePrice, acceptableUsdAdjustment);\\n    }\\n\\n    function emitOrderCancelled(bytes32 key, bytes32 reason) external onlyController {\\n        emit OrderCancelled(key, reason);\\n    }\\n\\n    function emitOrderFrozen(bytes32 key, bytes32 reason) external onlyController {\\n        emit OrderFrozen(key, reason);\\n    }\\n\\n    function emitDepositCreated(bytes32 key, Deposit.Props memory deposit) external onlyController {\\n        emit DepositCreated(key, deposit);\\n    }\\n\\n    function emitDepositExecuted(bytes32 key) external onlyController {\\n        emit DepositExecuted(key);\\n    }\\n\\n    function emitDepositCancelled(bytes32 key) external onlyController {\\n        emit DepositCancelled(key);\\n    }\\n\\n    function emitWithdrawalCreated(bytes32 key, Withdrawal.Props memory withdrawal) external onlyController {\\n        emit WithdrawalCreated(key, withdrawal);\\n    }\\n\\n    function emitWithdrawalExecuted(bytes32 key) external onlyController {\\n        emit WithdrawalExecuted(key);\\n    }\\n\\n    function emitWithdrawalCancelled(bytes32 key) external onlyController {\\n        emit WithdrawalCancelled(key);\\n    }\\n\\n    function emitSwapFeesCollected(bytes32 action, SwapPricingUtils.SwapFees calldata fees) external onlyController {\\n        emit SwapFeesCollected(action, fees);\\n    }\\n\\n    function emitPositionFeesCollected(bool isIncrease, PositionPricingUtils.PositionFees calldata fees) external onlyController {\\n        emit PositionFeesCollected(isIncrease, fees);\\n    }\\n\\n    function emitOraclePriceUpdated(address token, uint256 minPrice, uint256 maxPrice, bool isPrimary, bool isPriceFeed) external onlyController {\\n        emit OraclePriceUpdated(token, minPrice, maxPrice, isPrimary, isPriceFeed);\\n    }\\n\\n    function emitPositionIncrease(\\n        bytes32 key,\\n        address account,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 executionPrice,\\n        uint256 sizeDeltaUsd,\\n        int256 collateralDeltaAmount\\n    ) external onlyController {\\n        emit PositionIncrease(\\n            key,\\n            account,\\n            market,\\n            collateralToken,\\n            isLong,\\n            executionPrice,\\n            sizeDeltaUsd,\\n            collateralDeltaAmount\\n        );\\n    }\\n\\n    function emitPositionDecrease(\\n        bytes32 key,\\n        address account,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 executionPrice,\\n        uint256 sizeDeltaUsd,\\n        int256 collateralDeltaAmount,\\n        int256 remainingCollateralAmount,\\n        int256 outputAmount,\\n        int256 realizedPnlAmount\\n    ) external onlyController {\\n        emit PositionDecrease(\\n            key,\\n            account,\\n            market,\\n            collateralToken,\\n            isLong,\\n            executionPrice,\\n            sizeDeltaUsd,\\n            collateralDeltaAmount,\\n            remainingCollateralAmount,\\n            outputAmount,\\n            realizedPnlAmount\\n        );\\n    }\\n\\n    function log1(bytes32 topic1, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log1(add(data, 32), len, topic1)\\n        }\\n    }\\n\\n    function log2(bytes32 topic1, bytes32 topic2, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log2(add(data, 32), len, topic1, topic2)\\n        }\\n    }\\n\\n    function log3(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log3(add(data, 32), len, topic1, topic2, topic3)\\n        }\\n    }\\n\\n    function log4(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log4(add(data, 32), len, topic1, topic2, topic3, topic4)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3146f5c1c335d3046d0d3bcd23a8ae41bac7634375e4e8d92f2c1b5d4a89f4d4\",\"license\":\"BUSL-1.1\"},\"contracts/fee/FeeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ncontract FeeReceiver {\\n    event FeeReceived(bytes32 key, address token, uint256 amount);\\n\\n    function notifyFeeReceived(bytes32 key, address token, uint256 amount) external {\\n        emit FeeReceived(key, token, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5f16e156586b06f5c3965c2850d8444680b2eedf4891ea9f22ae108dfda1c864\",\"license\":\"BUSL-1.1\"},\"contracts/fee/FeeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary FeeUtils {\\n    bytes32 public constant DEPOSIT_FEE = keccak256(\\\"DEPOSIT_FEE\\\");\\n    bytes32 public constant WITHDRAWAL_FEE = keccak256(\\\"WITHDRAWAL_FEE\\\");\\n    bytes32 public constant SWAP_FEE = keccak256(\\\"SWAP_FEE\\\");\\n    bytes32 public constant POSITION_FEE = keccak256(\\\"POSITION_FEE\\\");\\n}\\n\",\"keccak256\":\"0xea0d8c430c23fe07d5835db8b600484822be04dd55e23b44f8e8d8d74c0d39e2\",\"license\":\"BUSL-1.1\"},\"contracts/gov/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    event SetGov(address prevGov, address nextGov);\\n\\n    error Unauthorized(address msgSender, string role);\\n\\n    constructor() {\\n        _setGov(msg.sender);\\n    }\\n\\n    modifier onlyGov() {\\n        if (msg.sender != gov) {\\n            revert Unauthorized(msg.sender, \\\"GOV\\\");\\n        }\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        _setGov(_gov);\\n    }\\n\\n    function _setGov(address _gov) internal {\\n        address prevGov = gov;\\n        gov = _gov;\\n\\n        emit SetGov(prevGov, _gov);\\n    }\\n}\\n\",\"keccak256\":\"0x2fc683a981692f88346e2e0c936bd52a0304a62ee73524c93baf19a68c99087a\",\"license\":\"BUSL-1.1\"},\"contracts/market/Market.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Market {\\n    struct Props {\\n        address marketToken;\\n        address indexToken;\\n        address longToken;\\n        address shortToken;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0xf4bc9709a5689f44263db43c0dc492d9ccef32c49fb4bf16d6f6021817bf9c49\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Market.sol\\\";\\nimport \\\"../role/RoleModule.sol\\\";\\n\\ncontract MarketStore is RoleModule {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using Market for Market.Props;\\n\\n    mapping(address => Market.Props) internal markets;\\n    mapping(bytes32 => address) public marketAddresses;\\n    EnumerableSet.AddressSet internal marketTokens;\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    function set(address marketToken, Market.Props memory market) external onlyController {\\n        markets[marketToken] = market;\\n        marketTokens.add(marketToken);\\n\\n        bytes32 marketKey = keccak256(abi.encodePacked(market.indexToken, market.longToken, market.shortToken));\\n        marketAddresses[marketKey] = marketToken;\\n    }\\n\\n    function remove(address marketToken) external onlyController {\\n        Market.Props memory market = markets[marketToken];\\n\\n        delete markets[marketToken];\\n        marketTokens.remove(marketToken);\\n\\n        bytes32 marketKey = keccak256(abi.encodePacked(market.indexToken, market.longToken, market.shortToken));\\n        delete marketAddresses[marketKey];\\n    }\\n\\n    function contains(address marketToken) external view returns (bool) {\\n        return marketTokens.contains(marketToken);\\n    }\\n\\n    function get(address marketToken) external view returns (Market.Props memory) {\\n        return markets[marketToken];\\n    }\\n\\n    function getMarketToken(address indexToken, address longToken, address shortToken) external view returns (address) {\\n        bytes32 marketKey = keccak256(abi.encodePacked(indexToken, longToken, shortToken));\\n        return marketAddresses[marketKey];\\n    }\\n\\n    function getMarketCount() external view returns (uint256) {\\n        return marketTokens.length();\\n    }\\n\\n    function getMarketKeys(uint256 start, uint256 end) external view returns (address[] memory) {\\n        return marketTokens.valuesAt(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0xdd44d2d085f781966f9b743677d7dc149a9de14240444cacda6a7b0db516d534\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../bank/Bank.sol\\\";\\n\\ncontract MarketToken is ERC20, Bank {\\n    constructor(RoleStore _roleStore) ERC20(\\\"GMX Synthetic Market\\\", \\\"GD\\\") Bank(_roleStore) {\\n    }\\n\\n    function mint(address account, uint256 amount) external onlyController {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyController {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe558ea742950b9037106ed93936847158ce798a18e3b5a0b8da8b582fac15575\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../events/EventEmitter.sol\\\";\\nimport \\\"../bank/StrictBank.sol\\\";\\n\\nimport \\\"../deposit/Deposit.sol\\\";\\nimport \\\"../deposit/DepositStore.sol\\\";\\nimport \\\"../withdrawal/Withdrawal.sol\\\";\\n\\nimport \\\"../market/Market.sol\\\";\\nimport \\\"../market/MarketToken.sol\\\";\\nimport \\\"../market/MarketStore.sol\\\";\\nimport \\\"../position/Position.sol\\\";\\nimport \\\"../position/PositionStore.sol\\\";\\nimport \\\"../order/Order.sol\\\";\\n\\nimport \\\"../oracle/Oracle.sol\\\";\\nimport \\\"../price/Price.sol\\\";\\n\\nimport \\\"../fee/FeeReceiver.sol\\\";\\nimport \\\"../fee/FeeUtils.sol\\\";\\n\\nimport \\\"../utils/Calc.sol\\\";\\nimport \\\"../utils/Precision.sol\\\";\\n\\nlibrary MarketUtils {\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n\\n    using Deposit for Deposit.Props;\\n    using Market for Market.Props;\\n    using Position for Position.Props;\\n    using Order for Order.Props;\\n    using Price for Price.Props;\\n\\n    // cap max funding APR at 1000%\\n    uint256 public constant MAX_ANNUAL_FUNDING_FACTOR = 1000 * Precision.FLOAT_PRECISION;\\n\\n    // 0.0000000001 USD\\n    uint256 public constant MAX_USD_IMPRECISION = 10 ** 20;\\n\\n    struct MarketPrices {\\n        Price.Props indexTokenPrice;\\n        Price.Props longTokenPrice;\\n        Price.Props shortTokenPrice;\\n    }\\n\\n    error EmptyMarket();\\n    error InsufficientPoolAmount(uint256 poolAmount, uint256 amount);\\n    error InsufficientReserve(uint256 reservedUsd, uint256 maxReservedUsd);\\n\\n    function getMarketTokenPrice(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        Price.Props memory longTokenPrice,\\n        Price.Props memory shortTokenPrice,\\n        Price.Props memory indexTokenPrice,\\n        bool maximize\\n    ) internal view returns (uint256) {\\n        uint256 poolValue = getPoolValue(dataStore, market, longTokenPrice, shortTokenPrice, indexTokenPrice, maximize);\\n        if (poolValue == 0) { return 0; }\\n\\n        uint256 supply = getMarketTokenSupply(MarketToken(payable(market.marketToken)));\\n\\n        // it may be possible for supply to be zero here\\n        return poolValue * Precision.WEI_PRECISION / supply;\\n    }\\n\\n    function getMarketTokenSupply(MarketToken marketToken) internal view returns (uint256) {\\n        return marketToken.totalSupply();\\n    }\\n\\n    function getOutputToken(address inputToken, Market.Props memory market) internal pure returns (address) {\\n        if (inputToken == market.longToken) {\\n            return market.shortToken;\\n        }\\n        if (inputToken == market.shortToken) {\\n            return market.longToken;\\n        }\\n\\n        revert(\\\"MarketUtils: invalid inputToken\\\");\\n    }\\n\\n    function getCachedTokenPrice(address token, Market.Props memory market, MarketPrices memory prices) internal pure returns (Price.Props memory) {\\n        if (token == market.longToken) {\\n            return prices.longTokenPrice;\\n        }\\n        if (token == market.shortToken) {\\n            return prices.shortTokenPrice;\\n        }\\n        if (token == market.indexToken) {\\n            return prices.indexTokenPrice;\\n        }\\n\\n        revert(\\\"MarketUtils: invalid token\\\");\\n    }\\n\\n    // the secondary price for market.indexToken is overwritten for certain order\\n    // types, use this value instead of the primary price for positions\\n    function getMarketPricesForPosition(Market.Props memory market, Oracle oracle) internal view returns (MarketPrices memory) {\\n        return MarketPrices(\\n            oracle.getLatestPrice(market.indexToken),\\n            oracle.getLatestPrice(market.longToken),\\n            oracle.getLatestPrice(market.shortToken)\\n        );\\n    }\\n\\n    // the value of a market's liquidity pool is the worth of the liquidity provider tokens in the pool - pending trader pnl\\n    // we use the token index prices to calculate this and ignore price impact since if all positions were closed the\\n    // net price impact should be zero\\n    // when minting liquidity provider tokens, the price impact of the token in should be considered\\n    // when redeeming liquidity provider tokens, the price impact of the token out should be considered\\n    function getPoolValue(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        Price.Props memory longTokenPrice,\\n        Price.Props memory shortTokenPrice,\\n        Price.Props memory indexTokenPrice,\\n        bool maximize\\n    ) internal view returns (uint256) {\\n        uint256 longTokenAmount = getPoolAmount(dataStore, market.marketToken, market.longToken);\\n        uint256 shortTokenAmount = getPoolAmount(dataStore, market.marketToken, market.shortToken);\\n\\n        uint256 value;\\n\\n        value = longTokenAmount * longTokenPrice.pickPrice(maximize);\\n        value += shortTokenAmount * shortTokenPrice.pickPrice(maximize);\\n\\n        value += getTotalBorrowingFees(dataStore, market.marketToken, true);\\n        value += getTotalBorrowingFees(dataStore, market.marketToken, false);\\n\\n        // !maximize should be used to calculate this as a larger pnl leads to a smaller pool value\\n        // and a smaller pnl leads to a larger pool value\\n        int256 pnl = getNetPnl(dataStore, market.marketToken, indexTokenPrice, !maximize);\\n\\n        return Calc.sum(value, -pnl);\\n    }\\n\\n    function getNetPnl(DataStore dataStore, address market, Price.Props memory indexTokenPrice, bool maximize) internal view returns (int256) {\\n        int256 longPnl = getPnl(dataStore, market, indexTokenPrice, true, maximize);\\n        int256 shortPnl = getPnl(dataStore, market, indexTokenPrice, false, maximize);\\n\\n        return longPnl + shortPnl;\\n    }\\n\\n\\n    function getPnl(DataStore dataStore, address market, Price.Props memory indexTokenPrice, bool isLong, bool maximize) internal view returns (int256) {\\n        int256 openInterest = getOpenInterest(dataStore, market, isLong).toInt256();\\n        uint256 openInterestInTokens = getOpenInterestInTokens(dataStore, market, isLong);\\n        if (openInterest == 0 || openInterestInTokens == 0) {\\n            return 0;\\n        }\\n\\n        uint256 price = indexTokenPrice.pickPriceForPnl(isLong, maximize);\\n\\n        // openInterest is the cost of all positions, openInterestValue is the current worth of all positions\\n        int256 openInterestValue = (openInterestInTokens * price).toInt256();\\n        int256 pnl = isLong ? openInterestValue - openInterest : openInterest - openInterestValue;\\n\\n        return pnl;\\n    }\\n\\n    function getPoolAmount(DataStore dataStore, address market, address token) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.poolAmountKey(market, token));\\n    }\\n\\n    function applyDeltaToPoolAmount(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        int256 delta\\n    ) internal {\\n        uint256 nextValue = dataStore.applyDeltaToUint(\\n            Keys.poolAmountKey(market, token),\\n            delta\\n        );\\n\\n        eventEmitter.emitPoolAmountUpdated(market, token, delta, nextValue);\\n    }\\n\\n\\n    function getSwapImpactPoolAmount(DataStore dataStore, address market, address token) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.swapImpactPoolAmountKey(market, token));\\n    }\\n\\n    function applyDeltaToSwapImpactPool(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        int256 delta\\n    ) internal {\\n        uint256 nextValue = dataStore.applyDeltaToUint(\\n            Keys.swapImpactPoolAmountKey(market, token),\\n            delta\\n        );\\n\\n        eventEmitter.emitSwapImpactPoolAmountUpdated(market, token, delta, nextValue);\\n    }\\n\\n    function applyDeltaToOpenInterest(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        bool isLong,\\n        int256 delta\\n    ) internal {\\n        uint256 nextValue = dataStore.applyDeltaToUint(\\n            Keys.openInterestKey(market, isLong),\\n            delta\\n        );\\n\\n        eventEmitter.emitOpenInterestUpdated(market, isLong, delta, nextValue);\\n    }\\n\\n    function applyDeltaToCollateralSum(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 collateralDeltaAmount\\n    ) internal {\\n        dataStore.applyDeltaToUint(\\n            Keys.collateralSumKey(market, collateralToken, isLong),\\n            collateralDeltaAmount\\n        );\\n\\n        eventEmitter.emitCollateralSumDelta(market, collateralToken, isLong, collateralDeltaAmount);\\n    }\\n\\n    // in case of late liquidations, there may be insufficient collateral to pay for funding fees\\n    // additionally since funding fees are accounted for in USD while collateral amounts may be in\\n    // non stablecoins, it is possible that the amount to be paid out exceeds the worth of the collateral\\n    // in the pool, the fees in the impact pool could be used to cover any shortfalls\\n    // alternatively the pay out of funding fees could be based on the usd value of pending funding fees\\n    // and the token value of paid funding fees\\n    function updateCumulativeFundingFactors(DataStore dataStore, address market) internal {\\n        (int256 longFundingFactor, int256 shortFundingFactor) = getNextCumulativeFundingFactors(dataStore, market);\\n        setCumulativeFundingFactor(dataStore, market, true, longFundingFactor);\\n        setCumulativeFundingFactor(dataStore, market, false, shortFundingFactor);\\n        dataStore.setUint(Keys.cumulativeFundingFactorUpdatedAtKey(market), block.timestamp);\\n    }\\n\\n    function updateCumulativeBorrowingFactor(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bool isLong\\n    ) internal {\\n        uint256 borrowingFactor = getNextCumulativeBorrowingFactor(dataStore, market, prices, isLong);\\n        setCumulativeBorrowingFactor(dataStore, market.marketToken, isLong, borrowingFactor);\\n        dataStore.setUint(Keys.cumulativeBorrowingFactorUpdatedAtKey(market.marketToken, isLong), block.timestamp);\\n    }\\n\\n    function applyDeltaToOpenInterestInTokens(\\n        DataStore dataStore,\\n        address market,\\n        bool isLong,\\n        int256 sizeDeltaInTokens\\n    ) internal {\\n        uint256 openInterestInTokens = getOpenInterestInTokens(dataStore, market, isLong);\\n        uint256 nextOpenInterestInTokens = Calc.sum(openInterestInTokens, sizeDeltaInTokens);\\n        dataStore.setUint(Keys.openInterestInTokensKey(market, isLong), nextOpenInterestInTokens);\\n    }\\n\\n    function validateReserve(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bool isLong\\n    ) internal view {\\n        address reserveToken = isLong ? market.longToken : market.shortToken;\\n        uint256 reservePoolAmount = getPoolAmount(dataStore, market.marketToken, reserveToken);\\n        uint256 reserveTokenPrice = isLong ? prices.longTokenPrice.min : prices.shortTokenPrice.min;\\n        uint256 reservePoolUsd = reservePoolAmount * reserveTokenPrice;\\n\\n        uint256 reserveFactor = getReserveFactor(dataStore, market.marketToken, isLong);\\n        uint256 maxReservedUsd = Precision.applyFactor(reservePoolUsd, reserveFactor);\\n\\n        uint256 reservedUsd;\\n        if (isLong) {\\n            // for longs calculate the reserved USD based on the open interest and current indexTokenPrice\\n            // this works well for e.g. an ETH / USD market with long collateral token as WETH\\n            // the available amount to be reserved would scale with the price of ETH\\n            // this also works for e.g. a SOL / USD market with long collateral token as WETH\\n            // if the price of SOL increases more than the price of ETH, additional amounts would be\\n            // automatically reserved\\n            uint256 openInterestInTokens = getOpenInterestInTokens(dataStore, market.marketToken, isLong);\\n            reservedUsd = openInterestInTokens * prices.indexTokenPrice.max;\\n        } else {\\n            // for shorts use the open interest as the reserved USD value\\n            // this works well for e.g. an ETH / USD market with short collateral token as USDC\\n            // the available amount to be reserved would not change with the price of ETH\\n            reservedUsd = getOpenInterest(dataStore, market.marketToken, isLong);\\n        }\\n\\n        if (reservedUsd > maxReservedUsd) {\\n            revert InsufficientReserve(reservedUsd, maxReservedUsd);\\n        }\\n    }\\n\\n    function applySwapImpactWithCap(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        Price.Props memory tokenPrice,\\n        int256 priceImpactUsd\\n    ) internal returns (int256) {\\n        // positive impact: minimize impactAmount, use tokenPrice.max\\n        // negative impact: maximize impactAmount, use tokenPrice.min\\n        uint256 price = priceImpactUsd > 0 ? tokenPrice.max : tokenPrice.min;\\n        int256 impactAmount = priceImpactUsd / price.toInt256();\\n\\n        if (impactAmount > 0) {\\n            int256 maxImpactAmount = getSwapImpactPoolAmount(dataStore, market, token).toInt256();\\n            if (maxImpactAmount > impactAmount) {\\n                impactAmount = maxImpactAmount;\\n            }\\n        }\\n\\n        applyDeltaToSwapImpactPool(\\n            dataStore,\\n            eventEmitter,\\n            market,\\n            token,\\n            impactAmount\\n        );\\n\\n        return impactAmount;\\n    }\\n\\n    function getFundingFees(DataStore dataStore, Position.Props memory position) internal view returns (int256) {\\n        int256 cumulativeFundingFactor = getCumulativeFundingFactor(dataStore, position.market, position.isLong);\\n        int256 diffFactor = position.fundingFactor - cumulativeFundingFactor;\\n        return Precision.applyFactor(position.sizeInUsd, diffFactor);\\n    }\\n\\n    function getBorrowingFees(DataStore dataStore, Position.Props memory position) internal view returns (uint256) {\\n        uint256 cumulativeBorrowingFactor = getCumulativeBorrowingFactor(dataStore, position.market, position.isLong);\\n        uint256 diffFactor = cumulativeBorrowingFactor - position.borrowingFactor;\\n        return Precision.applyFactor(position.sizeInUsd, diffFactor);\\n    }\\n\\n    function getOpenInterest(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.openInterestKey(market, isLong));\\n    }\\n\\n    function getOpenInterestInTokens(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.openInterestInTokensKey(market, isLong));\\n    }\\n\\n    // getOpenInterestInTokens * tokenPrice would not reflect pending positive pnl\\n    // from short positions, getOpenInterestWithPnl should be used if that info is needed\\n    function getOpenInterestWithPnl(DataStore dataStore, address market, Price.Props memory indexTokenPrice, bool isLong, bool maximize) internal view returns (uint256) {\\n        uint256 openInterest = getOpenInterest(dataStore, market, isLong);\\n        int256 pnl = getPnl(dataStore, market, indexTokenPrice, isLong, maximize);\\n        return Calc.sum(openInterest, pnl);\\n    }\\n\\n    function getCollateralSum(DataStore dataStore, address market, address collateralToken,  bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.collateralSumKey(market, collateralToken, isLong));\\n    }\\n\\n    function getReserveFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.reserveFactorKey(market, isLong));\\n    }\\n\\n    function getFundingFactor(DataStore dataStore, address market) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.fundingFactorKey(market));\\n    }\\n\\n    function getCumulativeFundingFactor(DataStore dataStore, address market, bool isLong) internal view returns (int256) {\\n        return dataStore.getInt(Keys.cumulativeFundingFactorKey(market, isLong));\\n    }\\n\\n    function setCumulativeFundingFactor(DataStore dataStore, address market, bool isLong, int256 value) internal {\\n        dataStore.setInt(Keys.cumulativeFundingFactorKey(market, isLong), value);\\n    }\\n\\n    function getCumulativeFundingFactorUpdatedAt(DataStore dataStore, address market) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.cumulativeFundingFactorUpdatedAtKey(market));\\n    }\\n\\n    function getSecondsSinceCumulativeFundingFactorUpdated(DataStore dataStore, address market) internal view returns (uint256) {\\n        uint256 updatedAt = getCumulativeFundingFactorUpdatedAt(dataStore, market);\\n        if (updatedAt == 0) { return 0; }\\n        return block.timestamp - updatedAt;\\n    }\\n\\n    function getBorrowingFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.borrowingFactorKey(market, isLong));\\n    }\\n\\n    function getCumulativeBorrowingFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.cumulativeBorrowingFactorKey(market, isLong));\\n    }\\n\\n    function setCumulativeBorrowingFactor(DataStore dataStore, address market, bool isLong, uint256 value) internal {\\n        dataStore.setUint(Keys.cumulativeBorrowingFactorKey(market, isLong), value);\\n    }\\n\\n    function getCumulativeBorrowingFactorUpdatedAt(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.cumulativeBorrowingFactorUpdatedAtKey(market, isLong));\\n    }\\n\\n    function getSecondsSinceCumulativeBorrowingFactorUpdated(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        uint256 updatedAt = getCumulativeBorrowingFactorUpdatedAt(dataStore, market, isLong);\\n        if (updatedAt == 0) { return 0; }\\n        return block.timestamp - updatedAt;\\n    }\\n\\n    function updateTotalBorrowing(\\n        DataStore dataStore,\\n        address market,\\n        bool isLong,\\n        uint256 prevPositionSizeInUsd,\\n        uint256 prevPositionBorrowingFactor,\\n        uint256 nextPositionSizeInUsd,\\n        uint256 nextPositionBorrowingFactor\\n    ) internal {\\n        uint256 totalBorrowing = getNextTotalBorrowing(\\n            dataStore,\\n            market,\\n            isLong,\\n            prevPositionSizeInUsd,\\n            prevPositionBorrowingFactor,\\n            nextPositionSizeInUsd,\\n            nextPositionBorrowingFactor\\n        );\\n\\n        setTotalBorrowing(dataStore, market, isLong, totalBorrowing);\\n    }\\n\\n    function getNextTotalBorrowing(\\n        DataStore dataStore,\\n        address market,\\n        bool isLong,\\n        uint256 prevPositionSizeInUsd,\\n        uint256 prevPositionBorrowingFactor,\\n        uint256 nextPositionSizeInUsd,\\n        uint256 nextPositionBorrowingFactor\\n    ) internal view returns (uint256) {\\n        uint256 totalBorrowing = getTotalBorrowing(dataStore, market, isLong);\\n        totalBorrowing -= prevPositionSizeInUsd * prevPositionBorrowingFactor;\\n        totalBorrowing += nextPositionSizeInUsd * nextPositionBorrowingFactor;\\n\\n        return totalBorrowing;\\n    }\\n\\n    function getNextCumulativeFundingFactors(DataStore dataStore, address market) internal view returns (int256, int256) {\\n        uint256 durationInSeconds = getSecondsSinceCumulativeFundingFactorUpdated(dataStore, market);\\n        uint256 fundingFactor = getFundingFactor(dataStore, market);\\n\\n        uint256 longOpenInterest = getOpenInterest(dataStore, market, true);\\n        uint256 shortOpenInterest = getOpenInterest(dataStore, market, false);\\n\\n        int256 longFundingFactor = getCumulativeFundingFactor(dataStore, market, true);\\n        int256 shortFundingFactor = getCumulativeFundingFactor(dataStore, market, false);\\n\\n        if (longOpenInterest == 0 || shortOpenInterest == 0) {\\n            return (longFundingFactor, shortFundingFactor);\\n        }\\n\\n        uint256 diffUsd = Calc.diff(longOpenInterest, shortOpenInterest);\\n        uint256 totalOpenInterest = longOpenInterest + shortOpenInterest;\\n        int256 adjustedFactor = (fundingFactor * diffUsd / totalOpenInterest * durationInSeconds).toInt256();\\n\\n        if (longOpenInterest > shortOpenInterest) {\\n            // negative funding fee for long positions\\n            longFundingFactor += adjustedFactor;\\n            // capped positive funding fee for short positions\\n            shortFundingFactor -= getCappedFundingFactor(adjustedFactor, longOpenInterest, shortOpenInterest, durationInSeconds);\\n        } else {\\n            // negative funding fee for short positions\\n            shortFundingFactor += adjustedFactor;\\n            // positive funding fee for long positions\\n            longFundingFactor -= getCappedFundingFactor(adjustedFactor, shortOpenInterest, longOpenInterest, durationInSeconds);\\n        }\\n\\n        return (longFundingFactor, shortFundingFactor);\\n    }\\n\\n    function getNextCumulativeBorrowingFactor(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bool isLong\\n    ) internal view returns (uint256) {\\n        uint256 durationInSeconds = getSecondsSinceCumulativeBorrowingFactorUpdated(dataStore, market.marketToken, isLong);\\n        uint256 borrowingFactor = getBorrowingFactor(dataStore, market.marketToken, isLong);\\n\\n        uint256 openInterestWithPnl = getOpenInterestWithPnl(dataStore, market.marketToken, prices.indexTokenPrice, isLong, true);\\n\\n        uint256 poolAmount = getPoolAmount(dataStore, market.marketToken, isLong ? market.longToken : market.shortToken);\\n        uint256 poolTokenPrice = isLong ? prices.longTokenPrice.min : prices.shortTokenPrice.min;\\n        uint256 poolUsd = poolAmount * poolTokenPrice;\\n\\n        uint256 adjustedFactor = durationInSeconds * borrowingFactor * openInterestWithPnl / poolUsd;\\n        uint256 cumulativeBorrowingFactor = getCumulativeBorrowingFactor(dataStore, market.marketToken, isLong);\\n\\n        return cumulativeBorrowingFactor + adjustedFactor;\\n    }\\n\\n    // cap the max factor to avoid overflow\\n    function getCappedFundingFactor(\\n        int256 adjustedFactor,\\n        uint256 multiplier,\\n        uint256 divisor,\\n        uint256 durationInSeconds\\n    ) internal pure returns (int256) {\\n        if (divisor == 0) { return 0; }\\n\\n        int256 factor = adjustedFactor * multiplier.toInt256() / divisor.toInt256();\\n        int256 maxFactor = (MAX_ANNUAL_FUNDING_FACTOR * durationInSeconds / (365 days)).toInt256();\\n\\n        if (factor > maxFactor) {\\n            return maxFactor;\\n        }\\n\\n        return factor;\\n    }\\n\\n    function getTotalBorrowingFees(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        uint256 openInterest = getOpenInterest(dataStore, market, isLong);\\n        uint256 cumulativeBorrowingFactor = getCumulativeBorrowingFactor(dataStore, market, isLong);\\n        uint256 totalBorrowing = getTotalBorrowing(dataStore, market, isLong);\\n        return openInterest * cumulativeBorrowingFactor - totalBorrowing;\\n    }\\n\\n    // sum of position.borrowingFactor * position.size for all positions of the market\\n    // if funding is 100% for 100 years, the cumulativeBorrowingFactor could be as high as 100 * 1000 * (10 ** 30)\\n    // since position.size is a USD value with 30 decimals, under this scenario, there may be overflow issues\\n    // if open interest exceeds (2 ** 256) / (10 ** 30) / (100 * 100 * (10 ** 30)) => 11,579,209,000,000 USD\\n    function getTotalBorrowing(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.totalBorrowingKey(market, isLong));\\n    }\\n\\n    function setTotalBorrowing(DataStore dataStore, address market, bool isLong, uint256 value) internal returns (uint256) {\\n        return dataStore.setUint(Keys.totalBorrowingKey(market, isLong), value);\\n    }\\n\\n    function usdToMarketTokenAmount(\\n        uint256 usdValue,\\n        uint256 poolValue,\\n        uint256 supply\\n    ) internal pure returns (uint256) {\\n        if (supply == 0 || poolValue == 0) {\\n            return Precision.floatToWei(usdValue);\\n        }\\n\\n        // round market tokens down\\n        return supply * usdValue / poolValue;\\n    }\\n\\n    function marketTokenAmountToUsd(\\n        uint256 marketTokenAmount,\\n        uint256 poolValue,\\n        uint256 supply\\n    ) internal pure returns (uint256) {\\n        if (supply == 0 || poolValue == 0) {\\n            return 0;\\n        }\\n\\n        return marketTokenAmount * poolValue / supply;\\n    }\\n\\n    function validateNonEmptyMarket(Market.Props memory market) internal pure {\\n        if (market.marketToken == address(0)) {\\n            revert EmptyMarket();\\n        }\\n    }\\n\\n    function getMarkets(MarketStore marketStore, address[] memory swapPath) internal view returns (Market.Props[] memory) {\\n        Market.Props[] memory markets = new Market.Props[](swapPath.length);\\n\\n        for (uint256 i = 0; i < swapPath.length; i++) {\\n            Market.Props memory market = marketStore.get(swapPath[i]);\\n            validateNonEmptyMarket(market);\\n            markets[i] = market;\\n        }\\n\\n        return markets;\\n    }\\n}\\n\",\"keccak256\":\"0x71b0f866c7ab39a0d4688fb4a08eddd8d2183a802ebfca4092ed34833d7830a2\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPriceFeed {\\n    function latestRoundData() external view returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x76b5b9387563dab04c0ad2e47de7669f5a37ebc087c8f288f9432f116c89e7cd\",\"license\":\"MIT\"},\"contracts/oracle/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"../role/RoleModule.sol\\\";\\n\\nimport \\\"./OracleStore.sol\\\";\\nimport \\\"./OracleUtils.sol\\\";\\nimport \\\"./IPriceFeed.sol\\\";\\nimport \\\"../price/Price.sol\\\";\\n\\nimport \\\"../chain/Chain.sol\\\";\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\nimport \\\"../events/EventEmitter.sol\\\";\\n\\nimport \\\"../utils/Bits.sol\\\";\\nimport \\\"../utils/Array.sol\\\";\\nimport \\\"../utils/Precision.sol\\\";\\n\\ncontract Oracle is RoleModule {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using Price for Price.Props;\\n\\n    struct _SetPricesCache {\\n        uint256 minBlockConfirmations;\\n        uint256 prevOracleBlockNumber;\\n        uint256 oracleBlockNumber;\\n        bytes32 blockHash;\\n        address token;\\n        bytes32 tokenOracleType;\\n        uint256 signatureIndex;\\n        uint256 maxBlockAge;\\n        uint256[] minPrices;\\n        uint256[] maxPrices;\\n    }\\n\\n    bytes32 public immutable SALT;\\n\\n    uint256 public constant SIGNER_INDEX_LENGTH = 16;\\n    // subtract 1 as the first slot is used to store number of signers\\n    uint256 public constant MAX_SIGNERS = 256 / SIGNER_INDEX_LENGTH - 1;\\n    // signer indexes are recorded in a signerIndexFlags uint256 value to check for uniqueness\\n    uint256 public constant MAX_SIGNER_INDEX = 256;\\n\\n    OracleStore public oracleStore;\\n\\n    // tempTokens stores the tokens with prices that have been set\\n    // this is used in clearTempPrices to help ensure that all token prices\\n    // set in setPrices are cleared after use\\n    EnumerableSet.AddressSet internal tempTokens;\\n    // prices for the same token can be sent multiple times in one txn\\n    // the prices can be for different block numbers\\n    // the first occurrence of the token's price will be stored in primaryPrices\\n    // the second occurrence will be stored in secondaryPrices\\n    mapping(address => Price.Props) public primaryPrices;\\n    mapping(address => Price.Props) public secondaryPrices;\\n    // customPrices can be used to store custom price values\\n    // these prices will be cleared in clearTempPrices\\n    mapping(address => Price.Props) public customPrices;\\n\\n    error EmptyTokens();\\n    error InvalidBlockNumber(uint256 blockNumber);\\n    error MaxBlockAgeExceeded(uint256 blockNumber);\\n    error MinOracleSigners(uint256 oracleSigners, uint256 minOracleSigners);\\n    error MaxOracleSigners(uint256 oracleSigners, uint256 maxOracleSigners);\\n    error BlockNumbersNotSorted(uint256 oracleBlockNumber, uint256 prevOracleBlockNumber);\\n    error MinPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error MaxPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error EmptyPrecision(address token);\\n    error EmptyFeedPrecision(address token);\\n    error EmptyFeedPrice(address token);\\n    error InvalidSignature(address recoveredSigner, address expectedSigner);\\n    error MaxSignerIndex(uint256 signerIndex, uint256 maxSignerIndex);\\n    error DuplicateSigner(uint256 signerIndex);\\n    error EmptyPrice(address token);\\n    error EmptyPrimaryPrice(address token);\\n    error EmptySecondaryPrice(address token);\\n    error EmptyLatestPrice(address token);\\n    error EmptyCustomPrice(address token);\\n\\n    constructor(\\n        RoleStore _roleStore,\\n        OracleStore _oracleStore\\n    ) RoleModule(_roleStore) {\\n        oracleStore = _oracleStore;\\n\\n        // sign prices with only the chainid and oracle name so that there is\\n        // less config required in the oracle nodes\\n        SALT = keccak256(abi.encode(block.chainid, \\\"xget-oracle-v1\\\"));\\n    }\\n\\n    function setPrices(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        OracleUtils.SetPricesParams memory params\\n    ) external onlyController {\\n        require(tempTokens.length() == 0, \\\"Oracle: tempTokens not cleared\\\");\\n\\n        if (params.tokens.length == 0) { revert EmptyTokens(); }\\n\\n        // first 16 bits of signer info contains the number of signers\\n        address[] memory signers = new address[](params.signerInfo & Bits.BITMASK_16);\\n\\n        if (signers.length < dataStore.getUint(Keys.MIN_ORACLE_SIGNERS)) {\\n            revert MinOracleSigners(signers.length, dataStore.getUint(Keys.MIN_ORACLE_SIGNERS));\\n        }\\n\\n        if (signers.length > MAX_SIGNERS) {\\n            revert MaxOracleSigners(signers.length, MAX_SIGNERS);\\n        }\\n\\n        uint256 signerIndexFlags;\\n\\n        for (uint256 i = 0; i < signers.length; i++) {\\n            uint256 signerIndex = params.signerInfo >> (16 + 16 * i) & Bits.BITMASK_16;\\n\\n            if (signerIndex >= MAX_SIGNER_INDEX) {\\n                revert MaxSignerIndex(signerIndex, MAX_SIGNER_INDEX);\\n            }\\n\\n            uint256 signerIndexBit = 1 << signerIndex;\\n\\n            if (signerIndexFlags & signerIndexBit != 0) {\\n                revert DuplicateSigner(signerIndex);\\n            }\\n\\n            signerIndexFlags = signerIndexFlags | signerIndexBit;\\n\\n            signers[i] = oracleStore.getSigner(signerIndex);\\n        }\\n\\n        _setPrices(\\n            dataStore,\\n            eventEmitter,\\n            signers,\\n            params\\n        );\\n\\n        _setPricesFromPriceFeeds(dataStore, eventEmitter, params.priceFeedTokens);\\n    }\\n\\n    function setSecondaryPrice(address token, Price.Props memory price) external onlyController {\\n        secondaryPrices[token] = price;\\n    }\\n\\n    function setCustomPrice(address token, Price.Props memory price) external onlyController {\\n        customPrices[token] = price;\\n    }\\n\\n    function clearTempPrices() external onlyController {\\n        uint256 length = tempTokens.length();\\n        for (uint256 i = 0; i < length; i++) {\\n            address token = tempTokens.at(0);\\n            delete primaryPrices[token];\\n            delete secondaryPrices[token];\\n            delete customPrices[token];\\n            tempTokens.remove(token);\\n        }\\n    }\\n\\n    function getTempTokensCount() external view returns (uint256) {\\n        return tempTokens.length();\\n    }\\n\\n    function getTempTokens(uint256 start, uint256 end) external view returns (address[] memory) {\\n        return tempTokens.valuesAt(start, end);\\n    }\\n\\n    function getPrimaryPrice(address token) external view returns (Price.Props memory) {\\n        Price.Props memory price = primaryPrices[token];\\n        if (price.isEmpty()) { revert EmptyPrimaryPrice(token); }\\n        return price;\\n    }\\n\\n    function getSecondaryPrice(address token) external view returns (Price.Props memory) {\\n        Price.Props memory price = secondaryPrices[token];\\n        if (price.isEmpty()) { revert EmptySecondaryPrice(token); }\\n        return price;\\n    }\\n\\n    function getLatestPrice(address token) external view returns (Price.Props memory) {\\n        Price.Props memory primaryPrice = primaryPrices[token];\\n        Price.Props memory secondaryPrice = secondaryPrices[token];\\n\\n        if (!secondaryPrice.isEmpty()) {\\n            return secondaryPrice;\\n        }\\n\\n        if (!primaryPrice.isEmpty()) {\\n            return primaryPrice;\\n        }\\n\\n        revert EmptyLatestPrice(token);\\n    }\\n\\n    function getCustomPrice(address token) external view returns (Price.Props memory) {\\n        Price.Props memory price = customPrices[token];\\n        if (price.isEmpty()) { revert EmptyCustomPrice(token); }\\n        return price;\\n    }\\n\\n    // store prices as the price of one unit of the token using a value\\n    // with 30 decimals of precision\\n    //\\n    // storing the prices in this way allows for conversions between token\\n    // amounts and fiat values to be simplified\\n    // e.g. to calculate the fiat value of a given number of tokens the\\n    // calculation would just be: token amount * oracle price\\n    //\\n    // the trade-off of this simplicity in calculation is that tokens with a small\\n    // USD price and a lot of decimals may have precision issues\\n    // it is also possible that a token's price changes significantly and results\\n    // in requiring higher precision\\n    //\\n    // example 1, the price of ETH is 5000, and ETH has 18 decimals\\n    // the price of one unit of ETH is 5000 / (10 ** 18), 5 * (10 ** -15)\\n    // to represent the price with 30 decimals, store the price as\\n    // 5000 / (10 ** 18) * (10 ** 30) => 5 ** (10 ** 15) => 5000 * (10 ** 12)\\n    // oracle precision for ETH can be set to (10 ** 8) to allow for prices with\\n    // a maximum value of (2 ** 32) / (10 ** 4) => 4,294,967,296 / (10 ** 4) => 429,496.7296\\n    // and up to 4 decimals of precision\\n    //\\n    // example 2, the price of BTC is 60,000, and BTC has 8 decimals\\n    // the price of one unit of BTC is 60,000 / (10 ** 8), 6 * (10 ** -4)\\n    // to represent the price with 30 decimals, store the price as\\n    // 60,000 / (10 ** 8) * (10 ** 30) => 6 * (10 ** 26) => 60,000 * (10 ** 22)\\n    // oracle precision for BTC can be set to (10 ** 20) to allow for prices with\\n    // a maximum value of (2 ** 64) / (10 ** 2) => 4,294,967,296 / (10 ** 2) => 42,949,672.96\\n    // and up to 2 decimals of precision\\n    //\\n    // example 3, the price of USDC is 1, and USDC has 6 decimals\\n    // the price of one unit of USDC is 1 / (10 ** 6), 1 * (10 ** -6)\\n    // to represent the price with 30 decimals, store the price as\\n    // 1 / (10 ** 6) * (10 ** 30) => 1 ** (10 ** 24)\\n    // oracle precision for USDC can be set to (10 ** 18) to allow for prices with\\n    // a maximum value of (2 ** 64) / (10 ** 6) => 4,294,967,296 / (10 ** 6) => 4294.967296\\n    // and up to 6 decimals of precision\\n    //\\n    // example 4, the price of DG is 0.00000001, and DG has 18 decimals\\n    // the price of one unit of DG is 0.00000001 / (10 ** 18), 1 * (10 ** -26)\\n    // to represent the price with 30 decimals, store the price as\\n    // 1 * (10 ** -26) * (10 ** 30) => 10,000 => 1 * (10 ** 3)\\n    // oracle precision for DG can be set to (10 ** 1) to allow for prices with\\n    // a maximum value of (2 ** 64) / (10 ** 11) => 4,294,967,296 / (10 ** 11) => 0.04294967296\\n    // and up to 11 decimals of precision\\n    //\\n    // formula to calculate what the precision value should be set to:\\n    // decimals: 30 - (token decimals) - (number of decimals desired for precision)\\n    // ETH: 30 - 18 - 4 => 8, precision: 10 ** 8\\n    // BTC: 30 - 8 - 2 => 20, precision: 10 ** 20\\n    // USDC: 30 - 6 - 6 => 18, precision: 10 ** 18\\n    // DG: 30 - 18 - 11 => 1, precision: 10 ** 1\\n    function getPrecision(DataStore dataStore, address token) public view returns (uint256) {\\n        uint256 precision = dataStore.getUint(Keys.oraclePrecisionKey(token));\\n        if (precision == 0) {\\n            revert EmptyPrecision(token);\\n        }\\n        return precision;\\n    }\\n\\n    function _setPrices(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address[] memory signers,\\n        OracleUtils.SetPricesParams memory params\\n    ) internal {\\n        _SetPricesCache memory cache;\\n        cache.minBlockConfirmations = dataStore.getUint(Keys.MIN_ORACLE_BLOCK_CONFIRMATIONS);\\n        cache.maxBlockAge = dataStore.getUint(Keys.MAX_ORACLE_BLOCK_AGE);\\n\\n        for (uint256 i = 0; i < params.tokens.length; i++) {\\n            cache.oracleBlockNumber = OracleUtils.getUncompactedOracleBlockNumber(params.compactedOracleBlockNumbers, i);\\n\\n            if (cache.oracleBlockNumber > Chain.currentBlockNumber()) {\\n                revert InvalidBlockNumber(cache.oracleBlockNumber);\\n            }\\n\\n            if (cache.oracleBlockNumber + cache.maxBlockAge < Chain.currentBlockNumber()) {\\n                revert MaxBlockAgeExceeded(cache.oracleBlockNumber);\\n            }\\n\\n            // block numbers must be in ascending order\\n            if (cache.oracleBlockNumber < cache.prevOracleBlockNumber) {\\n                revert BlockNumbersNotSorted(cache.oracleBlockNumber, cache.prevOracleBlockNumber);\\n            }\\n            cache.prevOracleBlockNumber = cache.oracleBlockNumber;\\n\\n            cache.blockHash = bytes32(0);\\n            if (Chain.currentBlockNumber() - cache.oracleBlockNumber <= cache.minBlockConfirmations) {\\n                cache.blockHash = Chain.getBlockHash(cache.oracleBlockNumber);\\n            }\\n\\n            cache.token = params.tokens[i];\\n            cache.tokenOracleType = dataStore.getData(Keys.oracleTypeKey(cache.token));\\n\\n            cache.minPrices = new uint256[](signers.length);\\n            cache.maxPrices = new uint256[](signers.length);\\n\\n            for (uint256 j = 0; j < signers.length; j++) {\\n                cache.minPrices[j] = OracleUtils.getUncompactedPrice(params.compactedMinPrices, cache.signatureIndex);\\n                cache.maxPrices[j] = OracleUtils.getUncompactedPrice(params.compactedMaxPrices, cache.signatureIndex);\\n\\n                if (j == 0) { continue; }\\n\\n                // validate that minPrices are sorted in ascending order\\n                if (cache.minPrices[j - 1] > cache.minPrices[j]) {\\n                    revert MinPricesNotSorted(cache.token, cache.minPrices[j], cache.minPrices[j - 1]);\\n                }\\n\\n                // validate that maxPrices are sorted in ascending order\\n                if (cache.maxPrices[j - 1] > cache.maxPrices[j]) {\\n                    revert MaxPricesNotSorted(cache.token, cache.maxPrices[j], cache.maxPrices[j - 1]);\\n                }\\n            }\\n\\n            for (uint256 j = 0; j < signers.length; j++) {\\n                cache.signatureIndex = i * signers.length + j;\\n                uint256 minPriceIndex = OracleUtils.getUncompactedPriceIndex(params.compactedMinPricesIndexes, cache.signatureIndex);\\n                uint256 maxPriceIndex = OracleUtils.getUncompactedPriceIndex(params.compactedMaxPricesIndexes, cache.signatureIndex);\\n\\n                _validateSigner(\\n                    cache.oracleBlockNumber,\\n                    cache.blockHash,\\n                    cache.token,\\n                    cache.tokenOracleType,\\n                    cache.minPrices[minPriceIndex],\\n                    cache.maxPrices[maxPriceIndex],\\n                    params.signatures[cache.signatureIndex],\\n                    signers[j]\\n                );\\n            }\\n\\n            uint256 medianMinPrice = Array.getMedian(cache.minPrices) * getPrecision(dataStore, cache.token);\\n            uint256 medianMaxPrice = Array.getMedian(cache.maxPrices) * getPrecision(dataStore, cache.token);\\n\\n            if (medianMinPrice == 0 || medianMaxPrice == 0) {\\n                revert EmptyPrice(cache.token);\\n            }\\n\\n            if (primaryPrices[cache.token].isEmpty()) {\\n                eventEmitter.emitOraclePriceUpdated(cache.token, medianMinPrice, medianMaxPrice, true, false);\\n\\n                primaryPrices[cache.token] = Price.Props(\\n                    medianMinPrice,\\n                    medianMaxPrice\\n                );\\n            } else {\\n                eventEmitter.emitOraclePriceUpdated(cache.token, medianMinPrice, medianMaxPrice, false, false);\\n\\n                secondaryPrices[cache.token] = Price.Props(\\n                    medianMinPrice,\\n                    medianMaxPrice\\n                );\\n            }\\n\\n            tempTokens.add(cache.token);\\n        }\\n    }\\n\\n    // set prices using Chainlink price feeds to save costs for tokens with stable prices\\n    function _setPricesFromPriceFeeds(DataStore dataStore, EventEmitter eventEmitter, address[] memory priceFeedTokens) internal {\\n        for (uint256 i = 0; i < priceFeedTokens.length; i++) {\\n            address token = priceFeedTokens[i];\\n\\n            require(primaryPrices[token].isEmpty(), \\\"Oracle: price already set\\\");\\n\\n            address priceFeedAddress = dataStore.getAddress(Keys.priceFeedKey(token));\\n            require(priceFeedAddress != address(0), \\\"Oracle: invalid price feed\\\");\\n\\n            IPriceFeed priceFeed = IPriceFeed(priceFeedAddress);\\n            (\\n                /* uint80 roundID */,\\n                int256 _price,\\n                /* uint256 startedAt */,\\n                /* uint256 timeStamp */,\\n                /* uint80 answeredInRound */\\n            ) = priceFeed.latestRoundData();\\n\\n            uint256 price = SafeCast.toUint256(_price);\\n            uint256 precision = dataStore.getUint(Keys.priceFeedPrecisionKey(token));\\n\\n            if (precision == 0) {\\n                revert EmptyFeedPrecision(token);\\n            }\\n\\n            price = price * precision / Precision.FLOAT_PRECISION;\\n\\n            if (price == 0) {\\n                revert EmptyFeedPrice(token);\\n            }\\n\\n            primaryPrices[token] = Price.Props(\\n                price,\\n                price\\n            );\\n\\n            tempTokens.add(token);\\n\\n            eventEmitter.emitOraclePriceUpdated(token, price, price, true, true);\\n        }\\n    }\\n\\n    function _validateSigner(\\n        uint256 oracleBlockNumber,\\n        bytes32 blockHash,\\n        address token,\\n        bytes32 tokenOracleType,\\n        uint256 minPrice,\\n        uint256 maxPrice,\\n        bytes memory signature,\\n        address expectedSigner\\n    ) internal view {\\n        bytes32 digest = ECDSA.toEthSignedMessageHash(\\n            keccak256(abi.encode(\\n                SALT,\\n                oracleBlockNumber,\\n                blockHash,\\n                token,\\n                tokenOracleType,\\n                minPrice,\\n                maxPrice\\n            ))\\n        );\\n\\n        address recoveredSigner = ECDSA.recover(digest, signature);\\n        if (recoveredSigner != expectedSigner) {\\n            revert InvalidSignature(recoveredSigner, expectedSigner);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcb236d4a737bbd0f30d860afeb4517590d9f4a7274976e9542263d8ae87422fe\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/OracleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\n\\ncontract OracleStore is RoleModule {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet internal signers;\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    function addSigner(address account) external onlyController {\\n        signers.add(account);\\n    }\\n\\n    function removeSigner(address account) external onlyController {\\n        signers.remove(account);\\n    }\\n\\n    function getSignerCount() external view returns (uint256) {\\n        return signers.length();\\n    }\\n\\n    function getSigner(uint256 index) external view returns (address) {\\n        return signers.at(index);\\n    }\\n\\n    function getSigners(uint256 start, uint256 end) external view returns (address[] memory) {\\n        return signers.valuesAt(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0x49fc4f0139b8332c782102fcf5dd48cad1ea2eec5065a60d767ec23aa6846624\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/OracleUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Array.sol\\\";\\nimport \\\"../utils/Bits.sol\\\";\\n\\nlibrary OracleUtils {\\n    struct SetPricesParams {\\n        uint256 signerInfo;\\n        address[] tokens;\\n        uint256[] compactedOracleBlockNumbers;\\n        uint256[] compactedMinPrices;\\n        uint256[] compactedMinPricesIndexes;\\n        uint256[] compactedMaxPrices;\\n        uint256[] compactedMaxPricesIndexes;\\n        bytes[] signatures;\\n        address[] priceFeedTokens;\\n    }\\n\\n    // compacted prices have a length of 32 bits\\n    uint256 public constant COMPACTED_PRICE_BIT_LENGTH = 32;\\n    uint256 public constant COMPACTED_PRICE_BITMASK = Bits.BITMASK_32;\\n\\n    // compacted block numbers have a length of 64 bits\\n    uint256 public constant COMPACTED_BLOCK_NUMBER_BIT_LENGTH = 64;\\n    uint256 public constant COMPACTED_BLOCK_NUMBER_BITMASK = Bits.BITMASK_64;\\n\\n    // compacted price indexes have a length of 8 bits\\n    uint256 public constant COMPACTED_PRICE_INDEX_BIT_LENGTH = 8;\\n    uint256 public constant COMPACTED_PRICE_INDEX_BITMASK = Bits.BITMASK_8;\\n\\n    error EmptyPrice();\\n    error EmptyBlockNumber();\\n\\n    function getUncompactedPrice(uint256[] memory compactedPrices, uint256 index) internal pure returns (uint256) {\\n        uint256 price = Array.getUncompactedValue(\\n            compactedPrices,\\n            index,\\n            COMPACTED_PRICE_BIT_LENGTH,\\n            COMPACTED_PRICE_BITMASK\\n        );\\n\\n        if (price == 0) { revert EmptyPrice(); }\\n\\n        return price;\\n    }\\n\\n    function getUncompactedPriceIndex(uint256[] memory compactedPriceIndexes, uint256 index) internal pure returns (uint256) {\\n        uint256 priceIndex = Array.getUncompactedValue(\\n            compactedPriceIndexes,\\n            index,\\n            COMPACTED_PRICE_INDEX_BIT_LENGTH,\\n            COMPACTED_PRICE_INDEX_BITMASK\\n        );\\n\\n        return priceIndex;\\n\\n    }\\n\\n    function getUncompactedOracleBlockNumbers(uint256[] memory compactedOracleBlockNumbers, uint256 length) internal pure returns (uint256[] memory) {\\n        uint256[] memory blockNumbers = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            blockNumbers[i] = getUncompactedOracleBlockNumber(compactedOracleBlockNumbers, i);\\n        }\\n\\n        return blockNumbers;\\n    }\\n\\n    function getUncompactedOracleBlockNumber(uint256[] memory compactedOracleBlockNumbers, uint256 index) internal pure returns (uint256) {\\n        uint256 blockNumber = Array.getUncompactedValue(\\n            compactedOracleBlockNumbers,\\n            index,\\n            COMPACTED_BLOCK_NUMBER_BIT_LENGTH,\\n            COMPACTED_BLOCK_NUMBER_BITMASK\\n        );\\n\\n        if (blockNumber == 0) { revert EmptyBlockNumber(); }\\n\\n        return blockNumber;\\n    }\\n}\\n\",\"keccak256\":\"0xb1d2bdfe1a727001ec15fdff8a842ba0f812c6aaa39413ed53490688065d6052\",\"license\":\"BUSL-1.1\"},\"contracts/order/Order.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../chain/Chain.sol\\\";\\n\\nlibrary Order {\\n    using Order for Props;\\n\\n    enum OrderType {\\n        // for LimitIncrease, LimitDecrease, StopLossDecrease orders, two prices for the\\n        // index token need to be recorded in the oracle\\n        // the price with the smaller block number is stored as the primary price while the price with the\\n        // larger block number is stored as the secondary price\\n        // the triggerPrice must be validated to be between the primary price and secondary price\\n        // LimitDecrease and StopLossDecrease are reduce-only orders\\n\\n        // MarketSwap: swap token A to token B at the current market price\\n        // the order will be cancelled if the minOutputAmount cannot be fulfilled\\n        MarketSwap,\\n        // LimitSwap: swap token A to token B if the minOutputAmount can be fulfilled\\n        LimitSwap,\\n        // MarketIncrease: increase position at the current market price\\n        // the order will be cancelled if the position cannot be increased at the acceptablePrice\\n        MarketIncrease,\\n        // LimitIncrease: increase position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        LimitIncrease,\\n        // MarketDecrease: decrease position at the curent market price\\n        // the order will be cancelled if the position cannot be decreased at the acceptablePrice\\n        MarketDecrease,\\n        // LimitDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        LimitDecrease,\\n        // StopLossDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        StopLossDecrease,\\n        // Liquidation: allows liquidation of positions if the criteria for liquidation are met\\n        Liquidation\\n    }\\n\\n    struct Addresses {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address market;\\n         // for increase positions initialCollateralToken is the token sent in by the user\\n         // the token will be swapped through the specified swapPath, before position increase\\n         // for decrease position initialCollateralToken is the collateral token of the position\\n         // any withdrawn collateral will be swapped through the specified swapPath, after position decrease\\n        address initialCollateralToken;\\n        address[] swapPath; // list of markets to swap collateral through\\n    }\\n\\n    struct Numbers {\\n        uint256 sizeDeltaUsd;\\n        uint256 initialCollateralDeltaAmount;\\n        uint256 acceptablePrice;\\n        int256 acceptablePriceImpactUsd;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 minOutputAmount;\\n        uint256 updatedAtBlock;\\n    }\\n\\n    struct Flags {\\n        OrderType orderType;\\n        bool isLong;\\n        bool shouldConvertETH;\\n        bool isFrozen;\\n    }\\n\\n    // there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // we use sub-structs here to avoid the issue\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n        bytes data;\\n    }\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    function initialCollateralToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialCollateralToken;\\n    }\\n\\n    function swapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.swapPath;\\n    }\\n\\n    function sizeDeltaUsd(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.sizeDeltaUsd;\\n    }\\n\\n    function initialCollateralDeltaAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialCollateralDeltaAmount;\\n    }\\n\\n    function acceptablePrice(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.acceptablePrice;\\n    }\\n\\n    function acceptablePriceImpactUsd(Props memory props) internal pure returns (int256) {\\n        return props.numbers.acceptablePriceImpactUsd;\\n    }\\n\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    function minOutputAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minOutputAmount;\\n    }\\n\\n    function updatedAtBlock(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtBlock;\\n    }\\n\\n    function orderType(Props memory props) internal pure returns (OrderType) {\\n        return props.flags.orderType;\\n    }\\n\\n    function isLong(Props memory props) internal pure returns (bool) {\\n        return props.flags.isLong;\\n    }\\n\\n    function shouldConvertETH(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldConvertETH;\\n    }\\n\\n    function isFrozen(Props memory props) internal pure returns (bool) {\\n        return props.flags.isFrozen;\\n    }\\n\\n    function setAccount(Props memory props, address _value) internal pure {\\n        props.addresses.account = _value;\\n    }\\n\\n    function setReceiver(Props memory props, address _value) internal pure {\\n        props.addresses.receiver = _value;\\n    }\\n\\n    function setCallbackContract(Props memory props, address _value) internal pure {\\n        props.addresses.callbackContract = _value;\\n    }\\n\\n    function setMarket(Props memory props, address _value) internal pure {\\n        props.addresses.market = _value;\\n    }\\n\\n    function setInitialCollateralToken(Props memory props, address _value) internal pure {\\n        props.addresses.initialCollateralToken = _value;\\n    }\\n\\n    function setSwapPath(Props memory props, address[] memory _value) internal pure {\\n        props.addresses.swapPath = _value;\\n    }\\n\\n    function setSizeDeltaUsd(Props memory props, uint256 _value) internal pure {\\n        props.numbers.sizeDeltaUsd = _value;\\n    }\\n\\n    function setInitialCollateralDeltaAmount(Props memory props, uint256 _value) internal pure {\\n        props.numbers.initialCollateralDeltaAmount = _value;\\n    }\\n\\n    function setAcceptablePrice(Props memory props, uint256 _value) internal pure {\\n        props.numbers.acceptablePrice = _value;\\n    }\\n\\n    function setAcceptablePriceImpactUsd(Props memory props, int256 _value) internal pure {\\n        props.numbers.acceptablePriceImpactUsd = _value;\\n    }\\n\\n    function setExecutionFee(Props memory props, uint256 _value) internal pure {\\n        props.numbers.executionFee = _value;\\n    }\\n\\n    function setCallbackGasLimit(Props memory props, uint256 _value) internal pure {\\n        props.numbers.callbackGasLimit = _value;\\n    }\\n\\n    function setMinOutputAmount(Props memory props, uint256 _value) internal pure {\\n        props.numbers.minOutputAmount = _value;\\n    }\\n\\n    function setUpdatedAtBlock(Props memory props, uint256 _value) internal pure {\\n        props.numbers.updatedAtBlock = _value;\\n    }\\n\\n    function setOrderType(Props memory props, OrderType _value) internal pure {\\n        props.flags.orderType = _value;\\n    }\\n\\n    function setIsLong(Props memory props, bool _value) internal pure {\\n        props.flags.isLong = _value;\\n    }\\n\\n    function setShouldConvertETH(Props memory props, bool _value) internal pure {\\n        props.flags.shouldConvertETH = _value;\\n    }\\n\\n    function setIsFrozen(Props memory props, bool _value) internal pure {\\n        props.flags.isFrozen = _value;\\n    }\\n\\n    function touch(Props memory props) internal view {\\n        props.setUpdatedAtBlock(Chain.currentBlockNumber());\\n    }\\n}\\n\",\"keccak256\":\"0x44525636d660f583391a8227c06aa0ebeed94b00e9eb7dd3450850764d7d79bd\",\"license\":\"BUSL-1.1\"},\"contracts/position/Position.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Position {\\n    struct Props {\\n        address account;\\n        address market;\\n        address collateralToken;\\n        bool isLong;\\n        uint256 sizeInUsd;\\n        uint256 sizeInTokens;\\n        uint256 collateralAmount;\\n        int256 fundingFactor;\\n        uint256 borrowingFactor;\\n        uint256 increasedAtBlock;\\n        uint256 decreasedAtBlock;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x7cb008836636579a4b81ea81457184ac40fc391dcbef55df1648816634fbe858\",\"license\":\"BUSL-1.1\"},\"contracts/position/PositionStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Position.sol\\\";\\nimport \\\"../role/RoleModule.sol\\\";\\n\\ncontract PositionStore is RoleModule {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    mapping(bytes32 => Position.Props) internal positions;\\n    EnumerableSet.Bytes32Set internal positionKeys;\\n    mapping(address => EnumerableSet.Bytes32Set) internal accountPositionKeys;\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    function set(bytes32 key, address account, Position.Props memory position) external onlyController {\\n        positions[key] = position;\\n        accountPositionKeys[account].add(key);\\n        positionKeys.add(key);\\n    }\\n\\n    function remove(bytes32 key, address account) external onlyController {\\n        delete positions[key];\\n        accountPositionKeys[account].remove(key);\\n        positionKeys.remove(key);\\n    }\\n\\n    function get(bytes32 key) external view returns (Position.Props memory) {\\n        return positions[key];\\n    }\\n\\n    function getPositionCount() external view returns (uint256) {\\n        return positionKeys.length();\\n    }\\n\\n    function getPositionKeys(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return positionKeys.valuesAt(start, end);\\n    }\\n\\n    function getAccountPositionCount(address account) external view returns (uint256) {\\n        return accountPositionKeys[account].length();\\n    }\\n\\n    function getAccountPositionKeys(address account, uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return accountPositionKeys[account].valuesAt(start, end);\\n    }\\n\\n    function contains(bytes32 key) public view returns (bool) {\\n        return positionKeys.contains(key);\\n    }\\n}\\n\",\"keccak256\":\"0xcce696aa2ef4d929f267a5dad4482807ee9532f7e1c09853b1f3e2c204a2ba6f\",\"license\":\"BUSL-1.1\"},\"contracts/price/Price.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Price {\\n    struct Props {\\n        uint256 min;\\n        uint256 max;\\n    }\\n\\n    function isEmpty(Props memory props) internal pure returns (bool) {\\n        return props.min == 0 || props.max == 0;\\n    }\\n\\n    function midPrice(Props memory props) internal pure returns (uint256) {\\n        return (props.max + props.min) / 2;\\n    }\\n\\n    function pickPrice(Props memory props, bool maximize) internal pure returns (uint256) {\\n        return maximize ? props.max : props.min;\\n    }\\n\\n    function pickPriceForPnl(Props memory props, bool isLong, bool maximize) internal pure returns (uint256) {\\n        // for long positions, pick the larger price to maximize pnl\\n        // for short positions, pick the smaller price to maximize pnl\\n        if (isLong) {\\n            return maximize ? props.max : props.min;\\n        }\\n\\n        return maximize ? props.min : props.max;\\n    }\\n}\\n\",\"keccak256\":\"0xe9a88e7347f39786d647d44a104f6d489df547c868ef22c426cfe0eef79163b6\",\"license\":\"BUSL-1.1\"},\"contracts/pricing/PositionPricingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../market/MarketUtils.sol\\\";\\n\\nimport \\\"../utils/Precision.sol\\\";\\nimport \\\"../utils/Calc.sol\\\";\\n\\nimport \\\"./PricingUtils.sol\\\";\\n\\nlibrary PositionPricingUtils {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    struct GetPriceImpactUsdParams {\\n        DataStore dataStore;\\n        address market;\\n        address longToken;\\n        address shortToken;\\n        int256 usdDelta;\\n        bool isLong;\\n    }\\n\\n    struct OpenInterestParams {\\n        uint256 longOpenInterest;\\n        uint256 shortOpenInterest;\\n        uint256 nextLongOpenInterest;\\n        uint256 nextShortOpenInterest;\\n    }\\n\\n    struct PositionFees {\\n        uint256 feeReceiverAmount;\\n        uint256 feesForPool;\\n        uint256 amountForPool;\\n        uint256 positionFeeAmount;\\n        int256 fundingFeeAmount;\\n        uint256 borrowingFeeAmount;\\n        int256 totalNetCostAmount;\\n    }\\n\\n    function getPriceImpactAmount(\\n        uint256 size,\\n        uint256 executionPrice,\\n        uint256 latestPrice,\\n        bool isLong,\\n        bool isIncrease\\n    ) internal pure returns (int256) {\\n        // increase order:\\n        //     - long: price impact is size * (latestPrice - executionPrice) / latestPrice\\n        //             when executionPrice is smaller than latestPrice there is a positive price impact\\n        //     - short: price impact is size * (executionPrice - latestPrice) / latestPrice\\n        //              when executionPrice is larger than latestPrice there is a positive price impact\\n        // decrease order:\\n        //     - long: price impact is size * (executionPrice - latestPrice) / latestPrice\\n        //             when executionPrice is larger than latestPrice there is a positive price impact\\n        //     - short: price impact is size * (latestPrice - executionPrice) / latestPrice\\n        //              when executionPrice is smaller than latestPrice there is a positive price impact\\n        int256 priceDiff = latestPrice.toInt256() - executionPrice.toInt256();\\n        bool shouldFlipPriceDiff = isIncrease ? !isLong : isLong;\\n        if (shouldFlipPriceDiff) { priceDiff = -priceDiff; }\\n\\n        int256 priceImpactUsd = size.toInt256() * priceDiff / latestPrice.toInt256();\\n        return priceImpactUsd / latestPrice.toInt256();\\n    }\\n\\n    function getPriceImpactUsd(GetPriceImpactUsdParams memory params) internal view returns (int256) {\\n        OpenInterestParams memory openInterestParams = getNextOpenInterest(params);\\n\\n        int256 priceImpactUsd = _getPriceImpactUsd(params.dataStore, params.market, openInterestParams);\\n\\n        return priceImpactUsd;\\n    }\\n\\n    function _getPriceImpactUsd(DataStore dataStore, address market, OpenInterestParams memory openInterestParams) internal view returns (int256) {\\n        uint256 initialDiffUsd = Calc.diff(openInterestParams.longOpenInterest, openInterestParams.shortOpenInterest);\\n        uint256 nextDiffUsd = Calc.diff(openInterestParams.nextLongOpenInterest, openInterestParams.nextShortOpenInterest);\\n\\n        // check whether an improvement in balance comes from causing the balance to switch sides\\n        // for example, if there is $2000 of ETH and $1000 of USDC in the pool\\n        // adding $1999 USDC into the pool will reduce absolute balance from $1000 to $999 but it does not\\n        // help rebalance the pool much, the isSameSideRebalance value helps avoid gaming using this case\\n        bool isSameSideRebalance = openInterestParams.longOpenInterest <= openInterestParams.shortOpenInterest == openInterestParams.nextLongOpenInterest <= openInterestParams.nextShortOpenInterest;\\n        uint256 impactExponentFactor = dataStore.getUint(Keys.positionImpactExponentFactorKey(market));\\n\\n        if (isSameSideRebalance) {\\n            bool hasPositiveImpact = nextDiffUsd < initialDiffUsd;\\n            uint256 impactFactor = dataStore.getUint(Keys.positionImpactFactorKey(market, hasPositiveImpact));\\n\\n            return PricingUtils.getPriceImpactUsdForSameSideRebalance(\\n                initialDiffUsd,\\n                nextDiffUsd,\\n                hasPositiveImpact,\\n                impactFactor,\\n                impactExponentFactor\\n            );\\n        } else {\\n            uint256 positiveImpactFactor = dataStore.getUint(Keys.positionImpactFactorKey(market, true));\\n            uint256 negativeImpactFactor = dataStore.getUint(Keys.positionImpactFactorKey(market, false));\\n\\n            return PricingUtils.getPriceImpactUsdForCrossoverRebalance(\\n                initialDiffUsd,\\n                nextDiffUsd,\\n                positiveImpactFactor,\\n                negativeImpactFactor,\\n                impactExponentFactor\\n            );\\n        }\\n    }\\n\\n    function getNextOpenInterest(\\n        GetPriceImpactUsdParams memory params\\n    ) internal view returns (OpenInterestParams memory) {\\n        uint256 longOpenInterest = MarketUtils.getOpenInterest(params.dataStore, params.market, true);\\n        uint256 shortOpenInterest = MarketUtils.getOpenInterest(params.dataStore, params.market, false);\\n\\n        uint256 nextLongOpenInterest;\\n        uint256 nextShortOpenInterest;\\n\\n        if (params.isLong) {\\n            nextLongOpenInterest = Calc.sum(longOpenInterest, params.usdDelta);\\n        } else {\\n            nextShortOpenInterest = Calc.sum(shortOpenInterest, params.usdDelta);\\n        }\\n\\n        OpenInterestParams memory openInterestParams = OpenInterestParams(\\n            longOpenInterest,\\n            shortOpenInterest,\\n            nextLongOpenInterest,\\n            nextShortOpenInterest\\n        );\\n\\n        return openInterestParams;\\n    }\\n\\n    function transferPositionFees(\\n        FeeReceiver feeReceiver,\\n        MarketToken marketToken,\\n        Position.Props memory position,\\n        bytes32 feeType,\\n        PositionFees memory fees\\n    ) internal returns (PositionFees memory) {\\n        if (fees.feeReceiverAmount > 0) {\\n            marketToken.transferOut(position.collateralToken, fees.feeReceiverAmount, address(feeReceiver));\\n            feeReceiver.notifyFeeReceived(feeType, position.collateralToken, fees.feeReceiverAmount);\\n        }\\n\\n        return fees;\\n    }\\n\\n    function getPositionFees(\\n        DataStore dataStore,\\n        Position.Props memory position,\\n        Price.Props memory collateralTokenPrice,\\n        uint256 sizeDeltaUsd,\\n        bytes32 feeReceiverFactorKey\\n    ) internal view returns (PositionFees memory) {\\n        PositionFees memory fees;\\n\\n        uint256 feeFactor = dataStore.getUint(Keys.positionFeeFactorKey(position.market));\\n        uint256 feeReceiverFactor = dataStore.getUint(feeReceiverFactorKey);\\n\\n        fees.positionFeeAmount = Precision.applyFactor(sizeDeltaUsd, feeFactor) / collateralTokenPrice.min;\\n        fees.fundingFeeAmount = MarketUtils.getFundingFees(dataStore, position) / collateralTokenPrice.min.toInt256();\\n        fees.borrowingFeeAmount = MarketUtils.getBorrowingFees(dataStore, position) / collateralTokenPrice.min;\\n\\n        fees.feeReceiverAmount = Precision.applyFactor(fees.positionFeeAmount, feeReceiverFactor);\\n        fees.feesForPool = fees.positionFeeAmount + fees.borrowingFeeAmount - fees.feeReceiverAmount;\\n        fees.totalNetCostAmount = fees.fundingFeeAmount - (fees.positionFeeAmount + fees.borrowingFeeAmount).toInt256();\\n\\n        return fees;\\n    }\\n}\\n\",\"keccak256\":\"0x0bed40064cc2c37956e097f5188b5ec88a5bcbe3bd06571ea33817c833297ddd\",\"license\":\"BUSL-1.1\"},\"contracts/pricing/PricingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\\nimport \\\"../utils/Calc.sol\\\";\\nimport \\\"../utils/Precision.sol\\\";\\nimport \\\"../market/MarketUtils.sol\\\";\\nimport \\\"../fee/FeeReceiver.sol\\\";\\n\\nlibrary PricingUtils {\\n    function getPriceImpactUsdForSameSideRebalance(\\n        uint256 initialDiffUsd,\\n        uint256 nextDiffUsd,\\n        bool hasPositiveImpact,\\n        uint256 impactFactor,\\n        uint256 impactExponentFactor\\n    ) internal pure returns (int256) {\\n        uint256 deltaDiffUsd = Calc.diff(\\n            applyImpactFactor(initialDiffUsd, impactFactor, impactExponentFactor),\\n            applyImpactFactor(nextDiffUsd, impactFactor, impactExponentFactor)\\n        );\\n\\n        int256 priceImpactUsd = Calc.toSigned(deltaDiffUsd, hasPositiveImpact);\\n\\n        return priceImpactUsd;\\n    }\\n\\n    function getPriceImpactUsdForCrossoverRebalance(\\n        uint256 initialDiffUsd,\\n        uint256 nextDiffUsd,\\n        uint256 positiveImpactFactor,\\n        uint256 negativeImpactFactor,\\n        uint256 impactExponentFactor\\n    ) internal pure returns (int256) {\\n        uint256 positiveImpactUsd = applyImpactFactor(initialDiffUsd, positiveImpactFactor, impactExponentFactor);\\n        uint256 negativeImpactUsd = applyImpactFactor(nextDiffUsd, negativeImpactFactor, impactExponentFactor);\\n        uint256 deltaDiffUsd = Calc.diff(positiveImpactUsd, negativeImpactUsd);\\n\\n        int256 priceImpactUsd = Calc.toSigned(deltaDiffUsd, positiveImpactUsd > negativeImpactUsd);\\n\\n        return priceImpactUsd;\\n    }\\n\\n    function applyImpactFactor(\\n        uint256 diffUsd,\\n        uint256 impactFactor,\\n        uint256 impactExponentFactor\\n    ) internal pure returns (uint256) {\\n        // `PRBMathUD60x18.pow` doesn't work for `x` less than one\\n        if (diffUsd < Precision.FLOAT_PRECISION) {\\n            return 0;\\n        }\\n\\n        // `PRBMathUD60x18.pow` accepts 2 fixed point numbers 60x18\\n        // we need to convert float (30 decimals) to 60x18 (18 decimals) and then back to 30 decimals\\n        uint256 adjustedDiffUsd = PRBMathUD60x18.pow(\\n            Precision.floatToWei(diffUsd),\\n            Precision.floatToWei(impactExponentFactor)\\n        );\\n        adjustedDiffUsd = Precision.weiToFloat(adjustedDiffUsd);\\n\\n        return Precision.applyFactor(adjustedDiffUsd, impactFactor) / 2;\\n    }\\n\\n    function transferFees(\\n        FeeReceiver feeReceiver,\\n        address marketToken,\\n        address token,\\n        uint256 feeReceiverAmount,\\n        bytes32 feeType\\n    ) internal {\\n        if (feeReceiverAmount > 0) {\\n            MarketToken(payable(marketToken)).transferOut(token, feeReceiverAmount, address(feeReceiver));\\n            feeReceiver.notifyFeeReceived(feeType, token, feeReceiverAmount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x34d083896f44ca4bd05cbc564c7de303282f266a687941a9d1717903a6411afb\",\"license\":\"BUSL-1.1\"},\"contracts/pricing/SwapPricingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../market/MarketUtils.sol\\\";\\n\\nimport \\\"../utils/Precision.sol\\\";\\nimport \\\"../utils/Calc.sol\\\";\\n\\nimport \\\"./PricingUtils.sol\\\";\\n\\nlibrary SwapPricingUtils {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    struct GetPriceImpactUsdParams {\\n        DataStore dataStore;\\n        address market;\\n        address tokenA;\\n        address tokenB;\\n        uint256 priceForTokenA;\\n        uint256 priceForTokenB;\\n        int256 usdDeltaForTokenA;\\n        int256 usdDeltaForTokenB;\\n    }\\n\\n    struct PoolParams {\\n        uint256 poolUsdForTokenA;\\n        uint256 poolUsdForTokenB;\\n        uint256 nextPoolUsdForTokenA;\\n        uint256 nextPoolUsdForTokenB;\\n    }\\n\\n    struct SwapFees {\\n        uint256 feeReceiverAmount;\\n        uint256 feesForPool;\\n        uint256 amountAfterFees;\\n        uint256 amountForPool;\\n    }\\n\\n    // note that there will be some difference between the pool amounts used for\\n    // calculating the price impact and fees vs the actual pool amounts after the\\n    // swap is done, since the pool amounts will be increased / decreased by an amount\\n    // after factoring in the calculated price impact and fees\\n    //\\n    // since the calculations are based on the real-time prices values of the tokens\\n    // if a token price increases, the pool will incentivise swapping out more of that token\\n    // this is useful if prices are ranging, if prices are strongly directional, the pool may\\n    // be selling tokens as the token price increases\\n    //\\n    // returns (priceImpactUsd)\\n    function getPriceImpactUsd(GetPriceImpactUsdParams memory params) internal view returns (int256) {\\n        PoolParams memory poolParams = getNextPoolAmountsUsd(params);\\n\\n        int256 priceImpactUsd = _getPriceImpactUsd(params.dataStore, params.market, poolParams);\\n\\n        return priceImpactUsd;\\n    }\\n\\n    function _getPriceImpactUsd(DataStore dataStore, address market, PoolParams memory poolParams) internal view returns (int256) {\\n        uint256 initialDiffUsd = Calc.diff(poolParams.poolUsdForTokenA, poolParams.poolUsdForTokenB);\\n        uint256 nextDiffUsd = Calc.diff(poolParams.nextPoolUsdForTokenA, poolParams.nextPoolUsdForTokenB);\\n\\n        // check whether an improvement in balance comes from causing the balance to switch sides\\n        // for example, if there is $2000 of ETH and $1000 of USDC in the pool\\n        // adding $1999 USDC into the pool will reduce absolute balance from $1000 to $999 but it does not\\n        // help rebalance the pool much, the isSameSideRebalance value helps avoid gaming using this case\\n        bool isSameSideRebalance = poolParams.poolUsdForTokenA <= poolParams.poolUsdForTokenB == poolParams.nextPoolUsdForTokenA <= poolParams.nextPoolUsdForTokenB;\\n        uint256 impactExponentFactor = dataStore.getUint(Keys.swapImpactExponentFactorKey(market));\\n\\n        if (isSameSideRebalance) {\\n            bool hasPositiveImpact = nextDiffUsd < initialDiffUsd;\\n            uint256 impactFactor = dataStore.getUint(Keys.swapImpactFactorKey(market, hasPositiveImpact));\\n\\n            return PricingUtils.getPriceImpactUsdForSameSideRebalance(\\n                initialDiffUsd,\\n                nextDiffUsd,\\n                hasPositiveImpact,\\n                impactFactor,\\n                impactExponentFactor\\n            );\\n        } else {\\n            uint256 positiveImpactFactor = dataStore.getUint(Keys.swapImpactFactorKey(market, true));\\n            uint256 negativeImpactFactor = dataStore.getUint(Keys.swapImpactFactorKey(market, false));\\n\\n            return PricingUtils.getPriceImpactUsdForCrossoverRebalance(\\n                initialDiffUsd,\\n                nextDiffUsd,\\n                positiveImpactFactor,\\n                negativeImpactFactor,\\n                impactExponentFactor\\n            );\\n        }\\n    }\\n\\n    function getNextPoolAmountsUsd(\\n        GetPriceImpactUsdParams memory params\\n    ) internal view returns (PoolParams memory) {\\n        uint256 poolAmountForTokenA = MarketUtils.getPoolAmount(params.dataStore, params.market, params.tokenA);\\n        uint256 poolAmountForTokenB = MarketUtils.getPoolAmount(params.dataStore, params.market, params.tokenB);\\n\\n        uint256 poolUsdForTokenA = poolAmountForTokenA * params.priceForTokenA;\\n        uint256 poolUsdForTokenB = poolAmountForTokenB * params.priceForTokenB;\\n\\n        uint256 nextPoolUsdForTokenA = Calc.sum(poolUsdForTokenA, params.usdDeltaForTokenA);\\n        uint256 nextPoolUsdForTokenB = Calc.sum(poolUsdForTokenB, params.usdDeltaForTokenB);\\n\\n        PoolParams memory poolParams = PoolParams(\\n            poolUsdForTokenA,\\n            poolUsdForTokenB,\\n            nextPoolUsdForTokenA,\\n            nextPoolUsdForTokenB\\n        );\\n\\n        return poolParams;\\n    }\\n\\n    function getSwapFees(\\n        DataStore dataStore,\\n        address marketToken,\\n        uint256 amount,\\n        bytes32 feeReceiverFactorKey\\n    ) internal view returns (SwapFees memory) {\\n        SwapFees memory fees;\\n\\n        uint256 feeFactor = dataStore.getUint(Keys.swapFeeFactorKey(marketToken));\\n        uint256 feeReceiverFactor = dataStore.getUint(feeReceiverFactorKey);\\n\\n        uint256 feeAmount = Precision.applyFactor(amount, feeFactor);\\n\\n        fees.feeReceiverAmount = Precision.applyFactor(feeAmount, feeReceiverFactor);\\n        fees.feesForPool = feeAmount - fees.feeReceiverAmount;\\n        fees.amountAfterFees = amount - feeAmount;\\n\\n        return fees;\\n    }\\n}\\n\",\"keccak256\":\"0x117159d946ae0f758246f37efa80fe47e79eebf25d2e4d0a6a1f8cfbab5b20a2\",\"license\":\"BUSL-1.1\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Role {\\n    bytes32 public constant CONTROLLER = keccak256(\\\"CONTROLLER\\\");\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(\\\"ROUTER_PLUGIN\\\");\\n    bytes32 public constant MARKET_KEEPER = keccak256(\\\"MARKET_KEEPER\\\");\\n    bytes32 public constant ORDER_KEEPER = keccak256(\\\"ORDER_KEEPER\\\");\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(\\\"FROZEN_ORDER_KEEPER\\\");\\n    bytes32 public constant PRICING_KEEPER = keccak256(\\\"PRICING_KEEPER\\\");\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(\\\"LIQUIDATION_KEEPER\\\");\\n}\\n\",\"keccak256\":\"0x6c720332d3fa93828949b3594ffe43a1c69f54a195b113c1a10721a0a464f645\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleStore.sol\\\";\\nimport \\\"./Role.sol\\\";\\nimport \\\"../gov/Governable.sol\\\";\\n\\ncontract RoleModule is Governable {\\n    RoleStore immutable roleStore;\\n\\n    constructor(RoleStore _roleStore) {\\n        roleStore = _roleStore;\\n    }\\n\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) {\\n            revert Unauthorized(msg.sender, \\\"SELF\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        _validateRole(Role.CONTROLLER, \\\"CONTROLLER\\\");\\n        _;\\n    }\\n\\n    modifier onlyRouterPlugin() {\\n        _validateRole(Role.ROUTER_PLUGIN, \\\"ROUTER_PLUGIN\\\");\\n        _;\\n    }\\n\\n    modifier onlyMarketKeeper() {\\n        _validateRole(Role.MARKET_KEEPER, \\\"MARKET_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyOrderKeeper() {\\n        _validateRole(Role.ORDER_KEEPER, \\\"ORDER_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyPricingKeeper() {\\n        _validateRole(Role.PRICING_KEEPER, \\\"PRICING_KEEPER\\\");\\n        _;\\n    }\\n\\n    modifier onlyLiquidationKeeper() {\\n        _validateRole(Role.LIQUIDATION_KEEPER, \\\"LIQUIDATION_KEEPER\\\");\\n        _;\\n    }\\n\\n    function _validateRole(bytes32 role, string memory roleName) internal view {\\n        if (!roleStore.hasRole(msg.sender, role)) {\\n            revert Unauthorized(msg.sender, roleName);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc316c9c31f8742fc6cfffcccc9e3f75979d042ac8efb7135bc1940513259c291\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../utils/EnumerableValues.sol\\\";\\nimport \\\"../gov/Governable.sol\\\";\\n\\ncontract RoleStore is Governable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    EnumerableSet.Bytes32Set internal roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\n    // checking if an account has a role is a frequently used function\\n    // roleCache helps to save gas by offering a more efficient lookup\\n    // vs calling roleMembers[key].contains(account)\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\n\\n    function grantRole(address account, bytes32 key) external onlyGov {\\n        roles.add(key);\\n        roleMembers[key].add(account);\\n        roleCache[account][key] = true;\\n    }\\n\\n    function revokeRole(address account, bytes32 key) external onlyGov {\\n        roleMembers[key].remove(account);\\n        roleCache[account][key] = false;\\n    }\\n\\n    function hasRole(address account, bytes32 key) external view returns (bool) {\\n        return roleCache[account][key];\\n    }\\n\\n    function getRoleCount() external view returns (uint256) {\\n        return roles.length();\\n    }\\n\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return roles.valuesAt(start, end);\\n    }\\n\\n    function getRoleMemberCount(bytes32 key) external view returns (uint256) {\\n        return roleMembers[key].length();\\n    }\\n\\n    function getRoleMembers(bytes32 key, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return roleMembers[key].valuesAt(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0x526d555fb85cb999a71fe99e60e6f9a8e9351a62cff4a2cf6e3a5f763178886d\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Array.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary Array {\\n    using SafeCast for int256;\\n\\n    function get(bytes32[] memory arr, uint256 index) internal pure returns (bytes32) {\\n        if (index < arr.length) {\\n            return arr[index];\\n        }\\n\\n        return bytes32(0);\\n    }\\n\\n    function createCopy(bytes32[] memory arr, uint256 index, bytes32 value) internal pure returns (bytes32[] memory) {\\n        if (index < arr.length) {\\n            arr[index] = value;\\n            return arr;\\n        }\\n\\n        bytes32[] memory newArr = createResized(arr, index + 1);\\n        newArr[index] = value;\\n\\n        return newArr;\\n    }\\n\\n    function createResized(bytes32[] memory arr, uint256 length) internal pure returns (bytes32[] memory) {\\n        if (length <= arr.length) {\\n            return arr;\\n        }\\n\\n        bytes32[] memory newArr = new bytes32[](length);\\n\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            newArr[i] = arr[i];\\n        }\\n\\n        return newArr;\\n    }\\n\\n    function areEqualTo(uint256[] memory arr, uint256 value) internal pure returns (bool) {\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            if (arr[i] != value) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function areGreaterThan(uint256[] memory arr, uint256 value) internal pure returns (bool) {\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            if (arr[i] <= value) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function getMedian(uint256[] memory arr) internal pure returns (uint256) {\\n        if (arr.length % 2 == 1) {\\n            return arr[arr.length / 2];\\n        }\\n\\n        return (arr[arr.length / 2] + arr[arr.length / 2 - 1]) / 2;\\n    }\\n\\n    function getUncompactedValue(\\n        uint256[] memory compactedValues,\\n        uint256 index,\\n        uint256 compactedValueBitLength,\\n        uint256 bitmask\\n    ) internal pure returns (uint256) {\\n        uint256 compactedValuesPerSlot = 256 / compactedValueBitLength;\\n\\n        uint256 slotIndex = index / compactedValuesPerSlot;\\n        uint256 slotBits = compactedValues[slotIndex];\\n        uint256 offset = (index - slotIndex * compactedValuesPerSlot) * compactedValueBitLength;\\n\\n        uint256 value = (slotBits >> offset) & bitmask;\\n\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0xf9d22ce1e027fd882f1aac30f0eb6b290b99deec67dd187382f0466a60f07c52\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Bits.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Bits {\\n    // uint256(~0) is 256 bits of 1s\\n    // shift the 1s by (256 - 8) to get (256 - 8) 0s followed by 8 1s\\n    uint256 constant public BITMASK_8 = ~uint256(0) >> (256 - 8);\\n    // shift the 1s by (256 - 16) to get (256 - 16) 0s followed by 16 1s\\n    uint256 constant public BITMASK_16 = ~uint256(0) >> (256 - 16);\\n    // shift the 1s by (256 - 32) to get (256 - 32) 0s followed by 32 1s\\n    uint256 constant public BITMASK_32 = ~uint256(0) >> (256 - 32);\\n    // shift the 1s by (256 - 64) to get (256 - 64) 0s followed by 64 1s\\n    uint256 constant public BITMASK_64 = ~uint256(0) >> (256 - 64);\\n}\\n\",\"keccak256\":\"0xd006868e7555c772123f8ce840e616bc5f0cf9f9545ea84e0e1775b4595f04d2\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Calc.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary Calc {\\n    using SignedMath for int256;\\n\\n    function diff(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a - b : b - a;\\n    }\\n\\n    function roundUpDivision(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a + b - 1) / b;\\n    }\\n\\n    function sum(uint256 a, int256 b) internal pure returns (uint256) {\\n        if (b > 0) {\\n            return a + b.abs();\\n        }\\n\\n        return a - b.abs();\\n    }\\n\\n    function sum(int256 a, uint256 b) internal pure returns (int256) {\\n        return a + SafeCast.toInt256(b);\\n    }\\n\\n    function toSigned(uint256 a, bool isPositive) internal pure returns (int256) {\\n        if (isPositive) {\\n            return SafeCast.toInt256(a);\\n        } else {\\n            return -SafeCast.toInt256(a);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x31de6ff9f5611d740c58b7bfc5a69682c2ed3e6a2fae23cad1ec1beb603903f3\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary EnumerableValues {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        bytes32[] memory items = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        address[] memory items = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        uint256[] memory items = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0x671d7dc4a6f0e901c78c267ca003c232aed0ab5a18d4ee57e7d355e81f2347f9\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Precision.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary Precision {\\n    using SafeCast for uint256;\\n\\n    uint256 public constant FLOAT_PRECISION = 10 ** 30;\\n    uint256 public constant WEI_PRECISION = 10 ** 18;\\n\\n    uint256 public constant FLOAT_TO_WEI_DIVISOR = 10 ** 12;\\n\\n    function applyFactor(uint256 amount, uint256 factor) internal pure returns (uint256) {\\n        return amount * factor / FLOAT_PRECISION;\\n    }\\n\\n    function applyFactor(uint256 amount, int256 factor) internal pure returns (int256) {\\n        return amount.toInt256() * factor / FLOAT_PRECISION.toInt256();\\n    }\\n\\n    function floatToWei(uint256 amount) internal pure returns (uint256) {\\n        return amount / FLOAT_TO_WEI_DIVISOR;\\n    }\\n\\n    function weiToFloat(uint256 amount) internal pure returns (uint256) {\\n        return amount * FLOAT_TO_WEI_DIVISOR;\\n    }\\n}\\n\",\"keccak256\":\"0x3a7a538ab1cccda683ac63fb1def35570fd497c2cc6d0cc800e96d5d05b34bae\",\"license\":\"BUSL-1.1\"},\"contracts/withdrawal/Withdrawal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// since the withdrawal store should be replaceable without requiring a migration\\n// use normal attributes instead of props mapping like in positions\\nlibrary Withdrawal {\\n    struct Props {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address market;\\n        uint256 marketTokensLongAmount;\\n        uint256 marketTokensShortAmount;\\n        uint256 minLongTokenAmount;\\n        uint256 minShortTokenAmount;\\n        uint256 updatedAtBlock;\\n        bool shouldConvertETH;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x66af169fe1c22aef794340370bfbb1411f2407b34d0f136b4baa4b728f9819bc\",\"license\":\"BUSL-1.1\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n// pragma solidity >=0.8.4;\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ef47381f924e401db9e891dfdf739c3220e493c2f0c9c881d98cef79de0c18e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101075760003560e01c806312d43a511461010c57806316345f18146101355780631a48897f146101635780632986cc4314610179578063392bf7f61461018e5780633b9f9bd2146101a157806359ecd657146101a95780635dcf7194146101b157806363c9d056146101c45780636a22ad2b146101f957806383a2aae21461020c57806389fd4d3d1461021f578063914687f114610232578063968270ce14610245578063a2bbd6041461026c578063ad3be44d14610293578063b26c9d791461029b578063b74da61d146102bb578063ba9a91a5146102c4578063cfad57a2146102eb578063e3458b79146102fe575b600080fd5b60005461011f906001600160a01b031681565b60405161012c9190612407565b60405180910390f35b610148610143366004612430565b610311565b6040805182518152602092830151928101929092520161012c565b61016b6103b4565b60405190815260200161012c565b61018c6101873660046124bc565b6103c5565b005b60015461011f906001600160a01b031681565b61016b601081565b61016b61042a565b6101486101bf366004612430565b610446565b6101eb6101d2366004612430565b6005602052600090815260409020805460019091015482565b60405161012c929190612530565b61016b61020736600461253e565b6104ad565b61014861021a366004612430565b610553565b61014861022d366004612430565b6105b4565b61018c61024036600461274c565b610615565b6101eb610253366004612430565b6006602052600090815260409020805460019091015482565b6101eb61027a366004612430565b6004602052600090815260409020805460019091015482565b61018c6109dc565b6102ae6102a93660046128e8565b610aa3565b60405161012c919061290a565b61016b61010081565b61016b7f000000000000000000000000000000000000000000000000000000000000000081565b61018c6102f9366004612430565b610ab1565b61018c61030c3660046124bc565b610b06565b6103196123ed565b6001600160a01b03821660008181526004602090815260408083208151808301835281548152600191820154818501529484526005835292819020815180830190925280548252909201549082015261037181610b6b565b61037c579392505050565b61038582610b6b565b610390575092915050565b836040516305346b4b60e41b81526004016103ab9190612407565b60405180910390fd5b60006103c06002610b80565b905090565b6103ff600080516020612c118339815191526040518060400160405280600a81526020016921a7a72a2927a62622a960b11b815250610b8a565b6001600160a01b03909116600090815260056020908152604090912082518155910151600190910155565b60016104396010610100612983565b6104439190612997565b81565b61044e6123ed565b6001600160a01b038216600090815260046020908152604091829020825180840190935280548352600101549082015261048781610b6b565b156104a7578260405163cd64a02560e01b81526004016103ab9190612407565b92915050565b600080836001600160a01b031663bd02d0f56104c885610c3a565b6040518263ffffffff1660e01b81526004016104e691815260200190565b602060405180830381865afa158015610503573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052791906129aa565b90508060000361054c5782604051630c3e1a9560e41b81526004016103ab9190612407565b9392505050565b61055b6123ed565b6001600160a01b038216600090815260056020908152604091829020825180840190935280548352600101549082015261059481610b6b565b156104a7578260405163158a924160e01b81526004016103ab9190612407565b6105bc6123ed565b6001600160a01b03821660009081526006602090815260409182902082518084019093528054835260010154908201526105f581610b6b565b156104a75782604051634bf444af60e11b81526004016103ab9190612407565b61064f600080516020612c118339815191526040518060400160405280600a81526020016921a7a72a2927a62622a960b11b815250610b8a565b6106596002610b80565b156106a65760405162461bcd60e51b815260206004820152601e60248201527f4f7261636c653a2074656d70546f6b656e73206e6f7420636c6561726564000060448201526064016103ab565b8060200151516000036106cc57604051631335351b60e31b815260040160405180910390fd5b805160009061ffff166001600160401b038111156106ec576106ec61244d565b604051908082528060200260200182016040528015610715578160200160208202803683370190505b5060405163bd02d0f560e01b8152600080516020612c3183398151915260048201529091506001600160a01b0385169063bd02d0f590602401602060405180830381865afa15801561076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078f91906129aa565b8151101561082a57805160405163bd02d0f560e01b8152600080516020612c3183398151915260048201526001600160a01b0386169063bd02d0f590602401602060405180830381865afa1580156107eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080f91906129aa565b6040516354f3110960e11b81526004016103ab929190612530565b60016108396010610100612983565b6108439190612997565b81511115610881578051600161085c6010610100612983565b6108669190612997565b60405163345da1b360e01b81526004016103ab929190612530565b6000805b82518110156109b857600061ffff61089e8360106129c3565b6108a99060106129e2565b8651901c16905061010081106108d85780610100604051633444aeaf60e21b81526004016103ab929190612530565b6001811b8381161561090057604051639f4f72e160e01b8152600481018390526024016103ab565b600154604051631fff7f2760e11b815260048101849052948217946001600160a01b0390911690633ffefe4e90602401602060405180830381865afa15801561094d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097191906129f5565b85848151811061098357610983612a12565b60200260200101906001600160a01b031690816001600160a01b031681525050505080806109b090612a28565b915050610885565b506109c585858486610c94565b6109d585858561010001516115a8565b5050505050565b610a16600080516020612c118339815191526040518060400160405280600a81526020016921a7a72a2927a62622a960b11b815250610b8a565b6000610a226002610b80565b905060005b81811015610a9f576000610a3c60028261195d565b6001600160a01b038116600090815260046020908152604080832083815560019081018490556005835281842084815581018490556006909252822082815501559050610a8a600282611969565b50508080610a9790612a28565b915050610a27565b5050565b606061054c6002848461197e565b6000546001600160a01b03163314610afa576040805163a35b150b60e01b81523360048201526024810191909152600360448201526223a7ab60e91b60648201526084016103ab565b610b0381611a4b565b50565b610b40600080516020612c118339815191526040518060400160405280600a81526020016921a7a72a2927a62622a960b11b815250610b8a565b6001600160a01b03909116600090815260066020908152604090912082518155910151600190910155565b805160009015806104a7575050602001511590565b60006104a7825490565b60405163ac4ab3fb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ac4ab3fb90604401602060405180830381865afa158015610bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c199190612a41565b610a9f57338160405163a35b150b60e01b81526004016103ab929190612aa9565b60006040518060400160405280601081526020016f27a920a1a622afa82922a1a4a9a4a7a760811b81525082604051602001610c77929190612acd565b604051602081830303815290604052805190602001209050919050565b610cf96040518061014001604052806000815260200160008152602001600081526020016000801916815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160608152602001606081525090565b60405163bd02d0f560e01b81527fc5f146385442601b83dc692a2045a6a51c328c57eb744cd7fe9db21ece2732ea60048201526001600160a01b0386169063bd02d0f590602401602060405180830381865afa158015610d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8191906129aa565b815260405163bd02d0f560e01b81527ff29e6bd77bed61b07ec6a7881427e90c9600db7bb81d2d475f1b744dcdd852ef60048201526001600160a01b0386169063bd02d0f590602401602060405180830381865afa158015610de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b91906129aa565b60e082015260005b8260200151518110156115a057610e2e836040015182611aaa565b6040830152610e3b611ae4565b82604001511115610e67578160400151604051634fa557df60e11b81526004016103ab91815260200190565b610e6f611ae4565b8260e001518360400151610e8391906129e2565b1015610eaa57816040015160405163403b4b8f60e11b81526004016103ab91815260200190565b816020015182604001511015610edf57816040015182602001516040516311aeaf6b60e01b81526004016103ab929190612530565b60408201516020830181905260006060840152825190610efd611ae4565b610f079190612997565b11610f1f57610f198260400151611b65565b60608301525b82602001518181518110610f3557610f35612a12565b60209081029190910101516001600160a01b0390811660808401819052908716906354f6127f90610f6590611be4565b6040518263ffffffff1660e01b8152600401610f8391815260200190565b602060405180830381865afa158015610fa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc491906129aa565b60a083015283516001600160401b03811115610fe257610fe261244d565b60405190808252806020026020018201604052801561100b578160200160208202803683370190505b5061010083015283516001600160401b0381111561102b5761102b61244d565b604051908082528060200260200182016040528015611054578160200160208202803683370190505b5061012083015260005b845181101561125e5761107984606001518460c00151611c1c565b836101000151828151811061109057611090612a12565b6020026020010181815250506110ae8460a001518460c00151611c1c565b83610120015182815181106110c5576110c5612a12565b6020908102919091010152801561124c5782610100015181815181106110ed576110ed612a12565b60200260200101518361010001516001836111089190612997565b8151811061111857611118612a12565b60200260200101511115611191578260800151836101000151828151811061114257611142612a12565b602002602001015184610100015160018461115d9190612997565b8151811061116d5761116d612a12565b60200260200101516040516312e64acd60e21b81526004016103ab93929190612af7565b82610120015181815181106111a8576111a8612a12565b60200260200101518361012001516001836111c39190612997565b815181106111d3576111d3612a12565b6020026020010151111561124c57826080015183610120015182815181106111fd576111fd612a12565b60200260200101518461012001516001846112189190612997565b8151811061122857611228612a12565b6020026020010151604051633d4156e560e21b81526004016103ab93929190612af7565b8061125681612a28565b91505061105e565b5060005b845181101561135f578085518361127991906129c3565b61128391906129e2565b60c08401819052608085015160009161129c9190611c53565b905060006112b28660c001518660c00151611c53565b905061134a8560400151866060015187608001518860a0015189610100015187815181106112e2576112e2612a12565b60200260200101518a6101200151878151811061130157611301612a12565b60200260200101518c60e001518c60c001518151811061132357611323612a12565b60200260200101518e8b8151811061133d5761133d612a12565b6020026020010151611c6c565b5050808061135790612a28565b915050611262565b5060006113708784608001516104ad565b61137e846101000151611d3f565b61138891906129c3565b9050600061139a8885608001516104ad565b6113a8856101200151611d3f565b6113b291906129c3565b90508115806113bf575080155b156113e35783608001516040516303a4d96160e51b81526004016103ab9190612407565b60808401516001600160a01b0316600090815260046020908152604091829020825180840190935280548352600101549082015261142090610b6b565b156114d257608084015160405163c2b7f0e360e01b81526001600160a01b0389169163c2b7f0e39161145f919086908690600190600090600401612b18565b600060405180830381600087803b15801561147957600080fd5b505af115801561148d573d6000803e3d6000fd5b5050604080518082018252858152602080820186815260808a01516001600160a01b031660009081526004909252929020905181559051600190910155506115799050565b608084015160405163c2b7f0e360e01b81526001600160a01b0389169163c2b7f0e39161150b9190869086906000908190600401612b18565b600060405180830381600087803b15801561152557600080fd5b505af1158015611539573d6000803e3d6000fd5b5050604080518082018252858152602080820186815260808a01516001600160a01b03166000908152600590925292902090518155905160019091015550505b608084015161158a90600290611df4565b505050808061159890612a28565b915050610e13565b505050505050565b60005b81518110156119575760008282815181106115c8576115c8612a12565b6020026020010151905061161e60046000836001600160a01b03166001600160a01b0316815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050610b6b565b6116665760405162461bcd60e51b815260206004820152601960248201527813dc9858db194e881c1c9a58d948185b1c9958591e481cd95d603a1b60448201526064016103ab565b6000856001600160a01b03166321f8a72161168084611e09565b6040518263ffffffff1660e01b815260040161169e91815260200190565b602060405180830381865afa1580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df91906129f5565b90506001600160a01b0381166117345760405162461bcd60e51b815260206004820152601a60248201527913dc9858db194e881a5b9d985b1a59081c1c9a58d9481999595960321b60448201526064016103ab565b60008190506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611779573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179d9190612b66565b50505091505060006117ae82611e40565b90506000896001600160a01b031663bd02d0f56117ca88611e96565b6040518263ffffffff1660e01b81526004016117e891815260200190565b602060405180830381865afa158015611805573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182991906129aa565b90508060000361184e57856040516304e3431b60e01b81526004016103ab9190612407565b68327cb2734119d3b7a9601e1b61186582846129c3565b61186f9190612983565b9150816000036118945785604051631407006f60e01b81526004016103ab9190612407565b60408051808201825283815260208082018581526001600160a01b038a16600090815260049092529290209051815590516001909101556118d6600287611df4565b5060405163c2b7f0e360e01b81526001600160a01b038a169063c2b7f0e39061190c908990869081906001908190600401612b18565b600060405180830381600087803b15801561192657600080fd5b505af115801561193a573d6000803e3d6000fd5b50505050505050505050808061194f90612a28565b9150506115ab565b50505050565b600061054c8383611ed7565b600061054c836001600160a01b038416611f01565b6060600061198b85610b80565b905080831115611999578092505b60006119a58585612997565b6001600160401b038111156119bc576119bc61244d565b6040519080825280602002602001820160405280156119e5578160200160208202803683370190505b509050845b84811015611a41576119fc878261195d565b82611a078884612997565b81518110611a1757611a17612a12565b6001600160a01b039092166020928302919091019091015280611a3981612a28565b9150506119ea565b5095945050505050565b600080546001600160a01b038381166001600160a01b03198316179092556040519116907f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f78590611a9e9083908590612bb6565b60405180910390a15050565b600080611ac1848460406001600160401b03611ff4565b90508060000361054c576040516329d56bcd60e21b815260040160405180910390fd5b600061a4b1461480611af8575062066eeb46145b15611b605760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b3c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c091906129aa565b504390565b600061a4b1461480611b79575062066eeb46145b15611bdf576040516315a03d4160e11b815260048101839052606490632b407a8290602401602060405180830381865afa158015611bbb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a791906129aa565b504090565b60006040518060400160405280600b81526020016a4f5241434c455f5459504560a81b81525082604051602001610c77929190612acd565b600080611c308484602063ffffffff611ff4565b90508060000361054c57604051632c3be8db60e21b815260040160405180910390fd5b600080611c648484600860ff611ff4565b949350505050565b604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101899052606081018890526001600160a01b038716608082015260a0810186905260c0810185905260e08101849052600090611ced906101000160405160208183030381529060405280519060200120612067565b90506000611cfb82856120a1565b9050826001600160a01b0316816001600160a01b031614611d335780836040516310b5d43760e21b81526004016103ab929190612bb6565b50505050505050505050565b600060028251611d4f9190612bd0565b600103611d84578160028351611d659190612983565b81518110611d7557611d75612a12565b60200260200101519050919050565b600282600160028551611d979190612983565b611da19190612997565b81518110611db157611db1612a12565b60200260200101518360028551611dc89190612983565b81518110611dd857611dd8612a12565b6020026020010151611dea91906129e2565b6104a79190612983565b600061054c836001600160a01b0384166120c5565b60006040518060400160405280600a81526020016914149250d157d191515160b21b81525082604051602001610c77929190612acd565b600080821215611e925760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016103ab565b5090565b600060405180604001604052806014815260200173282924a1a2afa322a2a22fa82922a1a4a9a4a7a760611b81525082604051602001610c77929190612acd565b6000826000018281548110611eee57611eee612a12565b9060005260206000200154905092915050565b60008181526001830160205260408120548015611fea576000611f25600183612997565b8554909150600090611f3990600190612997565b9050818114611f9e576000866000018281548110611f5957611f59612a12565b9060005260206000200154905080876000018481548110611f7c57611f7c612a12565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611faf57611faf612be4565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104a7565b60009150506104a7565b60008061200384610100612983565b905060006120118287612983565b9050600087828151811061202757612027612a12565b60200260200101519050600086848461204091906129c3565b61204a908a612997565b61205491906129c3565b9190911c85169350505050949350505050565b6040517b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b6020820152603c8101829052600090605c01610c77565b60008060006120b08585612114565b915091506120bd81612159565b509392505050565b600081815260018301602052604081205461210c575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104a7565b5060006104a7565b600080825160410361214a5760208301516040840151606085015160001a61213e8782858561230a565b94509450505050612152565b506000905060025b9250929050565b600081600481111561216d5761216d612bfa565b036121755750565b600181600481111561218957612189612bfa565b036121d15760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016103ab565b60028160048111156121e5576121e5612bfa565b036122325760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016103ab565b600381600481111561224657612246612bfa565b0361229e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016103ab565b60048160048111156122b2576122b2612bfa565b03610b035760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016103ab565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0383111561233757506000905060036123e4565b8460ff16601b1415801561234f57508460ff16601c14155b1561236057506000905060046123e4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156123b4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166123dd576000600192509250506123e4565b9150600090505b94509492505050565b604051806040016040528060008152602001600081525090565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114610b0357600080fd5b60006020828403121561244257600080fd5b813561054c8161241b565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b03811182821017156124865761248661244d565b60405290565b604051601f8201601f191681016001600160401b03811182821017156124b4576124b461244d565b604052919050565b60008082840360608112156124d057600080fd5b83356124db8161241b565b92506040601f19820112156124ef57600080fd5b50604080519081016001600160401b03811182821017156125125761251261244d565b60409081526020858101358352940135938101939093525092909150565b918252602082015260400190565b6000806040838503121561255157600080fd5b823561255c8161241b565b9150602083013561256c8161241b565b809150509250929050565b60006001600160401b038211156125905761259061244d565b5060051b60200190565b600082601f8301126125ab57600080fd5b813560206125c06125bb83612577565b61248c565b82815260059290921b840181019181810190868411156125df57600080fd5b8286015b848110156126035780356125f68161241b565b83529183019183016125e3565b509695505050505050565b600082601f83011261261f57600080fd5b8135602061262f6125bb83612577565b82815260059290921b8401810191818101908684111561264e57600080fd5b8286015b848110156126035780358352918301918301612652565b6000601f838184011261267b57600080fd5b8235602061268b6125bb83612577565b82815260059290921b850181019181810190878411156126aa57600080fd5b8287015b848110156127405780356001600160401b03808211156126ce5760008081fd5b818a0191508a603f8301126126e35760008081fd5b858201356040828211156126f9576126f961244d565b61270a828b01601f1916890161248c565b92508183528c818386010111156127215760008081fd5b81818501898501375060009082018701528452509183019183016126ae565b50979650505050505050565b60008060006060848603121561276157600080fd5b833561276c8161241b565b9250602084013561277c8161241b565b915060408401356001600160401b038082111561279857600080fd5b9085019061012082880312156127ad57600080fd5b6127b5612463565b823581526020830135828111156127cb57600080fd5b6127d78982860161259a565b6020830152506040830135828111156127ef57600080fd5b6127fb8982860161260e565b60408301525060608301358281111561281357600080fd5b61281f8982860161260e565b60608301525060808301358281111561283757600080fd5b6128438982860161260e565b60808301525060a08301358281111561285b57600080fd5b6128678982860161260e565b60a08301525060c08301358281111561287f57600080fd5b61288b8982860161260e565b60c08301525060e0830135828111156128a357600080fd5b6128af89828601612669565b60e08301525061010080840135838111156128c957600080fd5b6128d58a82870161259a565b8284015250508093505050509250925092565b600080604083850312156128fb57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561294b5783516001600160a01b031683529284019291840191600101612926565b50909695505050505050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008261299257612992612957565b500490565b818103818111156104a7576104a761296d565b6000602082840312156129bc57600080fd5b5051919050565b60008160001904831182151516156129dd576129dd61296d565b500290565b808201808211156104a7576104a761296d565b600060208284031215612a0757600080fd5b815161054c8161241b565b634e487b7160e01b600052603260045260246000fd5b600060018201612a3a57612a3a61296d565b5060010190565b600060208284031215612a5357600080fd5b8151801515811461054c57600080fd5b6000815180845260005b81811015612a8957602081850181015186830182015201612a6d565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0383168152604060208201819052600090611c6490830184612a63565b604081526000612ae06040830185612a63565b905060018060a01b03831660208301529392505050565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b0395909516855260208501939093526040840191909152151560608301521515608082015260a00190565b80516001600160501b0381168114612b6157600080fd5b919050565b600080600080600060a08688031215612b7e57600080fd5b612b8786612b4a565b9450602086015193506040860151925060608601519150612baa60808701612b4a565b90509295509295909350565b6001600160a01b0392831681529116602082015260400190565b600082612bdf57612bdf612957565b500690565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052602160045260246000fdfe70546d1c92f8c2132ae23a23f5177aa8526356051c7510df99f50e012d2215293068f19c1b3fe1cfef45b175668db422de7f776d9c40328ad069d583f75f55caa26469706673582212206f1b0bec859022e76b4200f33d9089d90cdc3fdabeb00904cf71dce00f0501d364736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10641,
        "contract": "contracts/oracle/Oracle.sol:Oracle",
        "label": "gov",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13304,
        "contract": "contracts/oracle/Oracle.sol:Oracle",
        "label": "oracleStore",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(OracleStore)14703"
      },
      {
        "astId": 13307,
        "contract": "contracts/oracle/Oracle.sol:Oracle",
        "label": "tempTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)4299_storage"
      },
      {
        "astId": 13312,
        "contract": "contracts/oracle/Oracle.sol:Oracle",
        "label": "primaryPrices",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Props)20059_storage)"
      },
      {
        "astId": 13317,
        "contract": "contracts/oracle/Oracle.sol:Oracle",
        "label": "secondaryPrices",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Props)20059_storage)"
      },
      {
        "astId": 13322,
        "contract": "contracts/oracle/Oracle.sol:Oracle",
        "label": "customPrices",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Props)20059_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(OracleStore)14703": {
        "encoding": "inplace",
        "label": "contract OracleStore",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Props)20059_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Price.Props)",
        "numberOfBytes": "32",
        "value": "t_struct(Props)20059_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4299_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4298,
            "contract": "contracts/oracle/Oracle.sol:Oracle",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3998_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Props)20059_storage": {
        "encoding": "inplace",
        "label": "struct Price.Props",
        "members": [
          {
            "astId": 20056,
            "contract": "contracts/oracle/Oracle.sol:Oracle",
            "label": "min",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20058,
            "contract": "contracts/oracle/Oracle.sol:Oracle",
            "label": "max",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3998_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3993,
            "contract": "contracts/oracle/Oracle.sol:Oracle",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3997,
            "contract": "contracts/oracle/Oracle.sol:Oracle",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}